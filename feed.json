{
    "version": "https://jsonfeed.org/version/1",
    "title": "小钊の笔记",
    "subtitle": "前天是小兔子,昨天是小鹿,今天是你",
    "icon": "https://www.zhouxiaozhao.cn/images/favicon.ico",
    "description": "生物学在读博士",
    "home_page_url": "https://www.zhouxiaozhao.cn",
    "items": [
        {
            "id": "https://www.zhouxiaozhao.cn/2023/02/24/2023-02-24-ST(2)/",
            "url": "https://www.zhouxiaozhao.cn/2023/02/24/2023-02-24-ST(2)/",
            "title": "植物空间转录组分析2：STEEL+Seurat",
            "date_published": "2023-02-23T16:00:00.000Z",
            "content_html": "<p>本文将继续使用兰花空间转录组的数据，同时运用文献中提到的 STEEL 聚类方法进行分析，该方法也是由戚继团队开发的，看文章感觉聚类效果不错。<br>\n<img data-src=\"/img/posts/2023.2.24/1.png\" alt=\"聚类比较\"></p>\n<p>目前该文章还未被接收，大家可以先用下软件，主要能提供聚类信息和每个聚类的 marker 基因，但个人认为可视化方面还有所欠缺，所以这个教程将结合 STEEL 的聚类方法与 Seurat 的可视化函数来完整复现文章的聚类图和拟时图</p>\n<h1 id=\"steel聚类分析\"><a class=\"anchor\" href=\"#steel聚类分析\">#</a> STEEL 聚类分析</h1>\n<p>软件下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGVlbC1zdC5zb3VyY2Vmb3JnZS5pby8=\"> STEEL (sourceforge.io)</span><br>\n 使用说明<br>\n<img data-src=\"/img/posts/2023.2.24/2.png\" alt=\"image.png\"><br>\n 主要的参数就是 <strong>--beads</strong> <strong>--genes</strong> <strong>--pca</strong> <strong>--group</strong></p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.&#x2F;steel filtered_feature_bc_matrix  spatial&#x2F;tissue_positions_list.csv --pca&#x3D;20  pca20out</pre></td></tr></table></figure><p>输出结果<br>\n<img data-src=\"/img/posts/2023.2.24/3.png\" alt=\"steel\"><br>\ngenes 文件里面包含的就是聚类特异基因，map 文件就是聚类信息，我们使用<strong> pca20out.map.40</strong> 的聚类信息进行后续的分析</p>\n<h1 id=\"seurat聚类图\"><a class=\"anchor\" href=\"#seurat聚类图\">#</a> Seurat 聚类图</h1>\n<p>使用 Seurat 读取原始的数据，并将 STEEL 聚类信息读入</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>library (Seurat)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>library (dplyr)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>library (ggplot2)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>library (magrittr)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>library (cowplot)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>library (gtools)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>library (stringr)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>library (Matrix)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>library (tidyverse)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>library (patchwork)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>orc1&lt;- Load10X_Spatial (&quot;Slide_1&quot;)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>## 直接导入 STEEL 的聚类信息</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>STEEL&lt;- read.delim (&quot;STEEL&#x2F;Slide1.map.40&quot;,row.names &#x3D; 1)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>orc1 [[&quot;seurat_clusters&quot;]] &lt;- NA</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>clusters&lt;-data.frame (STEEL$Cluster)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>rownames (clusters) &lt;- rownames (STEEL)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>orc1 [[&quot;seurat_clusters&quot;]][rownames (clusters),] &lt;- clusters</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>## 去除 NA 值只保留有聚类的</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>orc1_new &lt;- orc1 [,rownames (clusters)]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Idents (orc1_new) &lt;- &#39;seurat_clusters&#39;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Idents (orc1_new) &lt;- factor (Idents (orc1_new),levels&#x3D;mixedsort (levels (Idents (orc1_new))))</pre></td></tr></table></figure><p>接下来就是利用<strong> SpatialDimPlot</strong> 绘制聚类图了</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>orc1_new &lt;- SCTransform(orc1_new, assay &#x3D; &quot;Spatial&quot;, return.only.var.genes &#x3D; FALSE, verbose &#x3D; FALSE)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>orc1_new &lt;- RunPCA(orc1_new, features &#x3D; VariableFeatures(orc1_new)) </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>orc1_new &lt;- RunTSNE(orc1_new, dims &#x3D; 1:20)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p1 &lt;- DimPlot(orc1_new, reduction &#x3D; &quot;tsne&quot;, label &#x3D; TRUE)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p2 &lt;- SpatialDimPlot(orc1_new, group.by &#x3D; &quot;seurat_clusters&quot;,label.size &#x3D; 3, pt.size.factor &#x3D; 1.3)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pearplot &lt;- plot_grid(p1,p2)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ggsave(&quot;STEEL&#x2F;tsne_Slide1_40.pdf&quot;, plot &#x3D; pearplot, width &#x3D; 6, height &#x3D; 6)</pre></td></tr></table></figure><p><img data-src=\"/img/posts/2023.2.24/4.png\" alt=\"聚类信息\"><br>\n这个结果其实已经和原文一模一样了，就是颜色不对应<br>\n<img data-src=\"/img/posts/2023.2.24/5.png\" alt=\"原文\"><br>\n单看某个聚类对应关系，完全一致</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p1&lt;- SpatialDimPlot(orc1_new, cells.highlight &#x3D; CellsByIdentities(object &#x3D; orc1_new, idents &#x3D; c(1:40)), facet.highlight &#x3D; TRUE, ncol &#x3D; 5)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ggsave(&quot;STEEL&#x2F;cluster_Slide1all.pdf&quot;, plot &#x3D; p1, width &#x3D; 19, height &#x3D; 12)</pre></td></tr></table></figure><p><img data-src=\"/img/posts/2023.2.24/6.png\" alt=\"聚类对应\"><br>\n对应好聚类关系接下就是拟时分析了</p>\n<h1 id=\"拟时分析\"><a class=\"anchor\" href=\"#拟时分析\">#</a> 拟时分析</h1>\n<p>在文章中做了两次拟时分析，本次分析只以 Fig2 的组织进行分析，其他的大家也可以自尝试</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>library (monocle)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>subdata &lt;- subset (orc1_new, idents &#x3D; c (19,21,37,38,39,40))</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre># 选择要分析的亚群</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>expression_matrix &#x3D; subdata@assays$Spatial@counts</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cell_metadata &lt;- data.frame (group &#x3D; subdata [[&#39;orig.ident&#39;]],clusters &#x3D; Idents (subdata))</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>gene_annotation &lt;- data.frame (gene_short_name &#x3D; rownames (expression_matrix), stringsAsFactors &#x3D; F) </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>rownames (gene_annotation) &lt;- rownames (expression_matrix)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>pd &lt;- new (&quot;AnnotatedDataFrame&quot;, data &#x3D; cell_metadata)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>fd &lt;- new (&quot;AnnotatedDataFrame&quot;, data &#x3D; gene_annotation)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>HSMM &lt;- newCellDataSet (expression_matrix,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                       phenoData &#x3D; pd,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                       featureData &#x3D; fd,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                       expressionFamily&#x3D;negbinomial.size ())</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>HSMM &lt;- detectGenes (HSMM,min_expr &#x3D; 0.1)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>HSMM_myo &lt;- estimateSizeFactors (HSMM)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>HSMM_myo &lt;- estimateDispersions (HSMM_myo)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>disp_table &lt;- dispersionTable (HSMM_myo)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>disp.genes &lt;- subset (disp_table, mean_expression &gt;&#x3D; 0.1 )</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>disp.genes &lt;- as.character (disp.genes$gene_id)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>HSMM_myo &lt;- reduceDimension (HSMM_myo, max_components &#x3D; 2, method &#x3D; &#39;DDRTree&#39;)</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>HSMM_myo &lt;-orderCells (HSMM_myo,reverse &#x3D; T)</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>#State 轨迹分布图</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>plot1 &lt;- plot_cell_trajectory (HSMM_myo, color_by &#x3D; &quot;State&quot;)</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>##Cluster 轨迹分布图</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>plot2 &lt;- plot_cell_trajectory (HSMM_myo, color_by &#x3D; &quot;clusters&quot;)</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>##Pseudotime 轨迹图</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>plot3 &lt;- plot_cell_trajectory (HSMM_myo, color_by &#x3D; &quot;Pseudotime&quot;)</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>plotc &lt;- plot1|plot2|plot3</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>ggsave (&quot;STEEL&#x2F;Combination1.pdf&quot;, plot &#x3D; plotc, width &#x3D; 18, height &#x3D; 6.2)</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre># 绘制拟时间</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>cell_Pseudotime &lt;- data.frame (pData (HSMM_myo)$Pseudotime)</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>rownames (cell_Pseudotime) &lt;- rownames (cell_metadata) </pre></td></tr><tr><td data-num=\"37\"></td><td><pre># 把拟时间对应到到组织切片位置上</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>orc1_new [[&#39;Pseudotime&#39;]] &lt;- NA</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>orc1_new [[&#39;Pseudotime&#39;]][rownames (cell_Pseudotime),] &lt;- cell_Pseudotime</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>p1 &lt;- SpatialFeaturePlot (orc1_new, features &#x3D; c (&quot;Pseudotime&quot;),pt.size.factor &#x3D; 1.3)</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>ggsave (&quot;STEEL&#x2F;pseudotime_feature1.pdf&quot;, plot &#x3D; p1, width &#x3D; 8, height &#x3D; 9)</pre></td></tr></table></figure><p>主要的亮点就在于可以把拟时结果体现在我们的组织切片上，这样我们在<strong> orderCells</strong> 这一步可以更加方便的判断每个 spot 的拟时间<br>\n<img data-src=\"/img/posts/2023.2.24/7.png\" alt=\"拟时间结果\"><br>\n<img data-src=\"/img/posts/2023.2.24/8.png\" alt=\"正文结果\"><br>\n<img data-src=\"/img/posts/2023.2.24/9.png\" alt=\"体现在切片上\"><br>\n可以看到和文章里的是一模一样的，接下来就是复现文章中的基因拟时分布和 BEAM 结果</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>data_subset &lt;- HSMM_myo [&#39;PAXXG054350&#39;,]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p1&lt;-plot_genes_in_pseudotime (data_subset, color_by &#x3D; &quot;clusters&quot;)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>data_subset &lt;- HSMM_myo [&#39;PAXXG051950&#39;,]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p2&lt;-plot_genes_in_pseudotime (data_subset, color_by &#x3D; &quot;clusters&quot;)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>data_subset &lt;- HSMM_myo [&#39;PAXXG086750&#39;,]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p3&lt;-plot_genes_in_pseudotime (data_subset, color_by &#x3D; &quot;clusters&quot;)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>data_subset &lt;- HSMM_myo [&#39;PAXXG345890&#39;,]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p4&lt;-plot_genes_in_pseudotime (data_subset, color_by &#x3D; &quot;clusters&quot;)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>data_subset &lt;- HSMM_myo [&#39;PAXXG010560&#39;,]</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p5&lt;-plot_genes_in_pseudotime (data_subset, color_by &#x3D; &quot;clusters&quot;)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>data_subset &lt;- HSMM_myo [&#39;PAXXG074500&#39;,]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p6&lt;-plot_genes_in_pseudotime (data_subset, color_by &#x3D; &quot;clusters&quot;) #color_by 可以换成 state 或者 pseudotime</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>pearplot &lt;- plot_grid (p1,p2,p3,p4,p5,p6,align &#x3D; &quot;v&quot;,axis &#x3D; &quot;b&quot;,ncol &#x3D; 1)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>ggsave (&quot;STEEL&#x2F;gene_pseudotime1.pdf&quot;, plot &#x3D; pearplot, width &#x3D; 5, height &#x3D; 15)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre># 拟时相关基因聚类热图   </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>disp_table &lt;- dispersionTable (HSMM_myo)</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>disp.genes &lt;- subset (disp_table, mean_expression &gt;&#x3D; 0.5&amp;dispersion_empirical &gt;&#x3D; 1*dispersion_fit)</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>disp.genes &lt;- as.character (disp.genes$gene_id)</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>mycds_sub &lt;- HSMM_myo [disp.genes,]</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>diff_test &lt;- differentialGeneTest (HSMM_myo [disp.genes,], cores &#x3D; 4, </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                                  fullModelFormulaStr &#x3D; &quot;~sm.ns (Pseudotime)&quot;)</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>sig_gene_names &lt;- row.names (subset (diff_test, qval &lt; 1e-04))</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>p2 &#x3D; plot_pseudotime_heatmap (HSMM_myo [sig_gene_names,], num_clusters&#x3D;6,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                             show_rownames&#x3D;F, return_heatmap&#x3D;T)</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>ggsave (&quot;STEEL&#x2F;pseudotime_heatmap1.pdf&quot;, plot &#x3D; p2, width &#x3D; 5, height &#x3D; 10)</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>## BEAM 分析</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>my_pseudotime_de &lt;- differentialGeneTest (HSMM_myo, cores &#x3D; 5)</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>BEAM_res &lt;- BEAM (HSMM_myo, branch_point &#x3D; 1, cores &#x3D; 4)</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>BEAM_res &lt;- BEAM_res [order (BEAM_res$qval),]</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>BEAM_res &lt;- BEAM_res [,c (&quot;gene_short_name&quot;, &quot;pval&quot;, &quot;qval&quot;)]</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>mycds_sub_beam &lt;- HSMM_myo [row.names (subset (BEAM_res, qval &lt; 1e-4)),]</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>pdf (&quot;STEEL&#x2F;BEAM1.pdf&quot;, width &#x3D; 8, height &#x3D; 12)</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>plot_genes_branched_heatmap (mycds_sub_beam, branch_point &#x3D; 1, num_clusters &#x3D; 6, cores &#x3D; 4,show_rownames &#x3D; FALSE)</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>dev.off ()</pre></td></tr></table></figure><p>可以看到 BEAM 不太相同，但除了这个以外其他的都是完全一致，这次分析达到了文章中的效果，比较满意</p>\n<p><img data-src=\"/img/posts/2023.2.24/10.png\" alt=\"pseudotime\"><br>\n<img data-src=\"/img/posts/2023.2.24/11.png\" alt=\"BEAM\"></p>\n<p>#总结<br>\n目前植物空间转录组刚刚起步，相信今年会有很多文章出现，到时候主要就是看创新点在哪，能解决什么问题</p>\n",
            "tags": [
                "生信学习",
                "单细胞",
                "空间转录组",
                "bioinformatics",
                "spatial_transcriptome"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2023/02/22/2023-02-22-ST(1)/",
            "url": "https://www.zhouxiaozhao.cn/2023/02/22/2023-02-22-ST(1)/",
            "title": "植物空间转录组分析1：Seurat基本流程",
            "date_published": "2023-02-21T16:00:00.000Z",
            "content_html": "<p>空间转录组是 2022 生命科学十大创新产品名单，因此将来会在生物学领域有非常大的应用空间，目前植物类的相关文章较少，在本次的系列教程中，将使用复旦大学戚继团队兰花空间转录组的数据，希望大家一起学习，掌握植物空间转录组基本的分析方法<br>\n数据连接<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vc2YuaW8vbXFzYjQvP3ZpZXdfb25seT03ODdiM2Q1YTgxZTU0YzI3YjNmMzNkNTg0MWI1OWE1MQ==\"> OSF | Spatiotemporal atlas of organogenesis in development of orchid flowers</span>, 与单细胞的数据结构基本一致，多了 spatial 这个文件夹，主要包含的就是切片信息和 spot 定位信息</p>\n<p><img data-src=\"/img/posts/2023.2.23/1.png\" alt=\"文章\"><br>\n<img data-src=\"/img/posts/2023.2.23/2.png\" alt=\"数据\"></p>\n<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>在本篇文章中，作者一共制作了兰花空间转录组切片，并使用了 STEEL 方法进行聚类，出于学习考虑，本次分析先使用 Seurat 的常见流程分析其中一个切片，后续推文中将使用文章中的 STELL 方法进行聚类并使用 Seurat 的其他函数进行后续分析<br>\n本次只分析 Slide1，感兴趣的可以试试其他切片<br>\n<img data-src=\"/img/posts/2023.2.23/3.png\" alt=\"Slide1\"></p>\n<h1 id=\"数据载入\"><a class=\"anchor\" href=\"#数据载入\">#</a> 数据载入</h1>\n<p>和单细胞一样，只是多了 spatial 这个文件夹需要输入</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>##&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;1. 安装依赖包 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>##BiocManager::install (c (&#39;Seurat&#39;,&#39;ggplot2&#39;,&#39;cowplot&#39;,&#39;dplyr&#39;))</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>##BiocManager::install (&quot;monocle&quot;,force &#x3D; TRUE) </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>library (Seurat)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>library (ggplot2)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>library (cowplot)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>library (dplyr)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>library (magrittr)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>library (gtools)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>library (stringr)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>library (Matrix)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>library (tidyverse)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>library (patchwork)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>##&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;2. 载入数据 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>orc1&lt;- Load10X_Spatial (&quot;Slide_1&quot;,filename &#x3D; &quot;filtered_feature_bc_matrix.h5&quot;,assay &#x3D; &quot;spatial&quot;)</pre></td></tr></table></figure><h1 id=\"质量控制\"><a class=\"anchor\" href=\"#质量控制\">#</a> 质量控制</h1>\n<p>不只是能体现小提琴图，还能将每个 spot 的测序质量体现在切片上，帮我们确定哪些组织可能会出现问题</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>##&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;3. 质量控制 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dir.create (&quot;QC&quot;)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>##UMI 统计画图</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>plot1 &lt;- VlnPlot (orc1, features &#x3D; &quot;nCount_Spatial&quot;, pt.size &#x3D; 0.1) + NoLegend ()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>plot2 &lt;- SpatialFeaturePlot (orc1, features &#x3D; &quot;nCount_Spatial&quot;) + theme (legend.position &#x3D; &quot;right&quot;)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pearplot &lt;- plot_grid (plot1,plot2) </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ggsave (&quot;QC&#x2F;Slide1_UMI.pdf&quot;, plot &#x3D; pearplot, width &#x3D; 12, height &#x3D; 5) </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>##Feature&#x2F;Gene 统计画图</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>plot1 &lt;- VlnPlot (orc1, features &#x3D; &quot;nFeature_Spatial&quot;, pt.size &#x3D; 0.1) + NoLegend ()</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>plot2 &lt;- SpatialFeaturePlot (orc1, features &#x3D; &quot;nFeature_Spatial&quot;) + theme (legend.position &#x3D; &quot;right&quot;)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>pearplot &lt;- plot_grid (plot1,plot2) </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ggsave (&quot;QC&#x2F;Slide1_Feature.pdf&quot;, plot &#x3D; pearplot, width &#x3D; 12, height &#x3D; 5)</pre></td></tr></table></figure><p><img data-src=\"/img/posts/2023.2.23/4.png\" alt=\"UMI\"><br>\n<img data-src=\"/img/posts/2023.2.23/5.png\" alt=\"feature\"><br>\n 可以明显的看到，不管是 UMI 还是 Feature，在 spot 中差异主要是有与切片组织的细胞数目以及细胞类型导致的。比如，在花瓣中可以看到非常少的 UMI 以及 Feature，在中间的分生组织中，UMI 和 Feature 的数目非常多。因此，单细胞的标准方法 (如 LogNormalize 函数) 可能会有问题，在空间转录组分析中，一般使用其他方法进行标准化。</p>\n<h1 id=\"数据标准化\"><a class=\"anchor\" href=\"#数据标准化\">#</a> 数据标准化</h1>\n<p>目前空间转录组数据推荐使用 sctransform，具体的原理我还没有看懂，所以先根据流程走一遍，看看效果<br>\n为了探究标准化方法的不同，sctransform 和 log 规范化结果如何与 UMIs 的数量相关。为了进行比较，首先运行 sctransform 来存储所有基因的值，并通过 NormalizeData 运行一个 log 规范化过程。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>##&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;4. 数据标准化 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>## 目前空间转录组推荐使用 SCTransform，集合了单细胞标准化的 NormalizeData ()，ScaleData ()，FindVariableFeatures ()，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dir.create (&quot;Normalize&quot;)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>orc1 &lt;- SCTransform (orc1, assay &#x3D; &quot;Spatial&quot;, return.only.var.genes &#x3D; FALSE, verbose &#x3D; FALSE)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>## 比较 SCTransform 与 log Normalization 的区别</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>orc1 &lt;- NormalizeData (orc1, verbose &#x3D; FALSE, assay &#x3D; &quot;Spatial&quot;)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>## 计算 UMI 与 Feature 的相关性，分为 5 组</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>orc1 &lt;- GroupCorrelation (orc1, group.assay &#x3D; &quot;Spatial&quot;, assay &#x3D; &quot;Spatial&quot;, slot &#x3D; &quot;data&quot;, do.plot &#x3D; FALSE)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>orc1 &lt;- GroupCorrelation (orc1, group.assay &#x3D; &quot;Spatial&quot;, assay &#x3D; &quot;SCT&quot;, slot &#x3D; &quot;scale.data&quot;, do.plot &#x3D; FALSE)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p1 &lt;- GroupCorrelationPlot (orc1, assay &#x3D; &quot;Spatial&quot;, cor &#x3D; &quot;nCount_Spatial_cor&quot;) + ggtitle (&quot;Log Normalization&quot;) + </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  theme (plot.title &#x3D; element_text (hjust &#x3D; 0.5))</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p2 &lt;- GroupCorrelationPlot (orc1, assay &#x3D; &quot;SCT&quot;, cor &#x3D; &quot;nCount_Spatial_cor&quot;) + ggtitle (&quot;SCTransform Normalization&quot;) + </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  theme (plot.title &#x3D; element_text (hjust &#x3D; 0.5))</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p3 &lt;- plot_grid (p1, p2)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>ggsave (&quot;Normalize&#x2F;Normalization_cor_Slide1.pdf&quot;, plot &#x3D; p3, width &#x3D; 12, height &#x3D; 5)</pre></td></tr></table></figure><p><img data-src=\"/img/posts/2023.2.23/6.png\" alt=\"标准化\"></p>\n<p>对于上面的箱形图，计算每个特征 (基因) 与 UMIs 数量 (这里的 nCount_Spatial 变量) 的相关性。然后，根据基因的平均表达将它们分组，并生成这些相关性的箱形图。<br>\n同时这里需要注意，SCT 标准化后有个单独的 assay (SCT)，里面包含三个矩阵，分别为 count,data 以及 scale.data，log 标准化也有一个 assay (Spatial)，里面也包含三个矩阵，但是 scale.data 的数据为 0<br>\n 标准化之后进行高变基因的筛选，这部分没什么可说的，与单细胞是一致的</p>\n<pre><code class=\"language-r\">top10 &lt;- head(VariableFeatures(orc1), 10) \nplot1 &lt;- VariableFeaturePlot(orc1) \nplot2 &lt;- LabelPoints(plot = plot1, points = top10, repel = TRUE, size=2.5) \nggsave(&quot;Normalize/VariableFeature_Slide1.pdf&quot;, plot = plot2, width = 9, height = 6)\n</code></pre>\n<p><img data-src=\"/img/posts/2023.2.23/7.png\" alt=\"高变基因筛选\"></p>\n<h1 id=\"数据降维与聚类\"><a class=\"anchor\" href=\"#数据降维与聚类\">#</a> 数据降维与聚类</h1>\n<p>由于文章中使用了 STEEL 方法，所以这次的分析只是走走流程，之后会按照文章中的 STEEL 方法进行测试</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>##&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;5. 数据降维与聚类 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dir.create (&quot;cluster&quot;)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>## PCA 降维并提取主成分</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>orc1 &lt;- RunPCA (orc1, features &#x3D; VariableFeatures (orc1_new)) </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>plot1 &lt;- DimPlot (orc1, reduction &#x3D; &quot;pca&quot;, group.by&#x3D;&quot;orig.ident&quot;) </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>plot2 &lt;- ElbowPlot (orc1, ndims&#x3D;40, reduction&#x3D;&quot;pca&quot;) </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pearplot &lt;- plot_grid (plot1,plot2)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ggsave (&quot;cluster&#x2F;PCA_Slide1.pdf&quot;, plot &#x3D; pearplot, width &#x3D; 13, height &#x3D; 6)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>pdf (&quot;cluster&#x2F;PC_heatmap_Slide1.pdf&quot;,height &#x3D; 12,width &#x3D; 12)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>DimHeatmap (orc1, dims &#x3D; 1:9, nfeatures&#x3D;10, cells &#x3D; 200, balanced &#x3D; TRUE)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>dev.off ()</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>## 细胞聚类</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>## 此步利用 细胞 - PC 值 矩阵计算细胞之间的距离，</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>## 然后利用距离矩阵来聚类。其中有两个参数需要人工选择，</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>## 第一个是 FindNeighbors () 函数中的 dims 参数，需要指定哪些 pc 轴用于分析，选择依据是之前介绍的 cluster&#x2F;pca.png 文件中的右图。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>## 第二个是 FindClusters () 函数中的 resolution 参数，需要指定一个数值，用于决定 clusters 的相对数量，数值越大 cluters 越多。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>orc1 &lt;- FindNeighbors (orc1, dims &#x3D; 1:20) </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>orc1 &lt;- FindClusters (orc1, resolution &#x3D; 0.9)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>metadata &lt;- orc1@meta.data</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>table (orc1@meta.data$seurat_clusters)</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>cell_cluster &lt;- data.frame (cell_ID&#x3D;rownames (metadata), cluster_ID&#x3D;metadata$seurat_clusters)</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>write.csv (cell_cluster,&#39;cluster&#x2F;cell_cluster_Slide1.csv&#39;,row.names &#x3D; F)</pre></td></tr></table></figure><p><img data-src=\"/img/posts/2023.2.23/8.png\" alt=\"PCA\"></p>\n<p>使用 resolution = 0.9 只生成了 12 个聚类，原文中有 40 个，大家在设置的时候可以把 resolution 调到 2 甚至 3 左右看看效果</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>## 非线性降维</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>## tsne</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>orc1 &lt;- RunTSNE (orc1, dims &#x3D; 1:20)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>embed_tsne &lt;- Embeddings (orc1, &#39;tsne&#39;)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>write.csv (embed_tsne,&#39;cluster&#x2F;embed_tsne_Slide1.csv&#39;)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p1 &lt;- DimPlot (orc1, reduction &#x3D; &quot;tsne&quot;, label &#x3D; TRUE)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p2 &lt;- SpatialDimPlot (orc1, label.size &#x3D; 3, pt.size.factor &#x3D; 1.3)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>pearplot &lt;- plot_grid (p1,p2)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ggsave (&quot;cluster&#x2F;tsne_Slide1.pdf&quot;, plot &#x3D; p2, width &#x3D; 6, height &#x3D; 6)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>## UMAP</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>orc1 &lt;- RunUMAP (orc1,dims &#x3D; 1:20)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>embed_umap &lt;- Embeddings (orc1, &#39;umap&#39;)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>write.csv (embed_umap,&#39;cluster&#x2F;embed_umap_Slide1.csv&#39;)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p1 &lt;- DimPlot (orc1, reduction &#x3D; &quot;umap&quot;, label &#x3D; TRUE)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p2 &lt;- SpatialDimPlot (orc1, label &#x3D; TRUE, label.size &#x3D; 3, pt.size.factor &#x3D; 1.3)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>pearplot &lt;- plot_grid (p1,p2)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>ggsave (&quot;cluster&#x2F;umap_Slide1.pdf&quot;, plot &#x3D; pearplot, width &#x3D; 13, height &#x3D; 6)</pre></td></tr></table></figure><p><img data-src=\"/img/posts/2023.2.23/9.png\" alt=\"TSNE\"><br>\n<img data-src=\"/img/posts/2023.2.23/10.png\" alt=\"UMAP\"><br>\n#6. 部分基因展示<br>\n此处是我比较纠结的地方，因为一开始得到的数据和原文中有点不符，后来发现可能的原因是文章中使用的展示数据是 counts</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>## featureplot</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dir.create(&quot;featureplot&quot;)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p1 &lt;- SpatialFeaturePlot(orc1, features &#x3D; &quot;PAXXG070630&quot;,slot&#x3D;&quot;counts&quot;,pt.size.factor &#x3D; 1.6,min.cutoff &#x3D; 0.1)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p2 &lt;- SpatialFeaturePlot(orc1, features &#x3D; &quot;PAXXG070630&quot;,slot&#x3D;&quot;data&quot;,pt.size.factor &#x3D; 1.6,min.cutoff &#x3D; 0.1)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p3 &lt;- SpatialFeaturePlot(orc1, features &#x3D; &quot;PAXXG070630&quot;,slot&#x3D;&quot;scale.data&quot;,pt.size.factor &#x3D; 1.6,min.cutoff &#x3D; 0.1)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pearplot &lt;- plot_grid(p1,p2,p3,align &#x3D; &quot;v&quot;,axis &#x3D; &quot;b&quot;,ncol &#x3D; 3)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ggsave(&quot;featureplot&#x2F;SCTSlide1.pdf&quot;, plot &#x3D; pearplot, width &#x3D; 18, height &#x3D; 7)</pre></td></tr></table></figure><p><img data-src=\"/img/posts/2023.2.23/11.png\" alt=\"三种展示方式\"><br>\n<img data-src=\"/img/posts/2023.2.23/12.png\" alt=\"原文\"><br>\n #总结<br>\n目前先把前期的工作的进行了一下，原文中进行了两个拟时分析，但因为聚类不一样所以先不进行分析，研究完 STEEL 之后再进行拟时分析。<br>\n总体来讲与单细胞变化不大，有优势也有劣势吧，对于细胞分型来说，空间转录组有先天优势，可以直接根据切片信息判断细胞类型，但是空间转录组最小的单位 spot，不能代表单个细胞，分辨率可能还存在问题</p>\n",
            "tags": [
                "生信学习",
                "单细胞",
                "空间转录组",
                "bioinformatics",
                "spatial_transcriptome"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2022/12/15/2022-12-15-GO/",
            "url": "https://www.zhouxiaozhao.cn/2022/12/15/2022-12-15-GO/",
            "title": "比较基因组学分析3：特异节点基因家族富集分析（非模式物种GO/KEEG库构建）",
            "date_published": "2022-12-14T16:00:00.000Z",
            "content_html": "<h1 id=\"1前言\"><a class=\"anchor\" href=\"#1前言\">#</a> 1. 前言</h1>\n<p>上次讲到基因家族的收缩扩张分析，这次我们以某个节点为切入点，进行特异节点的功能富集分析<br>\n其实这篇教程适用于所有的非模式物种 (没有现成的 GO/KEGG 库的物种) 的富集分析<br>\n物种特异的比较简单就不进行实践了</p>\n<h1 id=\"2节点选择\"><a class=\"anchor\" href=\"#2节点选择\">#</a> 2. 节点选择</h1>\n<p>这次选择一个进化上比较重要的节点，水生到陆生的过程，对应进化树为 node25<br>\n<img data-src=\"/img/posts/2022.12.15/1.png\" alt=\"进化树\"></p>\n<h1 id=\"3获取目的基因\"><a class=\"anchor\" href=\"#3获取目的基因\">#</a> 3. 获取目的基因</h1>\n<p>主要是目标基因与背景基因的选择，目标基因可以是该节点显著扩张的基因家族包含的所有物种基因，背景基因一般为该节点包含的 Orthogroup</p>\n<h2 id=\"31-获取node25显著扩张的基因\"><a class=\"anchor\" href=\"#31-获取node25显著扩张的基因\">#</a> 3.1 获取 node25 显著扩张的基因</h2>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat Gamma_p0.05change.tab | cut -f1,27 | grep &quot;+[1-9]&quot; | cut -f1 &gt; node25significant.expand</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#node25 显著扩张的 orthogroupsID</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>grep -f node0significant.expand Orthogroups.txt |sed &quot;s&#x2F;&#x2F;\\n&#x2F;g&quot; | grep -E &quot;Ath|Csa|Vvi|Aof|Osa|Zma|Nco|Atr|Tpl|Cri|Smo|Mpo|Ppa&quot; | sort | uniq &gt; node25significant.expand.genes</pre></td></tr></table></figure><p>目前我们得到了需要进行富集分析的目标基因，接下来是背景基因的选择</p>\n<h2 id=\"32-node25背景基因选择\"><a class=\"anchor\" href=\"#32-node25背景基因选择\">#</a> 3.2 node25 背景基因选择</h2>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>awk &#39;NR!&#x3D;1 &amp;&amp; $27&gt;0 &#123;print $0&#125;&#39; Gamma_count.tab | cut -f1 &gt; node25.orthogroups</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#node25 中存在基因的 orthogroupsID</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>grep -f node25.orthogroups Orthogroups.txt |sed &quot;s&#x2F;&#x2F;\\n&#x2F;g&quot; | grep -E &quot;Ath|Csa|Vvi|Aof|Osa|Zma|Nco|Atr|Tpl|Cri|Smo|Mpo|Ppa&quot; | sort | uniq &gt; node25.genes</pre></td></tr></table></figure><p><span class=\"label primary\">node25.genes</span> 和<span class=\"label primary\"> node25significant.expand.genes</span> 就是我们进行富集分析所需要的基因号，接下来就是构建背景基因的 GO 和 KEGG 注释，由于是无参物种，所以我们需要自己构建</p>\n<h1 id=\"4-背景基因的go和kegg注释\"><a class=\"anchor\" href=\"#4-背景基因的go和kegg注释\">#</a> 4 背景基因的 GO 和 KEGG 注释</h1>\n<h2 id=\"41-gokegg注释\"><a class=\"anchor\" href=\"#41-gokegg注释\">#</a> 4.1 GO/KEGG 注释</h2>\n<p>使用 eggnog 对背景基因进行注释</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>seqkit grep -f node25.genes ..&#x2F;..&#x2F;..&#x2F;allpep.fa &gt; node25background.fa </pre></td></tr><tr><td data-num=\"2\"></td><td><pre># 提取背景基因，需要严格注意基因数是否一致</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>emapper.py -m diamond -i node25background.fa -o node25 --cpu 16</pre></td></tr></table></figure><p>最后我们拿到<span class=\"label primary\"> node25.emapper.annotations</span> 文件，将前三行和 #删除<br>\n<img data-src=\"/img/posts/2022.12.15/2.png\" alt=\"node25.emapper.annotations\"></p>\n<h2 id=\"42-go注释库构建\"><a class=\"anchor\" href=\"#42-go注释库构建\">#</a> 4.2 GO 注释库构建</h2>\n<p>获取 GO 的注释信息：下载地址：<span class=\"exturl\" data-url=\"aHR0cDovL3B1cmwub2JvbGlicmFyeS5vcmcvb2JvL2dvL2dvLWJhc2ljLm9ibw==\">http://purl.obolibrary.org/obo/go/go-basic.obo</span> 之后进行修饰</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>grep &quot;^id:&quot; go-basic.obo |awk &#39;&#123;print $2&#125;&#39; &gt; GO.id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>grep &quot;^name:&quot; go-basic.obo |awk &#39;&#123;print $2&#125;&#39; &gt; GO.name </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>grep &quot;^namespace:&quot; go-basic.obo |awk &#39;&#123;print $2&#125;&#39; &gt; GO.class</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>paste GO.id GO.name GO.class -d &quot;\\t&quot; &gt; GO.library</pre></td></tr></table></figure><p>文件一共有三列</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GO:1903040\texon-exon junction complex assembly\tbiological process</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>GO:1903045\tneural crest cell migration involved in sympathetic nervous system development\tbiological process</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>GO:1903046\tmeiotic cell cycle process\tbiological process</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>GO:1903043\tpositive regulation of chondrocyte hypertrophy\tbiological process</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>GO:1903044\tprotein localization to membrane raft\tbiological process</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>GO:1903049\tnegative regulation of acetylcholine-gated cation channel activity\tbiological process</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>GO:1903047\tmitotic cell cycle process\tbiological process</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>GO:1903048\tregulation of acetylcholine-gated cation channel activity\tbiological process</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>GO:1903012\tpositive regulation of bone development\tbiological process</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>GO:1903013\tresponse to differentiation-inducing factor 1\tbiological process</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>GO:1903010\tregulation of bone development\tbiological process</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>GO:1903011\tnegative regulation of bone development\tbiological process</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>GO:1903016\tnegative regulation of exo-alpha-sialidase activity\tbiological process</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>GO:1903017\tpositive regulation of exo-alpha-sialidase activity\tbiological process</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>GO:1903014\tcellular response to differentiation-inducing factor 1\tbiological process</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>GO:1903015\tregulation of exo-alpha-sialidase activity\tbiological process</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>GO:1903018\tregulation of glycoprotein metabolic process\tbiological process</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>GO:1903019\tnegative regulation of glycoprotein metabolic process\tbiological process</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>GO:1903020\tpositive regulation of glycoprotein metabolic process\tbiological process</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>GO:1903023\tregulation of ascospore-type prospore membrane assembly\tbiological process</pre></td></tr></table></figure><h2 id=\"43-kegg注释库构建\"><a class=\"anchor\" href=\"#43-kegg注释库构建\">#</a> 4.3 KEGG 注释库构建</h2>\n<p>需要下载<span class=\"label primary\"> ko00001.json</span>： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2Vub21lLmpwL2tlZ2ctYmluL2dldF9odGV4dD9rbzAwMDAx\">https://www.genome.jp/kegg-bin/get_htext?ko00001</span></p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 需要下载 json 文件 (这是是经常更新的)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre># https:&#x2F;&#x2F;www.genome.jp&#x2F;kegg-bin&#x2F;get_htext?ko00001</pre></td></tr><tr><td data-num=\"3\"></td><td><pre># 代码来自：http:&#x2F;&#x2F;www.genek.tv&#x2F;course&#x2F;225&#x2F;task&#x2F;4861&#x2F;show</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>library (jsonlite)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>library (purrr)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>library (RCurl)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>library (dplyr)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>library (stringr)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> kegg &lt;- function (json &#x3D; &quot;ko00001.json&quot;) &#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    pathway2name &lt;- tibble (Pathway &#x3D; character (), Name &#x3D; character ())</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ko2pathway &lt;- tibble (Ko &#x3D; character (), Pathway &#x3D; character ())</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    kegg &lt;- fromJSON (json)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    for (a in seq_along (kegg [[&quot;children&quot;]][[&quot;children&quot;]])) &#123;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      A &lt;- kegg [[&quot;children&quot;]][[&quot;name&quot;]][[a]]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      for (b in seq_along (kegg [[&quot;children&quot;]][[&quot;children&quot;]][[a]][[&quot;children&quot;]])) &#123;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        B &lt;- kegg [[&quot;children&quot;]][[&quot;children&quot;]][[a]][[&quot;name&quot;]][[b]] </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        for (c in seq_along (kegg [[&quot;children&quot;]][[&quot;children&quot;]][[a]][[&quot;children&quot;]][[b]][[&quot;children&quot;]])) &#123;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          pathway_info &lt;- kegg [[&quot;children&quot;]][[&quot;children&quot;]][[a]][[&quot;children&quot;]][[b]][[&quot;name&quot;]][[c]]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          pathway_id &lt;- str_match (pathway_info, &quot;ko [0-9]&#123;5&#125;&quot;)[1]</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          pathway_name &lt;- str_replace (pathway_info, &quot;\\\\[PATH:ko [0-9]&#123;5&#125;\\\\]&quot;, &quot;&quot;) %&gt;% str_replace (&quot;[0-9]&#123;5&#125; &quot;,&quot;&quot;)</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          pathway2name &lt;- rbind (pathway2name, tibble (Pathway &#x3D; pathway_id, Name &#x3D; pathway_name))</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          kos_info &lt;- kegg [[&quot;children&quot;]][[&quot;children&quot;]][[a]][[&quot;children&quot;]][[b]][[&quot;children&quot;]][[c]][[&quot;name&quot;]]</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          kos &lt;- str_match (kos_info, &quot;K [0-9]*&quot;)[,1]</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          ko2pathway &lt;- rbind (ko2pathway, tibble (Ko &#x3D; kos, Pathway &#x3D; rep (pathway_id, length (kos))))</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    colnames (ko2pathway) &lt;- c (&quot;KO&quot;,&quot;Pathway&quot;)</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    save (pathway2name, ko2pathway, file &#x3D; &quot;kegg_info.RData&quot;)</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    write.table (pathway2name,&quot;KEGG.library&quot;,sep&#x3D;&quot;\\t&quot;,row.names &#x3D; F)</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>kegg (json &#x3D; &quot;ko00001.json&quot;)</pre></td></tr></table></figure><h2 id=\"44-背景注释构建\"><a class=\"anchor\" href=\"#44-背景注释构建\">#</a> 4.4 背景注释构建</h2>\n<p>主要是将自己的基因集与注释库结合</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>library (clusterProfiler)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>library (dplyr)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>library (stringr)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>options (stringsAsFactors &#x3D; F)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>##&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;STEP1:GO 注释生成 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre># 自己构建的话，首先需要读入文件</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>egg &lt;- read.delim (&quot;node25.emapper.annotations&quot;,header &#x3D; T,sep&#x3D;&quot;\\t&quot;)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>egg [egg&#x3D;&#x3D;&quot;&quot;]&lt;-NA  #将空行变成 NA，方便下面的去除</pre></td></tr><tr><td data-num=\"9\"></td><td><pre># 从文件中挑出基因 query 与 eggnog 注释信息</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>##gene_info &lt;- egg %&gt;% </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>##  dplyr::select (GID &#x3D; query, GENENAME &#x3D; eggNOG_OGs) %&gt;% na.omit ()</pre></td></tr><tr><td data-num=\"12\"></td><td><pre># 挑出 query_name 与 GO 注释信息</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>gterms &lt;- egg %&gt;%</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  dplyr::select (query, GOs) %&gt;% na.omit ()</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>gene_ids &lt;- egg$query</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>eggnog_lines_with_go &lt;- egg$GOs!&#x3D; &quot;&quot;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>eggnog_lines_with_go</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>eggnog_annoations_go &lt;- str_split (egg [eggnog_lines_with_go,]$GOs, &quot;,&quot;)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>gene2go &lt;- data.frame (gene &#x3D; rep (gene_ids [eggnog_lines_with_go],</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                    times &#x3D; sapply (eggnog_annoations_go, length)),</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                         term &#x3D; unlist (eggnog_annoations_go))</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>names (gene2go) &lt;- c (&#39;gene_id&#39;, &#39;ID&#39;)</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>go2name &lt;- read.delim (&#39;GO.library&#39;, header &#x3D; FALSE, stringsAsFactors &#x3D; FALSE)</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>names (go2name) &lt;- c (&#39;ID&#39;, &#39;Description&#39;, &#39;Ontology&#39;)</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>go_anno &lt;- merge (gene2go, go2name, by &#x3D; &#39;ID&#39;, all.x &#x3D; TRUE)</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>## 将 GO 注释信息保存</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>save (go_anno,file &#x3D; &quot;node25_GO.rda&quot;)</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>##&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;STEP2:KEGG 注释生成 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>gene2ko &lt;- egg %&gt;%</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  dplyr::select (GID &#x3D; query, KO &#x3D; KEGG_ko) %&gt;%</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  na.omit (）</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>pathway2name &lt;- read.delim (&quot;KEGG.library&quot;)</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>colnames (pathway2name)&lt;-c (&quot;Pathway&quot;,&quot;Name&quot;)</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>gene2ko$KO &lt;- str_replace (gene2ko$KO, &quot;ko:&quot;,&quot;&quot;)</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>gene2pathway &lt;- gene2ko %&gt;% left_join (ko2pathway, by &#x3D; &quot;KO&quot;) %&gt;% </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  dplyr::select (GID, Pathway) %&gt;%</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  na.omit ()</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>kegg_anno&lt;- merge (gene2pathway,pathway2name,by &#x3D; &#39;Pathway&#39;, all.x &#x3D; TRUE)[,c (2,1,3)]</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>colnames (kegg_anno) &lt;- c (&#39;gene_id&#39;,&#39;pathway_id&#39;,&#39;pathway_description&#39;)</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>save (kegg_anno,file &#x3D; &quot;node25_KEGG.rda&quot;)</pre></td></tr></table></figure><h2 id=\"45-gokeeg富集分析\"><a class=\"anchor\" href=\"#45-gokeeg富集分析\">#</a> 4.5 GO/KEEG 富集分析</h2>\n<p>利用生成的<span class=\"label primary\"> node25_GO.rda</span>、<span class=\"label primary\">node25_KEGG.rda</span>、以及之前的<span class=\"label primary\"> node25significant.expand.genes</span> 文件进行富集分析<br>\n我在分析的时候没有设置 p 的阈值，输出了所有的富集结果，毕竟作图也只需要 TOP10 或者 TOP20，大家按照需求设定</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>##&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;STEP3:GO 富集分析 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre># 目标基因列表 (全部基因)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gene_select &lt;- read.delim (file &#x3D; &#39;node25significant.expand.genes&#39;, stringsAsFactors &#x3D; FALSE,header &#x3D; F)$V1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>#GO 富集分析</pre></td></tr><tr><td data-num=\"5\"></td><td><pre># 默认以所有注释到 GO 的基因为背景集，也可通过 universe 参数输入背景集</pre></td></tr><tr><td data-num=\"6\"></td><td><pre># 默认以 p&lt;0.05 为标准，Benjamini 方法校正 p 值，q 值阈值 0.2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre># 默认输出 top500 富集结果</pre></td></tr><tr><td data-num=\"8\"></td><td><pre># 如果想输出所有富集结果（不考虑 p 值阈值等），将 p、q 等值设置为 1 即可</pre></td></tr><tr><td data-num=\"9\"></td><td><pre># 或者直接在 enrichResult 类对象中直接提取需要的结果</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>go_rich &lt;- enricher (gene &#x3D; gene_select,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    TERM2GENE &#x3D; go_anno [c (&#39;ID&#39;, &#39;gene_id&#39;)], </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    TERM2NAME &#x3D; go_anno [c (&#39;ID&#39;, &#39;Description&#39;)], </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    pvalueCutoff &#x3D; 1, </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    pAdjustMethod &#x3D; &#39;BH&#39;, </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    qvalueCutoff &#x3D; 1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                   )</pre></td></tr><tr><td data-num=\"17\"></td><td><pre># 输出默认结果，即根据上述 p 值等阈值筛选后的</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>tmp &lt;- merge (go_rich, go2name [c (&#39;ID&#39;, &#39;Ontology&#39;)], by &#x3D; &#39;ID&#39;)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>tmp &lt;- tmp [c (10, 1:9)]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>tmp &lt;- tmp [order (tmp$pvalue), ]</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>write.table (tmp, &#39;node6expand.xls&#39;, sep &#x3D; &#39;\\t&#39;, row.names &#x3D; FALSE, quote &#x3D; FALSE)</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>##&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;STEP4:KEGG 注释 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>gene_select &lt;- read.delim (&#39;node25significant.expand.genes&#39;, stringsAsFactors &#x3D; FALSE,header &#x3D; F)$V1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>#KEGG 富集分析</pre></td></tr><tr><td data-num=\"27\"></td><td><pre># 默认以所有注释到 KEGG 的基因为背景集，也可通过 universe 参数指定其中的一个子集作为背景集</pre></td></tr><tr><td data-num=\"28\"></td><td><pre># 默认以 p&lt;0.05 为标准，Benjamini 方法校正 p 值，q 值阈值 0.2</pre></td></tr><tr><td data-num=\"29\"></td><td><pre># 默认输出 top500 富集结果</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>kegg_rich &lt;- enricher (gene &#x3D; gene_select,</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                      TERM2GENE &#x3D; kegg_anno [c (&#39;pathway_id&#39;, &#39;gene_id&#39;)], </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                      TERM2NAME &#x3D; kegg_anno [c (&#39;pathway_id&#39;, &#39;pathway_description&#39;)], </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                      pvalueCutoff &#x3D; 1, </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                      pAdjustMethod &#x3D; &#39;BH&#39;, </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                      qvalueCutoff &#x3D; 1, </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                      maxGSSize &#x3D; 500)</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre># 输出默认结果，即根据上述 p 值等阈值筛选后的</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>write.table (kegg_rich, &#39;node25significant.expand.KEGG.xls&#39;, sep &#x3D; &#39;\\t&#39;, row.names &#x3D; FALSE, quote &#x3D; FALSE)</pre></td></tr></table></figure><p><strong>需要注意生成的文件中有一些 term 可能是重复的，比如 GO 富集结果的 16,17 行，仔细看 geneID 那一列就会发现两行的基因是完全一样的，需要删掉一个。还有一点就是在 GO/KEGG 富集的结果中，有一些是动物相关的 (KEGG 结果的第一行)，这些也请酌情考虑</strong><br>\n<img data-src=\"/img/posts/2022.12.15/3.png\" alt=\"GO结果\"><br>\n<img data-src=\"/img/posts/2022.12.15/4.png\" alt=\"KEGG结果\"></p>\n<h1 id=\"5-gokegg绘图\"><a class=\"anchor\" href=\"#5-gokegg绘图\">#</a> 5 GO/KEGG 绘图</h1>\n<p>此次使用 TOP10 的 term 进行绘图，看一下在陆生植物出现的关键进化节点主要是哪些基因功能发生了大规模扩张</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>library (ggplot2)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pathway &#x3D; read.delim (&quot;node25significant.expand.GO.xls&quot;,header &#x3D; T,sep&#x3D;&quot;\\t&quot;)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pathway$GeneRatio&lt;- pathway [,10]&#x2F;54700 ## 这个 54700 是 GeneRatio 的那个数值，自己修改</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pathway$log&lt;- -log10 (pathway [,6])</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>library (dplyr)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>library (ggrepel)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>GO &lt;- arrange (pathway,pathway [,6])</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>GO_dataset &lt;- GO [1:10,]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre># 按照 PValue 从低到高排序 [升序]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>GO_dataset$Description&lt;- factor (GO_dataset$Description,levels &#x3D; rev (GO_dataset$Description))</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>GO_dataset$GeneRatio &lt;- as.numeric (GO_dataset$GeneRatio)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>GO_dataset$GeneRatio</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>GO_dataset$log</pre></td></tr><tr><td data-num=\"16\"></td><td><pre># 图片背景设定</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>mytheme &lt;- theme (axis.title&#x3D;element_text (face&#x3D;&quot;bold&quot;, size&#x3D;8,colour &#x3D; &#39;black&#39;), #坐标轴标题</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                 axis.text.y &#x3D; element_text (face&#x3D;&quot;bold&quot;, size&#x3D;6,colour &#x3D; &#39;black&#39;), #坐标轴标签</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                 axis.text.x &#x3D; element_text (face &#x3D;&quot;bold&quot;,color&#x3D;&quot;black&quot;,angle&#x3D;0,vjust&#x3D;1,size&#x3D;8),</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                 axis.line &#x3D; element_line (size&#x3D;0.5, colour &#x3D; &#39;black&#39;), #轴线</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                 panel.background &#x3D; element_rect (color&#x3D;&#39;black&#39;), #绘图区边框</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                 plot.title &#x3D; element_text (face&#x3D;&quot;bold&quot;, size&#x3D;8,colour &#x3D; &#39;black&#39;,hjust &#x3D; 0.8),</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                 legend.key &#x3D; element_blank () #关闭图例边框</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>)</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre># 绘制 GO 气泡图</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>p &lt;- ggplot (GO_dataset,aes (x&#x3D;GeneRatio,y&#x3D;Description,colour&#x3D;log,size&#x3D;Count,shape&#x3D;Ontology))+</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  geom_point ()+</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  scale_size (range&#x3D;c (2, 8))+</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  scale_colour_gradient (low &#x3D; &quot;#52c2eb&quot;,high &#x3D; &quot;#EA4F30&quot;)+</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  theme_bw ()+</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  labs (x&#x3D;&#39;Fold Enrichment&#39;,y&#x3D;&#39;GO Terms&#39;, #自定义 x、y 轴、标题内容</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       title &#x3D; &#39;Enriched GO Terms&#39;)+</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  labs (color&#x3D;expression (-log [10](pvalue)))+</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  theme (legend.title&#x3D;element_text (size&#x3D;8), legend.text &#x3D; element_text (size&#x3D;14))+</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  theme (axis.title.y &#x3D; element_text (margin &#x3D; margin (r &#x3D; 50)),axis.title.x &#x3D; element_text (margin &#x3D; margin (t &#x3D; 20)))+</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  theme (axis.text.x &#x3D; element_text (face &#x3D;&quot;bold&quot;,color&#x3D;&quot;black&quot;,angle&#x3D;0,vjust&#x3D;1))</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>plot &lt;- p+mytheme</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>plot</pre></td></tr><tr><td data-num=\"40\"></td><td><pre># 保存图片</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>ggsave (plot,filename &#x3D; &quot;node25GO.pdf&quot;,width &#x3D; 210,height &#x3D; 210,units &#x3D; &quot;mm&quot;,dpi&#x3D;300)</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>ggsave (plot,filename &#x3D; &quot;node25GO.png&quot;,width &#x3D; 210,height &#x3D; 210,units &#x3D; &quot;mm&quot;,dpi&#x3D;300)</pre></td></tr></table></figure><p>KEGG 同理，大家修改运行参数和输入文件即可</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pathway &#x3D; read.delim (&quot;node25significant.expand.KEGG.xls&quot;,header &#x3D; T,sep&#x3D;&quot;\\t&quot;)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pathway$GeneRatio&lt;- pathway [,9]&#x2F;31537</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pathway$log&lt;- -log10 (pathway [,5])</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>library (dplyr)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>library (ggrepel)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>GO &lt;- arrange (pathway,pathway [,5])</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>GO_dataset &lt;- GO [1:10,]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>#Pathway 列最好转化成因子型，否则作图时 ggplot2 会将所有 Pathway 按字母顺序重排序</pre></td></tr><tr><td data-num=\"12\"></td><td><pre># 将 Pathway 列转化为因子型</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>GO_dataset$Description&lt;- factor (GO_dataset$Description,levels &#x3D; rev (GO_dataset$Description))</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>GO_dataset$GeneRatio &lt;- as.numeric (GO_dataset$GeneRatio)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>GO_dataset&lt;- arrange (GO_dataset,GO_dataset [,5])</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>GO_dataset$GeneRatio</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>GO_dataset$log</pre></td></tr><tr><td data-num=\"18\"></td><td><pre># 图片背景设定</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>mytheme &lt;- theme (axis.title&#x3D;element_text (face&#x3D;&quot;bold&quot;, size&#x3D;8,colour &#x3D; &#39;black&#39;), #坐标轴标题</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                 axis.text.y &#x3D; element_text (face&#x3D;&quot;bold&quot;, size&#x3D;6,colour &#x3D; &#39;black&#39;), #坐标轴标签</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                 axis.text.x &#x3D; element_text (face &#x3D;&quot;bold&quot;,color&#x3D;&quot;black&quot;,angle&#x3D;0,vjust&#x3D;1,size&#x3D;8),</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                 axis.line &#x3D; element_line (size&#x3D;0.5, colour &#x3D; &#39;black&#39;), #轴线</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                 panel.background &#x3D; element_rect (color&#x3D;&#39;black&#39;), #绘图区边框</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                 plot.title &#x3D; element_text (face&#x3D;&quot;bold&quot;, size&#x3D;8,colour &#x3D; &#39;black&#39;,hjust &#x3D; 0.8),</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                 legend.key &#x3D; element_blank () #关闭图例边框</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>)</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre># 绘制 KEGG 气泡图</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>p &lt;- ggplot (GO_dataset,aes (x&#x3D;GeneRatio,y&#x3D;Description,colour&#x3D;log,size&#x3D;Count))+</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  geom_point ()+</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  scale_size (range&#x3D;c (2, 8))+</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  scale_colour_gradient (low &#x3D; &quot;#52c2eb&quot;,high &#x3D; &quot;#EA4F30&quot;)+</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  theme_bw ()+</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  labs (x&#x3D;&#39;Fold Enrichment&#39;,y&#x3D;&#39;KEEG Terms&#39;, #自定义 x、y 轴、标题内容</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>       title &#x3D; &#39;Enriched KEEG Terms&#39;)+</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  labs (color&#x3D;expression (-log [10](pvalue)))+</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  theme (legend.title&#x3D;element_text (size&#x3D;8), legend.text &#x3D; element_text (size&#x3D;14))+</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  theme (axis.title.y &#x3D; element_text (margin &#x3D; margin (r &#x3D; 50)),axis.title.x &#x3D; element_text (margin &#x3D; margin (t &#x3D; 20)))+</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  theme (axis.text.x &#x3D; element_text (face &#x3D;&quot;bold&quot;,color&#x3D;&quot;black&quot;,angle&#x3D;0,vjust&#x3D;1))</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>plot &lt;- p+mytheme</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>plot</pre></td></tr><tr><td data-num=\"42\"></td><td><pre># 保存图片</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>ggsave (plot,filename &#x3D; &quot;node25KEGG.pdf&quot;,width &#x3D; 210,height &#x3D; 210,units &#x3D; &quot;mm&quot;,dpi&#x3D;300)</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>ggsave (plot,filename &#x3D; &quot;node25KEGG.png&quot;,width &#x3D; 210,height &#x3D; 210,units &#x3D; &quot;mm&quot;,dpi&#x3D;300)</pre></td></tr></table></figure><p><strong>最后我们可以看到，在 GO 富集中，最显著的是水运输相关功能，KEGG 富集中，最显著的是昼夜节律，大家觉得陆生植物的进化和这两个功能有没有关系？欢迎讨论</strong><br>\n<img data-src=\"/img/posts/2022.12.15/5.png\" alt=\"GO注释\"><br>\n<img data-src=\"/img/posts/2022.12.15/6.png\" alt=\"KEGG注释\"></p>\n<h1 id=\"6-结果整理\"><a class=\"anchor\" href=\"#6-结果整理\">#</a> 6 结果整理</h1>\n<p>结合这三篇推文的结果，我们可以整理一张主图<br>\n<img data-src=\"/img/posts/2022.12.15/7.png\" alt=\"结果\"></p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>== 比较基因组学分析的基本内容已经介绍完了，如果说有遗漏的内容那应该就是加倍化事件，由于本次使用的数据集跨度过大所以没有增加 WGD 的分析，大家有什么问题欢迎交流 ==</p>\n",
            "tags": [
                "生信学习",
                "基因组",
                "bioinformatics",
                "Comparative_Genomics"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2022/12/14/2022-12-14-CAFE/",
            "url": "https://www.zhouxiaozhao.cn/2022/12/14/2022-12-14-CAFE/",
            "title": "比较基因组学分析2：基因家族收缩与扩张分析",
            "date_published": "2022-12-13T16:00:00.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<h2 id=\"上篇推文中介绍到比较基因组学分析常用套路的第一步利用单拷贝基因构建具有分化时间的物种树补充一点对于跨度较大的物种可以选择单拷贝基因的方法比如此次分析使用的物种-对于目级或者科级水平来讲推荐使用共线性基因建树-以十字花科为例如果用单拷贝基因可能只有1000多组但是使用共线性可能有接近5000组-共线性基因建树可以使用wgdi的方法这部分内容我以后会探索一下-sun-et-al-2022-wgdi本篇推文主要讲基因家族的收缩与扩张分析使用的软件是cafe52020年发表相较于cafe4来讲操作更加方便并且新增了模型gamma\"><a class=\"anchor\" href=\"#上篇推文中介绍到比较基因组学分析常用套路的第一步利用单拷贝基因构建具有分化时间的物种树补充一点对于跨度较大的物种可以选择单拷贝基因的方法比如此次分析使用的物种-对于目级或者科级水平来讲推荐使用共线性基因建树-以十字花科为例如果用单拷贝基因可能只有1000多组但是使用共线性可能有接近5000组-共线性基因建树可以使用wgdi的方法这部分内容我以后会探索一下-sun-et-al-2022-wgdi本篇推文主要讲基因家族的收缩与扩张分析使用的软件是cafe52020年发表相较于cafe4来讲操作更加方便并且新增了模型gamma\">#</a> 上篇推文中介绍到比较基因组学分析常用套路的第一步，利用单拷贝基因构建具有分化时间的物种树，补充一点，<span class=\"pink\">对于跨度较大的物种，可以选择单拷贝基因的方法，比如此次分析使用的物种。对于目级或者科级水平来讲，推荐使用共线性基因建树。以十字花科为例，如果用单拷贝基因，可能只有 1000 多组，但是使用共线性可能有接近 5000 组。</span>共线性基因建树可以使用 WGDI 的方法，这部分内容我以后会探索一下。<br>\n<img data-src=\"/img/posts/2022.12.14/1.png\" alt=\"Sun et al 2022 WGDI\"><br>\n 本篇推文主要讲基因家族的收缩与扩张分析，使用的软件是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hhaG5sYWIvQ0FGRTU=\"> cafe5</span>，2020 年发表，相较于 cafe4 来讲操作更加方便并且新增了模型 (Gamma)</h2>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git clone https:&#x2F;&#x2F;github.com&#x2F;hahnlab&#x2F;CAFE5.git</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cd CAFE5</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.&#x2F;configure</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>make</pre></td></tr></table></figure><p>安装过程其实有点复杂，可能不同的服务器会出现不同的错误，这个请自行解决</p>\n<h1 id=\"cafe5使用\"><a class=\"anchor\" href=\"#cafe5使用\">#</a> CAFE5 使用</h1>\n<p>输入文件至少要两个，一个是基因家族数目统计文件 Genefamilies_Count.tsv，一个是树文件 tree.txt（带有分化时间），还可以增加一个 lambda 文件</p>\n<h2 id=\"主要参数\"><a class=\"anchor\" href=\"#主要参数\">#</a> 主要参数</h2>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--fixed_alpha, -a</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Alpha value of the discrete gamma distribution to use in category calculations. If not specified, the alpha parameter will be estimated by maximum likelihood.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--lambda_per_family, -b</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Estimate lambda by family (for testing purposes only).</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>--cores, -c</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Number of processing cores to use, requires an integer argument. Default&#x3D;All available cores.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>--error_model, -e</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Run with no file name to estimate the global error model file. This file can be provided in subsequent runs by providing the path to the Error model file with no spaces (e.g. -eBase_error_model.txt).</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>--Expansion, -E</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Expansion parameter for Nelder-Mead optimizer, Default&#x3D;2.</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>--rootdist, -f</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Path to root distribution file for simulating datasets.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>--help, -h</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Help menu with a list of all commands.</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>--infile, -i</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Path to tab delimited gene families file to be analyzed - Required for estimation.</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>--Iterations, -I</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>Maximum number of iterations that will be performed in lambda search. Default&#x3D;300 (increase this number if likelihood is still improving when limit is hit).</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>--n_gamma_cats, -k</pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Number of gamma categories to use. If specified, the Gamma model will be used to run calculations; otherwise the Base model will be used.</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>--fixed_lambda, -l</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>Value (between 0 and 1) for a single user provided lambda value, otherwise lambda is estimated.</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>--log_config, -L</pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>Turn on logging, provide name of the configuration file for logging (see example log.config file).</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>--fixed_multiple_lambdas, -m</pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>Multiple lambda values, comma separated, must be used in conjunction with lambda tree (-y).</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>--output_prefix, -o</pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>Output directory - Name of directory automatically created for output. Default&#x3D;results.</pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>--poisson, -p</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>Use a Poisson distribution for the root frequency distribution. If no -p flag is given, a uniform distribution will be used. A value can be specified (-p10, or --poisson&#x3D;10); otherwise the distribution will be estimated from the gene families.</pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>--pvalue, -P</pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>P-value to use for determining significance of family size change, Default&#x3D;0.05.</pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>--chisquare_compare, -r</pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>Chi square compare (not tested).</pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>--Reflection, -R</pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>Reflection parameter for Nelder-Mead optimizer, Default&#x3D;1.</pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>--simulate, -s</pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>Simulate families. Either provide an argument of the number of families to simulate (-s100, or --simulate&#x3D;100) or provide a rootdist file giving a set of root family sizes to match. Without such a file, the families will be generated with root sizes selected randomly between 0 and 100.</pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>--tree, -t</pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>Path to file containing newick formatted tree - Required for estimation.</pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>--lambda_tree, -y</pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>Path to lambda tree, for use with multiple lambdas.</pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>--zero_root, -z</pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>Include gene families that don&#39;t exist at the root, not recommended.</pre></td></tr></table></figure><p>其实主要用的就是 - i -p -k -y -t 这些参数</p>\n<h2 id=\"输入文件准备\"><a class=\"anchor\" href=\"#输入文件准备\">#</a> 输入文件准备</h2>\n<h3 id=\"genefamilies_counttsv\"><a class=\"anchor\" href=\"#genefamilies_counttsv\">#</a> Genefamilies_Count.tsv</h3>\n<p>制表符分隔的基因家族计数文件，通常用 OrthoMCL,<br>\nOrthoFinder 等软件获取计数信息。<br>\n示例格式</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Desc\tFamily ID\thuman\tchimp\torang\tbaboon\tgibbon\tmacaque\tmarmoset rat\tmouse\tcat\thorse\tcow</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ATPase\tORTHOMCL1\t 52\t 55\t 54\t 57\t 54\t  56\t  56\t 53\t 52\t57\t55\t 54</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>(null)\tORTHOMCL2\t 76\t 51\t 41\t 39\t 45\t  36\t  37\t 67\t 79\t37\t41\t 49</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>HMG box\tORTHOMCL3\t 50\t 49\t 48\t 48\t 46\t  49\t  48\t 55\t 52\t51\t47\t 55</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>(null)\tORTHOMCL4\t 43\t 43\t 47\t 53\t 44\t  47\t  46\t 59\t 58\t51\t50\t 55</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Dynamin\tORTHOMCL5\t 43\t 40\t 43\t 44\t 31\t  46\t  33\t 79\t 70\t43\t49\t 50</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>......</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>....</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>..</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>DnaJ\tORTHOMCL10016\t 45\t 46\t 50\t 46\t 46 \t  47\t  46\t 48\t 49\t45\t44\t 48</pre></td></tr></table></figure><p>我们首先利用 OrthoFinder 的 Orthogroups.GeneCount.tsv 文件生成符合要求的输入文件</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cp Results_May02&#x2F;Orthogroups&#x2F;Orthogroups.GeneCount.tsv CAFE&#x2F;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>awk &#39;OFS&#x3D;&quot;\\t&quot; &#123;$NF&#x3D;&quot;&quot;; print&#125;&#39; Orthogroups.GeneCount.tsv &gt; tmp &amp;&amp; awk &#39;&#123;print &quot;(null)&quot;&quot;\\t&quot;$0&#125;&#39; tmp &gt; cafe.input.tsv &amp;&amp; sed -i &#39;1s&#x2F;(null)&#x2F;Desc&#x2F;g&#39; cafe.input.tsv &amp;&amp; rm tmp</pre></td></tr></table></figure><p>查看文件格式</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Desc    Orthogroup      Aof.pro Ath.pro Atr.pro Cba.pro Cri.pro Csa.pro Csu.pro Kle.pro Mpo.pro Nco.pro Osa.pro Ppa.pro Smo.pro Tpl.pro Vca.pro Vvi.pro Zma.pro</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>(null)  OG0000000       145     112     95      5       372     129     3       1       2       217     126     16      206     419     4       177     117</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>(null)  OG0000001       9       4       3       1691    9       96      2       56      2       4       21      0       2       5       3       2       0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>(null)  OG0000002       32      117     62      1       92      117     2       0       20      81      119     77      40      193     5       107     161</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>(null)  OG0000003       37      104     54      3       89      76      4       5       10      74      144     22      47      134     8       79      154</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>(null)  OG0000004       73      104     51      4       40      80      2       10      12      76      87      33      22      136     5       97      135</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>(null)  OG0000005       28      46      36      11      37      47      0       3       50      81      81      32      48      120     0       54      73</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>(null)  OG0000006       41      43      74      6       38      57      0       4       25      57      52      19      33      155     0       87      40</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>(null)  OG0000007       58      52      60      0       18      42      0       0       12      50      56      17      57      99      1       82      52</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>(null)  OG0000008       38      57      26      7       52      47      4       6       19      40      59      43      20      29      1       41      80</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>(null)  OG0000009       46      57      26      1       25      46      1       2       11      52      65      29      13      50      1       48      87</pre></td></tr></table></figure><p>生成之后还需要剔除不同物种间拷贝数差异过大的基因家族，否则会报错，有内置脚本可以使用，我在运行的时候需要去掉第一行才能使用</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python ~&#x2F;soft&#x2F;CAFE5&#x2F;tutorial&#x2F;clade_and_size_filter.py -i cafe.input.tsv -o gene_family_filter.txt -s</pre></td></tr></table></figure><p>笨方法</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>awk &#39;NR&#x3D;&#x3D;1 || $3&lt;100 &amp;&amp; $4&lt;100 &amp;&amp; $5&lt;100 &amp;&amp; $6&lt;100 &amp;&amp; $7&lt;100 &amp;&amp; $8&lt;100 &amp;&amp; $9&lt;100 &amp;&amp; $10&lt;100 &amp;&amp; $11&lt;100 &amp;&amp; $12&lt;100 &amp;&amp; $13&lt;100 &amp;&amp; $14&lt;100 &amp;&amp; $15&lt;100 &amp;&amp; $16&lt;100 &amp;&amp; $17&lt;100 &amp;&amp; $18&lt;100 &amp;&amp; $19&lt;100 &#123;print $0&#125;&#39; cafe.input.tsv &gt;gene_family_filter.txt</pre></td></tr></table></figure><p>最后的文件格式，保证第一行的物种名字与进化树的一致即可</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Desc    Orthogroup      Aof     Ath     Atr     Cba     Cri     Csa     Csu     Kle     Mpo     Nco     Osa     Ppa     Smo     Tpl     Vca     Vvi     Zma</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>(null)  OG0000020       26      37      23      4       35      28      0       1       24      28      43      24      27      47      0       35      42</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>(null)  OG0000021       49      41      31      7       30      31      8       2       7       26      49      15      11      31      0       36      45</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>(null)  OG0000022       27      25      31      0       27      34      2       1       23      25      46      18      27      44      1       39      45</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>(null)  OG0000024       37      40      27      0       22      30      1       11      9       33      38      18      25      43      0       37      39</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>(null)  OG0000029       28      26      23      2       24      25      1       2       5       32      34      31      17      35      1       30      40</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>(null)  OG0000030       23      30      16      1       23      27      1       1       27      26      26      16      15      49      1       28      35</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>(null)  OG0000031       28      36      26      3       27      23      8       1       3       17      37      10      18      38      3       34      28</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>(null)  OG0000032       18      16      25      0       24      19      0       5       4       25      36      6       38      49      1       38      35</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>(null)  OG0000033       19      17      20      0       12      16      4       6       18      35      42      4       23      39      3       45      28</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>(null)  OG0000035       17      37      17      8       28      24      2       2       5       30      41      8       6       26      2       32      37</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>(null)  OG0000036       22      15      17      3       22      19      7       12      13      20      24      20      30      38      3       35      22</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>(null)  OG0000039       14      27      36      0       34      24      0       2       2       12      41      4       47      13      0       37      26</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>(null)  OG0000040       15      30      9       1       19      35      0       2       11      25      26      19      12      48      0       39      27</pre></td></tr></table></figure><h3 id=\"treetxt\"><a class=\"anchor\" href=\"#treetxt\">#</a> tree.txt</h3>\n<p>本步骤直接使用 mcmctree 生成的 FigTree.tre 文件修改一下即可使用</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>grep  &quot;UTREE 1 &#x3D;&quot; FigTree.tre | sed -E -e &quot;s&#x2F;\\[[^]]*\\]&#x2F;&#x2F;g&quot; -e &quot;s&#x2F;[ \\t]&#x2F;&#x2F;g&quot; -e &quot;&#x2F;^$&#x2F;d&quot; -e &quot;s&#x2F;UTREE1&#x3D;&#x2F;&#x2F;&quot; &gt; tree.txt</pre></td></tr></table></figure><h2 id=\"运行cafe5\"><a class=\"anchor\" href=\"#运行cafe5\">#</a> 运行 CAFE5</h2>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cafe5 -i gene_family_filter.txt -t tree.txt -o out -c 1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>## 如果使用 Gamma 模型与泊松分布</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> cafe5 -i gene_family_filter.txt -t tree.txt -o out -c 1 -k 2 -p ## 注意 - k 可以调，一般为 2-5</pre></td></tr></table></figure><p>结果还是报错<br>\n<img data-src=\"/img/posts/2022.12.14/2.png\" alt=\"报错\"><br>\n查了一下解决方法，可以将 lambda 值调低 (0.0001) 再进行计算<br>\n<img data-src=\"/img/posts/2022.12.14/3.png\" alt=\"解决方案\"></p>\n<p>重新运行</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cafe5 -i gene_family_filter.txt -t tree.txt -o out -c 16 -l 0.0001 -k 2 -p</pre></td></tr></table></figure><p>当大家出现这种错误时，可以尝试这种解决方案，单单删除这些家族是没用的。</p>\n<h2 id=\"cafe5输出结果\"><a class=\"anchor\" href=\"#cafe5输出结果\">#</a> CAFE5 输出结果</h2>\n<h3 id=\"结果文件\"><a class=\"anchor\" href=\"#结果文件\">#</a> 结果文件</h3>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Gamma_asr.tre ## 每个基因家族的树文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Gamma_branch_probabilities.tab  ## 每个分支计算的概率</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Gamma_category_likelihoods.txt </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Gamma_change.tab ## 每一个基因家族在每个节点的收缩与扩增数目</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Gamma_clade_results.txt ## 每个节点基因家族的扩增 &#x2F; 收缩数目</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Gamma_count.txt ## 每一个基因家族在每个节点的数目</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Gamma_family_likelihoods.txt</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Gamma_family_results.txt ## 基因家族变化的 p 值和是否显著的结果</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Gamma_results.txt ## 模型，最终似然值，最终 Lambda 值等参数信息。</pre></td></tr></table></figure><p>我们主要用的文件有<span class=\"label primary\"> Gamma_asr.tre</span> (主要对应后面表格中的节点)、<span class=\"label primary\">Gamma_change.tab</span> (看哪些基因家族在哪个节点发生变化)、<span class=\"label primary\">Gamma_clade_results.txt</span> (体现在树上，每个节点基因家族的收缩 / 扩增数目)、<span class=\"label primary\">Gamma_family_results.txt</span> (显著扩增 / 收缩的基因家族)</p>\n<h3 id=\"每个节点基因家族收缩扩增数目的体现\"><a class=\"anchor\" href=\"#每个节点基因家族收缩扩增数目的体现\">#</a> 每个节点基因家族收缩 / 扩增数目的体现</h3>\n<p>其实有绘图脚本，但是很久没有更新，可能不适用于 CAFE5，我们可以自己画<br>\n将基因家族的扩增 / 收缩数目体现在树上，需要两个文件，<span class=\"label primary\">Gamma_asr.tre</span>，<span class=\"label primary\">Gamma_clade_results.txt</span></p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat Gamma_clade_results.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#Taxon_ID       Increase        Decrease</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Mpo&lt;21&gt; 232     1298</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Ppa&lt;20&gt; 2231    371</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&lt;31&gt;    134     65</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&lt;25&gt;    949     220</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&lt;23&gt;    134     209</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Atr&lt;13&gt; 516     922</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Kle&lt;29&gt; 493     741</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>&lt;12&gt;    245     56</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>&lt;28&gt;    314     340</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&lt;4&gt;     118     176</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Cri&lt;17&gt; 1669    287</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>&lt;22&gt;    214     184</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>&lt;19&gt;    445     93</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>&lt;16&gt;    291     352</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Osa&lt;3&gt;  579     572</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Aof&lt;6&gt;  935     840</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>&lt;8&gt;     142     112</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Csa&lt;1&gt;  326     834</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>&lt;7&gt;     640     138</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Tpl&lt;15&gt; 1147    395</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>&lt;14&gt;    204     273</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Nco&lt;11&gt; 631     559</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Zma&lt;2&gt;  1776    232</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Vvi&lt;5&gt;  958     433</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>&lt;10&gt;    413     112</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>&lt;9&gt;     345     66</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Smo&lt;18&gt; 842     1315</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Cba&lt;24&gt; 744     1664</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>&lt;30&gt;    23      17</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Ath&lt;0&gt;  1090    291</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Csu&lt;27&gt; 305     1560</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Vca&lt;26&gt; 438     1040</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>less Gamma_asr.tre</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BEGIN TREES;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  TREE OG0000021 &#x3D; ((Kle&lt;29&gt;*_2:820.007,(((Mpo&lt;21&gt;*_7:428.285,Ppa&lt;20&gt;*_15:428.285)&lt;23&gt;_12:70.3982,((Cri&lt;17&gt;_30:404.796,(Tpl&lt;15&gt;_31:308.175,(Atr&lt;13&gt;_31:208.47,(Nco&lt;11&gt;*_26:176.909,(((Osa&lt;3&gt;*_49:45.2652,Zma&lt;2&gt;_45:45.2652)&lt;7&gt;_45:60.4652,Aof&lt;6&gt;*_49:105.73)&lt;9&gt;*_44:25.8965,(Vvi&lt;5&gt;_36:101.378,(Csa&lt;1&gt;*_31:83.0358,Ath&lt;0&gt;*_41:83.0358)&lt;4&gt;_36:18.3421)&lt;8&gt;_36:30.2489)&lt;10&gt;*_36:45.2824)&lt;12&gt;_31:31.5605)&lt;14&gt;_31:99.7053)&lt;16&gt;*_30:96.6205)&lt;19&gt;*_27:48.1939,Smo&lt;18&gt;_11:452.99)&lt;22&gt;*_13:45.694)&lt;25&gt;*_12:190.787,Cba&lt;24&gt;_7:689.47)&lt;28&gt;*_7:130.537)&lt;31&gt;_5:177.864,(Csu&lt;27&gt;*_8:874.03,Vca&lt;26&gt;*_0:874.03)&lt;30&gt;_5:123.841)&lt;32&gt;_5</pre></td></tr></table></figure><p>可以看到少了个 32<br>\n 我们可以利用<span class=\"label primary\"> Gamma_change.tab</span> 文件去找一下<br>\n经查看确实没有，忽略这一部分<br>\n将两个文件的 nodeid 对应即可绘图<br>\n<img data-src=\"/img/posts/2022.12.14/4.png\" alt=\"基因家族收缩和扩张\"></p>\n<h3 id=\"其他整理\"><a class=\"anchor\" href=\"#其他整理\">#</a> 其他整理</h3>\n<p>相较于 CAFE4，这些结果并没有直接体现显著扩张 / 收缩的基因家族，或者我们想找一下某个节点具体扩张的基因，可以结合目前拿到的输出文件进行进一步整理</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat Gamma_family_results.txt |grep &quot;y&quot;|cut -f1 &gt;p0.05.significant </pre></td></tr><tr><td data-num=\"2\"></td><td><pre># 提取显著扩张或收缩的 orthogroupsID</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>grep -f p0.05.significant Gamma_change.tab &gt; Gamma_p0.05change.tab</pre></td></tr><tr><td data-num=\"4\"></td><td><pre># 显著扩张 &#x2F; 收缩的基因家族在每个节点的收缩与扩增数目</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cat Gamma_p0.05change.tab | cut -f1,2 | grep &quot;+[1-9]&quot; | cut -f1 &gt; node0significant.expand</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>#Ath 显著扩张的 orthogroupsID</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>wc -l node0significant.expand</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>#Ath 显著扩张的基因家族数目</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cp ..&#x2F;..&#x2F;Results_May02&#x2F;Orthogroups&#x2F;Orthogroups.tsv .&#x2F;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>grep -f node0significant.expand Orthogroups.tsv | cut -f3 | sed &quot;s&#x2F;&#x2F;\\n&#x2F;g&quot; | sed &quot;s&#x2F;\\t&#x2F;\\n&#x2F;g&quot; | sed &quot;s&#x2F;,&#x2F;&#x2F;g&quot; | sort | uniq &gt; node0significant.expand.genes</pre></td></tr><tr><td data-num=\"11\"></td><td><pre># 提取 Ath 显著扩张的基因，方法一</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>cp ..&#x2F;..&#x2F;Results_May02&#x2F;Orthogroups&#x2F;Orthogroups.txt .&#x2F;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>grep -f node0significant.expand Orthogroups.txt |sed &quot;s&#x2F;&#x2F;\\n&#x2F;g&quot; | grep &quot;Ath&quot; | sort | uniq  &gt; node0significant.expand.genes</pre></td></tr><tr><td data-num=\"14\"></td><td><pre># 提取 Ath 显著扩张的基因，方法二</pre></td></tr></table></figure><h1 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h1>\n<p>总体来说，个人感觉 CAFE5 要比 CAFE4 方便很多，但是输出结果的可视化方面还需要加强，下一篇推文将简单实践某个节点的基因功能富集分析 (GO/KEGG), 类似于分析下图的红色节点。<br>\n<img data-src=\"/img/posts/2022.12.14/5.png\" alt=\"image.png\"></p>\n",
            "tags": [
                "生信学习",
                "基因组",
                "bioinformatics",
                "Comparative_Genomics"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2022/12/08/2022-12-08-SingleCopy/",
            "url": "https://www.zhouxiaozhao.cn/2022/12/08/2022-12-08-SingleCopy/",
            "title": "比较基因组学分析1：构建单拷贝基因树",
            "date_published": "2022-12-07T16:00:00.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>之前有写过<a href=\"https://www.zhouxiaozhao.cn/2020/07/18/2020-07-18-orthofinder/\">单拷贝基因构建物种树</a>的流程，现在我对流程进行优化，而且将会增加后续的基因家族收缩与扩张分析，希望对大家的分析有所帮助</p>\n<h1 id=\"物种选择\"><a class=\"anchor\" href=\"#物种选择\">#</a> 物种选择</h1>\n<p>在此我不在介绍软件的原理和安装了，大家可以去看我之前的推文<br>\n物种选择此次包含了整个绿色植物，从绿藻门到被子植物<br>\n大部分基因组是在 jgi phytozome 上下载的<br>\n绿藻门 Chlorophyte：小球藻：Coccomyxa subellipsoidea (Csu), 团藻：Volvox carteri (Vca)<br>\n 轮藻门 Charophyta：布氏轮藻：Chara braunii (Cba),  Klebsormidium nitens (Kle)<br>\n 苔藓植物门 Bryophyta：地钱：Marchantia polymorpha (Mpo), 小立碗藓：Physcomitrium patens (Ppa)<br>\n 石松类 Lycopsida： 江南卷柏：Selaginella moellendorffii (Smo)<br>\n 蕨类 Ferns： 水蕨：Ceratopteris richardii (Cri)<br>\n 裸子植物门 Gymnospermae：北美乔柏 Thuja plicata (Tpl)<br>\n 基部被子植物 Basial Angiosperm：无油樟：Amborella trichopoda (Atr), 睡莲：Nymphaea colorata (Nco)<br>\n 双子叶植物 Eudicot：葡萄：Vitis vinifera (Vvi), 拟南芥：Arabidopsis thaliana (Ath), 黄瓜：Cucumis sativus (Csa)<br>\n 单子叶植物 Monocot: 芦笋：Asparagus officinalis (Aof),  水稻：Oryza sativa (Osa), 玉米：Zea mays (Zma)<br>\n 下载完成后我对每个蛋白序列的 ID 前面加上了物种简写，方便后续使用</p>\n<pre><code class=\"language-bash\">sed -i &quot;s/&gt;/&gt;Ath/g&quot; Ath.pro.fasta\n</code></pre>\n<h1 id=\"orthofinder获得单拷贝基因\"><a class=\"anchor\" href=\"#orthofinder获得单拷贝基因\">#</a> Orthofinder 获得单拷贝基因</h1>\n<p>将所有物种的蛋白文件放到 CGA 文件夹下</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>orthofinder -t 16 -f CGA&#x2F;</pre></td></tr></table></figure><p>我们主要使用 Orthoogroups 查看正交群的基因和使用 Single_Copy_Orthologue_Sequences 里的单拷贝基因构建系统发育树</p>\n<p>WorkingDirectory 其中包含运算过程的中间文件，例如 diamond 结果，如果我们想去掉某一物种，在 SpeciesIDs.txt 中将该物种注释掉</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>0: Aof.pro.fasta</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1: Ath.pro.fasta</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>2: Atr.pro.fasta</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>3: Cba.pro.fasta</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>4: Cri.pro.fasta</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>5: Csa.pro.fasta</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>6: Csu.pro.fasta</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>7: Kle.pro.fasta</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8: Mpo.pro.fasta</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>9: Nco.pro.fasta</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>10: Osa.pro.fasta</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>11: Ppa.pro.fasta</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>#12: Pum.pro.fasta</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>13: Smo.pro.fasta</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>14: Tpl.pro.fasta</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>15: Vca.pro.fasta</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>16: Vvi.pro.fasta</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>17: Zma.pro.fasta</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>orthofinder -b WorkingDirectory</pre></td></tr></table></figure><p>如果想增加额外的物种进行分析，可以按照如下方式运行</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>orthofinder -b WorkingDirectory -f new_fasta_directory</pre></td></tr></table></figure><h1 id=\"利用单拷贝基因构建系统发育树\"><a class=\"anchor\" href=\"#利用单拷贝基因构建系统发育树\">#</a> 利用单拷贝基因构建系统发育树</h1>\n<p>Orthofinder 的 Single_Copy_Orthologue_Sequences 下存放着单拷贝同源基因的序列，我们可以利用这些序列构建系统发育树<br>\n建树方法可以分为串联法与并联法<br>\n不同的是，<span class=\"pink\">串联法是将得到的单拷贝同源基因比对后进行了串联，每个物种都得到一个很大的序列，然后进行建树；并联法是将每个单拷贝同源基因集比对后建树，然后再利用 Astral 构建了物种树</span>，这里目前只讲串联法，并联法正在研究</p>\n<h2 id=\"串联法建树\"><a class=\"anchor\" href=\"#串联法建树\">#</a> 串联法建树</h2>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vi test.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>for i in *.fa</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>do</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    file&#x3D;$&#123;i%.fa*&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    mafft --maxiterate 1000 --localpair &quot;$&#123;file&#125;.fa&quot; &gt; &quot;$&#123;file&#125;.aln&quot;        ## 多序列比对</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   (也可以添加一步，将蛋白文件转为 cds 文件再进行后续的分析，pal2nal.pl &quot;$&#123;file&#125;.aln&quot; &quot;$&#123;file&#125;.cds&quot; -output fasta &gt; &quot;$&#123;file&#125;.cds.aln)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Gblocks &quot;$&#123;file&#125;.aln&quot; -b4&#x3D;5 -b5&#x3D;h -t&#x3D;p -e&#x3D;.gb          ## 提取保守序列</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    seqkit seq &quot;$&#123;file&#125;.aln.gb&quot; -w 0 &gt; &quot;$&#123;file&#125;.new.aln&quot;           ## 多行序列并为一行</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    awk &#39;&#123;if (NR%2&#x3D;&#x3D;1) print substr ($1, 1, 4); else print $0&#125;&#39; &quot;$&#123;file&#125;.new.aln&quot; &gt; &quot;$&#123;file&#125;.final.aln&quot; ## ID 修饰</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>done</pre></td></tr></table></figure><p>这一步需要的软件 (mafft,Gblocks,seqkit) 请自行安装</p>\n<p>接下来将所有的 aln 文件串联</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>seqkit concat *.final.aln &gt; all.fa</pre></td></tr></table></figure><p>将所有单拷贝基因串联在一起后，进行模型预测，这次使用 modeltestng 进行预测</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>modeltest-ng -i all.fa -d aa -o modeltest -p 16</pre></td></tr></table></figure><p>在 modeltest.out 文件中，我们可以看到我们需要的模型并且可以直接 copy 命令<br>\n<img data-src=\"/img/posts/2022.12.8/1.png\" alt=\"modeltest输出结果\"></p>\n<p>接下来进行建树</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>raxmlHPC-PTHREADS-SSE3 -T 32 -f a -x 123 -p 123 -N 10000 -m PROTGAMMAILGF -k -O -o Csu,Vca -n all.tre -s all.fa</pre></td></tr></table></figure><p>得到<span class=\"label primary\"> RAxML_bipartitions.all.tre</span> 文件查看树结构<br>\n<img data-src=\"/img/posts/2022.12.8/2.png\" alt=\"树结构\"><br>\n结果和进化关系是一致的</p>\n<h2 id=\"并联法建树\"><a class=\"anchor\" href=\"#并联法建树\">#</a> 并联法建树</h2>\n<p>并联法建树使用 Astral，将所有的单拷贝基因树合并为一颗物种树</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>orthDir&#x3D;~&#x2F;CGApaper&#x2F;protein&#x2F;OrthoFinder&#x2F;Results_May02   #基于 Orthofinder 结果</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cat  $orthDir&#x2F;Orthogroups&#x2F;Orthogroups_SingleCopyOrthologues.txt |while read aa; do cat  $orthDir&#x2F;Gene_Trees&#x2F;$aa\\_tree.txt |awk &#39;&#123;print $0&#125;&#39;   ;done &gt; SingleCopy.trees</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sed -r  &#39;s&#x2F;([(,]&#123;1&#125;[A-Za-z]+)_[^:]+&#x2F;\\1&#x2F;g&#39; SingleCopy.trees &gt; Astral_input.trees</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>java -jar   ~&#x2F;soft&#x2F;ASTRAL-5.7.1&#x2F;astral.5.7.1.jar  -i  Astral_input.trees  -o Astral_output.tree -t 8</pre></td></tr></table></figure><p>最后得到 Astral_output.tree，里面包含了不同拓扑结构的可能性，目前先到这一步</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>(Csu,(Vca,(Kle,(Cba,((Smo,(Cri,(Tpl,((Atr,Nco)&#39;[q1&#x3D;0.56;q2&#x3D;0.24;q3&#x3D;0.21]&#39;:0.3957605767189867,((Ath,(Vvi,Csa)&#39;[q1&#x3D;0.59;q2&#x3D;0.24;q3&#x3D;0.17]&#39;:0.47671301702525964)&#39;[q1&#x3D;0.9;q2&#x3D;0.06;q3&#x3D;0.04]&#39;:1.82319624265162,(Aof,(Zma,Osa)&#39;[q1&#x3D;0.98;q2&#x3D;0.01;q3&#x3D;0.01]&#39;:3.3756896221149395)&#39;[q1&#x3D;0.73;q2&#x3D;0.11;q3&#x3D;0.16]&#39;:0.8957898742947543)&#39;[q1&#x3D;0.59;q2&#x3D;0.13;q3&#x3D;0.28]&#39;:0.4793457920367108)&#39;[q1&#x3D;0.95;q2&#x3D;0.01;q3&#x3D;0.04]&#39;:2.471696418051194)&#39;[q1&#x3D;0.92;q2&#x3D;0.02;q3&#x3D;0.06]&#39;:2.040688555382602)&#39;[q1&#x3D;0.62;q2&#x3D;0.18;q3&#x3D;0.2]&#39;:0.5471348976356571)&#39;[q1&#x3D;0.37;q2&#x3D;0.32;q3&#x3D;0.32]&#39;:0.04487496622879318,(Ppa,Mpo)&#39;[q1&#x3D;0.74;q2&#x3D;0.15;q3&#x3D;0.1]&#39;:0.9286981407683164)&#39;[q1&#x3D;0.86;q2&#x3D;0.07;q3&#x3D;0.07]&#39;:1.5475625087160123)&#39;[q1&#x3D;0.56;q2&#x3D;0.21;q3&#x3D;0.23]&#39;:0.4056697116894409)&#39;[q1&#x3D;0.98;q2&#x3D;0.02;q3&#x3D;0.01]&#39;:3.121909101338843):0.0);</pre></td></tr></table></figure><h1 id=\"物种分化时间计算\"><a class=\"anchor\" href=\"#物种分化时间计算\">#</a> 物种分化时间计算</h1>\n<p>此次使用 mcmctree 计算物种的分化时间，首先在 timetree 上查询物种的分化时间进行标定，修改树文件，需要注意在标定时间是尽量较早的节点和较晚的节点都进行标定</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>17      1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>((Kle,(((Mpo,Ppa),((Cri,(Tpl,(Atr,(Nco,(((Osa,Zma)&#39;&gt;42&lt;52&#39;,Aof)&#39;&gt;104&lt;125&#39;,(Vvi,(Csa,Ath))&#39;&gt;98&lt;117&#39;)&#39;&gt;85&lt;128&#39;)&#39;&gt;173&lt;199&#39;)&#39;&gt;136&gt;247&#39;)&#39;&gt;289&lt;330&#39;)&#39;&gt;392&lt;422&#39;,Smo)&#39;410&lt;468&#39;)&#39;&gt;472&lt;515&#39;,Cba)),(Csu,Vca)&#39;&gt;800&lt;1000&#39;)&#39;&gt;725&lt;1200&#39;;</pre></td></tr></table></figure><p>配置文件书写</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cp ~&#x2F;soft&#x2F;paml4.9i&#x2F;mcmctree.ctl mcmctree1.ctl</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vi mcmctree1.ctl</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          seed &#x3D; -1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       seqfile &#x3D; all.fa</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      treefile &#x3D; all.tre</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       outfile &#x3D; out</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         ndata &#x3D; 1 ## 必须注意为 1 </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       seqtype &#x3D; 2  * 0: nucleotides; 1:codons; 2:AAs ## 序列格式，蛋白就选择 AA</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       usedata &#x3D; 3    * 0: no data; 1:seq like; 2:use in.BV; 3: out.BV ## 此步骤先设为 3</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         clock &#x3D; 3    * 1: global clock; 2: independent rates; 3: correlated rates</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       RootAge &#x3D; &lt;1.0  * safe constraint on root age, used if no fossil for root.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         model &#x3D; 0    * 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         alpha &#x3D; 0    * alpha for gamma rates at sites</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         ncatG &#x3D; 5    * No. categories in discrete gamma</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     cleandata &#x3D; 0    * remove sites with ambiguity data (1:yes, 0:no)?</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       BDparas &#x3D; 1 1 0    * birth, death, sampling</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   kappa_gamma &#x3D; 6 2      * gamma prior for kappa</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   alpha_gamma &#x3D; 1 1      * gamma prior for alpha</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   rgene_gamma &#x3D; 2 2   * gamma prior for overall rates for genes</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  sigma2_gamma &#x3D; 1 10    * gamma prior for sigma^2     (for clock&#x3D;2 or 3)</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      finetune &#x3D; 1: 0.1  0.1  0.1  0.01 .5  * auto (0 or 1) : times, musigma2, rates, mixing, paras, FossilErr</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         print &#x3D; 1</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        burnin &#x3D; 20000</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      sampfreq &#x3D; 2</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       nsample &#x3D; 100000</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>*** Note: Make your window wider (100 columns) before running the program.</pre></td></tr></table></figure><p>之后运行</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mcmctree mcmctree.ctl</pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1vdXQtcDE4ZG9ocGR6OWFodHAwOGFpNTdibzFlODkwY3RtMGE4eTFhdHR4LkJW\">运行结果产生一个文件名为 out.BV</span>，我们拷贝到两次分化时间估计的目录里，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1pbi0xNTJkMjM0Zi5CVg==\">并用 in.BV</span> 作为新的命名</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cp out.BV ..&#x2F;02.Time&#x2F;rep1&#x2F;in.BV</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cp out.BV ..&#x2F;02.Time&#x2F;rep2&#x2F;in.BV</pre></td></tr></table></figure><p>之后在运行两次重复<br>\n首先修改配置文件</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>seed &#x3D; -1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       seqfile &#x3D; all.fa</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      treefile &#x3D; all.tre</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       outfile &#x3D; out</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         ndata &#x3D; 1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       seqtype &#x3D; 2  * 0: nucleotides; 1:codons; 2:AAs</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       usedata &#x3D; 2    * 0: no data; 1:seq like; 2:use in.BV; 3: out.BV</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         clock &#x3D; 3    * 1: global clock; 2: independent rates; 3: correlated rates</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       RootAge &#x3D; &lt;1.0  * safe constraint on root age, used if no fossil for root.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         model &#x3D; 0    * 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         alpha &#x3D; 0    * alpha for gamma rates at sites</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         ncatG &#x3D; 5    * No. categories in discrete gamma</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     cleandata &#x3D; 0    * remove sites with ambiguity data (1:yes, 0:no)?</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       BDparas &#x3D; 1 1 0    * birth, death, sampling</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   kappa_gamma &#x3D; 6 2      * gamma prior for kappa</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   alpha_gamma &#x3D; 1 1      * gamma prior for alpha</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   rgene_gamma &#x3D; 2 2   * gamma prior for overall rates for genes</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  sigma2_gamma &#x3D; 1 10    * gamma prior for sigma^2     (for clock&#x3D;2 or 3)</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      finetune &#x3D; 1: 0.1  0.1  0.1  0.01 .5  * auto (0 or 1) : times, musigma2, rates, mixing, paras, FossilErr</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         print &#x3D; 1</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        burnin &#x3D; 800000</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      sampfreq &#x3D; 40</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       nsample &#x3D; 6500000</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>*** Note: Make your window wider (100 columns) before running the program.</pre></td></tr></table></figure><p>最后我们会得到如下文件</p>\n<figure class=\"highlight raw\"><figcaption data-lang><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>all.fa  all.phy  all.tre  FigTree.tre  in.BV  mcmctree.ctl  mcmc.txt  out  SeedUsed</pre></td></tr></table></figure><p>检查两次结果的 FigTree.tre 文件，如果相差不大就可以使用<br>\n<img data-src=\"/img/posts/2022.12.8/3.png\" alt=\"分化时间\"></p>\n<p>之后可以进行基因家族的收缩与扩张分析了，这部分之后在写</p>\n",
            "tags": [
                "生信学习",
                "基因组",
                "bioinformatics",
                "Comparative_Genomics"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/",
            "url": "https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/",
            "title": "RNAseq教程(5)",
            "date_published": "2021-01-12T10:38:45.000Z",
            "content_html": "<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<p><strong>1.Module 1 - Introduction to RNA sequencing</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/17/2020-11-17-RNAseq(1)/\">Installation</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/28/2020-11-28-RNAseq(2)/\">Reference Genomes</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/01/2020-12-01-RNAseq(3)/\">Annotations</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/03/2020-12-03-RNAseq(4)/\">Indexing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/05/2020-12-05-RNAseq(5)/\">RNA-seq Data</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/08/2020-12-08-RNAseq(6)/\">Pre-Alignment QC</a></li>\n</ol>\n<p><strong>2.Module 2 - RNA-seq Alignment and Visualization</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/\">Adapter Trim</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/\">Alignment</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/\">IGV</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/\">Alignment Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/\">Alignment QC</a></li>\n</ol>\n<p><strong>3.Module 3 - Expression and Differential Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/\">Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/\">Differential Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/\">DE Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/\">Kallisto for Reference-Free Abundance Estimation</a></li>\n</ol>\n<p><strong>4.Module 4 - Isoform Discovery and Alternative Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/\">Reference Guided Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/\">de novo Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/05/2020-01-05-RNAseq(18)/\">Transcript Assembly Merge</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/\">Differential Splicing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/\">Splicing Visualization</a></li>\n</ol>\n<p><strong>5.Module 5 - De novo transcript reconstruction</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/\">De novo RNA-Seq Assembly and Analysis Using Trinity</a></li>\n</ol>\n<p><strong>6.Module 6 - Functional Annotation of Transcripts</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/14/2021-01-14RNAseq(22)/\">Functional Annotation of Assembled Transcripts Using Trinotate</a></li>\n</ol>\n<h2 id=\"5-de-novo-rna-seq-assembly-and-analysis-using-trinity\"><a class=\"anchor\" href=\"#5-de-novo-rna-seq-assembly-and-analysis-using-trinity\">#</a> 5. De novo RNA-Seq Assembly and Analysis Using Trinity</h2>\n<p>任务</p>\n<ul>\n<li>\n<p>Generating a Trinity de novo RNA-Seq assembly</p>\n</li>\n<li>\n<p>Evaluating the quality of the assembly</p>\n</li>\n<li>\n<p>Quantifying transcript expression levels</p>\n</li>\n<li>\n<p>Identifying differentially expressed (DE) transcripts</p>\n</li>\n<li>\n<p>Functionally annotating transcripts using Trinotate and predicting coding regions using TransDecoder</p>\n</li>\n<li>\n<p>Examining functional enrichments for DE transcripts using GOseq</p>\n</li>\n<li>\n<p>Interactively Exploring annotations and expression data via TrinotateWeb</p>\n</li>\n</ul>\n<h3 id=\"数据内容\"><a class=\"anchor\" href=\"#数据内容\">#</a> 数据内容</h3>\n<p>在本课程中，将使用本文的数据：通过 RNA-Seq 定义光滑念珠菌的转录组特征 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5uY2JpLm5sbS5uaWguZ292L3B1Ym1lZC8/dGVybT0yNTU4NjIyMQ==\">Linde et al. Nucleic Acids Res. 2015</span> WT 以及 GSNO 的数据。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vi SRR_Acc_List.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SRR1582646</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SRR1582647</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SRR1582648</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SRR1582649</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>SRR1582650</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SRR1582651</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>prefetch --option-file Seqs&#x2F;SRR_ACC_Lists.txt .&#x2F;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>vi sh.sh</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cat SRR_Acc_List.txt |while read i</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>do</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>fastq-dump --defline-seq &#39;@$sn[_$rn]&#x2F;$ri&#39; --split-files -A $i $&#123;i&#125;&#x2F;$&#123;i&#125;.sra</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>done</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>sh sh.sh</pre></td></tr></table></figure><p>下载结束后给所有文件重命名</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GSNO_SRR1582646_1.fastq</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>GSNO_SRR1582646_2.fastq</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>GSNO_SRR1582647_1.fastq</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>GSNO_SRR1582647_2.fastq</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>GSNO_SRR1582648_1.fastq</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>GSNO_SRR1582648_2.fastq</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>wt_SRR1582649_1.fastq</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>wt_SRR1582649_2.fastq</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>wt_SRR1582650_1.fastq</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>wt_SRR1582650_2.fastq</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>wt_SRR1582651_1.fastq</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>wt_SRR1582651_2.fastq</pre></td></tr></table></figure>",
            "tags": [
                "生信学习",
                "bioinformatics",
                "RNAseq"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/",
            "url": "https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/",
            "title": "RNAseq教程(4.5)",
            "date_published": "2021-01-09T10:38:45.000Z",
            "content_html": "<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<p><strong>1.Module 1 - Introduction to RNA sequencing</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/17/2020-11-17-RNAseq(1)/\">Installation</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/28/2020-11-28-RNAseq(2)/\">Reference Genomes</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/01/2020-12-01-RNAseq(3)/\">Annotations</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/03/2020-12-03-RNAseq(4)/\">Indexing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/05/2020-12-05-RNAseq(5)/\">RNA-seq Data</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/08/2020-12-08-RNAseq(6)/\">Pre-Alignment QC</a></li>\n</ol>\n<p><strong>2.Module 2 - RNA-seq Alignment and Visualization</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/\">Adapter Trim</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/\">Alignment</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/\">IGV</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/\">Alignment Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/\">Alignment QC</a></li>\n</ol>\n<p><strong>3.Module 3 - Expression and Differential Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/\">Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/\">Differential Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/\">DE Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/\">Kallisto for Reference-Free Abundance Estimation</a></li>\n</ol>\n<p><strong>4.Module 4 - Isoform Discovery and Alternative Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/\">Reference Guided Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/\">de novo Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/05/2020-01-05-RNAseq(18)/\">Transcript Assembly Merge</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/\">Differential Splicing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/\">Splicing Visualization</a></li>\n</ol>\n<p><strong>5.Module 5 - De novo transcript reconstruction</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/\">De novo RNA-Seq Assembly and Analysis Using Trinity</a></li>\n</ol>\n<p><strong>6.Module 6 - Functional Annotation of Transcripts</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/14/2021-01-14RNAseq(22)/\">Functional Annotation of Assembled Transcripts Using Trinotate</a></li>\n</ol>\n<h2 id=\"45-transcript-assembly-visualization-splicing-visualization\"><a class=\"anchor\" href=\"#45-transcript-assembly-visualization-splicing-visualization\">#</a> 4.5 Transcript Assembly Visualization (Splicing Visualization)</h2>\n<h3 id=\"visualizing-results-at-the-command-line\"><a class=\"anchor\" href=\"#visualizing-results-at-the-command-line\">#</a> Visualizing Results at the Command Line</h3>\n<p>从 “de_novo” 模式查看合并后的 GTF 文件。请记住，这个合并的 GTF 文件结合了 UHR 和 HBR (每个单独的 GTF 也在前面生成)。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd denovo</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>head stringtie_merged.gtf</pre></td></tr></table></figure><p>有关该文件格式的细节，请查阅以下链接</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jY2Iuamh1LmVkdS9zb2Z0d2FyZS9zdHJpbmd0aWUvZ2ZmLnNodG1sI2dmZmNvbXBhcmU=\">https://ccb.jhu.edu/software/stringtie/gff.shtml#gffcompare</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NvbGUtdHJhcG5lbGwtbGFiLmdpdGh1Yi5pby9jdWZmbGlua3MvY3VmZm1lcmdlL2luZGV4Lmh0bWw=\">http://cole-trapnell-lab.github.io/cufflinks/cuffmerge/index.html</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NvbGUtdHJhcG5lbGwtbGFiLmdpdGh1Yi5pby9jdWZmbGlua3MvY3VmZmNvbXBhcmUvaW5kZXguaHRtbCN0cmFuc2ZyYWctY2xhc3MtY29kZXM=\">http://cole-trapnell-lab.github.io/cufflinks/cuffcompare/index.html#transfrag-class-codes</span></li>\n</ul>\n<p>在 “de_novo” 结果中，有多少基因至少有一个由 StringTie 组装的转录本？</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat stringtie_merged.gtf | perl -ne &#39;if ($_ &#x3D;~ &#x2F;gene_id\\s+\\&quot;(\\S+)\\&quot;\\;&#x2F;)&#123;print &quot;$1\\n&quot;&#125;&#39; | sort | uniq | wc -l</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>565</pre></td></tr></table></figure><p>有多少基因至少组装了一个潜在的新转录本？</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>head gffcompare.stringtie_merged.gtf.tmap</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>grep &quot;j&quot; gffcompare.stringtie_merged.gtf.tmap</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>grep &quot;j&quot; gffcompare.stringtie_merged.gtf.tmap | cut -f 1 | sort | uniq | wc -l</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>174</pre></td></tr></table></figure><p>显示具有最高阅读支持度的基因间区域 (候选新转录区域) 的转录本</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd denovo</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>grep -w &quot;u&quot; gffcompare.stringtie_merged.gtf.tmap | sort -n -k 10 | column -t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-  -  u  MSTRG.481  MSTRG.481.1  3  0.000000  0.000000  0.000000  260  MSTRG.481.1  -</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-  -  u  MSTRG.482  MSTRG.482.1  2  0.000000  0.000000  0.000000  267  MSTRG.482.1  -</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-  -  u  MSTRG.54   MSTRG.54.1   2  0.000000  0.000000  0.000000  279  MSTRG.54.1   -</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-  -  u  MSTRG.434  MSTRG.434.1  3  0.000000  0.000000  0.000000  281  MSTRG.434.1  -</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-  -  u  MSTRG.484  MSTRG.484.1  2  0.000000  0.000000  0.000000  319  MSTRG.484.1  -</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-  -  u  MSTRG.3    MSTRG.3.1    2  0.000000  0.000000  0.000000  320  MSTRG.3.1    -</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-  -  u  MSTRG.200  MSTRG.200.1  2  0.000000  0.000000  0.000000  344  MSTRG.200.1  -</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-  -  u  MSTRG.391  MSTRG.391.1  2  0.000000  0.000000  0.000000  346  MSTRG.391.1  -</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>-  -  u  MSTRG.2    MSTRG.2.1    2  0.000000  0.000000  0.000000  400  MSTRG.2.1    -</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>-  -  u  MSTRG.94   MSTRG.94.1   3  0.000000  0.000000  0.000000  424  MSTRG.94.1   -</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>-  -  u  MSTRG.410  MSTRG.410.1  2  0.000000  0.000000  0.000000  939  MSTRG.410.1  -</pre></td></tr></table></figure><h2 id=\"使用regtools来注释所有的可变剪切\"><a class=\"anchor\" href=\"#使用regtools来注释所有的可变剪切\">#</a> 使用 RegTools 来注释所有的可变剪切</h2>\n<p>RegTools 用于帮助描述单个外显子剪接事件，并帮助识别对基因表达或剪接模式有直接影响的新剪接事件。更多细节请参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWd0b29scy5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3Qv\"> RegTools</span> 手册。</p>\n<p>使用 RegTools 的基本功能来提取可变剪切。每个 bam 的 bed 文件，它总结了 RNA-seq 数据中所表示的所有不同的外显子 - 外显子剪接事件。我们还将使用 RegTools 对这些连接进行注释，以参考我们的 GTF 转录组文件:</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd align</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>regtools junctions extract -s 0 HBR.bam -o HBR.junctions.bed</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>head HBR.junctions.bed</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>regtools junctions annotate HBR.junctions.bed  ..&#x2F;chr22_with_ERCC92.fa ..&#x2F;chr22_with_ERCC92.gtf &gt; HBR.junctions.anno.bed</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>head HBR.junctions.anno.bed</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>regtools junctions extract -s 0 UHR.bam -o UHR.junctions.bed</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>head UHR.junctions.bed</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>regtools junctions annotate UHR.junctions.bed  ..&#x2F;chr22_with_ERCC92.fa ..&#x2F;chr22_with_ERCC92.gtf &gt; UHR.junctions.anno.bed</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>head UHR.junctions.anno.bed</pre></td></tr></table></figure><p>现在从样本中找出任何可能涉及新外显子跳跃、受体位点使用或供体位点使用的连接 (相对于参考转录组 GTF)。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>grep -P -w &quot;NDA|A|D&quot; HBR.junctions.anno.bed | perl -ne &#39;chomp; @l&#x3D;split(&quot;\\t&quot;,$_); if ($l[4] &gt; 3)&#123;print &quot;$_\\n&quot;&#125;&#39;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>grep -P -w &quot;NDA|A|D&quot; UHR.junctions.anno.bed | perl -ne &#39;chomp; @l&#x3D;split(&quot;\\t&quot;,$_); if ($l[4] &gt; 3)&#123;print &quot;$_\\n&quot;&#125;&#39;</pre></td></tr></table></figure><h2 id=\"转换成gtf文件查看\"><a class=\"anchor\" href=\"#转换成gtf文件查看\">#</a> 转换成 GTF 文件查看</h2>\n<p>为了更容易比较仅 ref-only, ref-guided, de novo 的结果的输出，我们现在将生成合并后的 GTF 文件的过滤版本，我们将删除转录本，除非有证据表明它们的表达。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>wget https:&#x2F;&#x2F;github.com&#x2F;griffithlab&#x2F;rnaseq_tutorial&#x2F;blob&#x2F;master&#x2F;scripts&#x2F;stringtie_filter_gtf.pl</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>perl stringtie_filter_gtf.pl --expression_metric&#x3D;FPKM --result_dirs&#x3D;&#39;HBR_Rep1,HBR_Rep2,HBR_Rep3,UHR_Rep1,UHR_Rep2,UHR_Rep3&#39; --input_gtf_file&#x3D;&#39;..&#x2F;chr22_with_ERCC92.gtf&#39; --filtered_gtf_file&#x3D;&#39;chr22_with_ERCC92.filtered.gtf&#39; --exp_cutoff&#x3D;0 --min_sample_count&#x3D;2</pre></td></tr></table></figure>",
            "tags": [
                "生信学习",
                "bioinformatics",
                "RNAseq"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/",
            "url": "https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/",
            "title": "RNAseq教程(4.4)",
            "date_published": "2021-01-07T10:38:45.000Z",
            "content_html": "<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<p><strong>1.Module 1 - Introduction to RNA sequencing</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/17/2020-11-17-RNAseq(1)/\">Installation</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/28/2020-11-28-RNAseq(2)/\">Reference Genomes</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/01/2020-12-01-RNAseq(3)/\">Annotations</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/03/2020-12-03-RNAseq(4)/\">Indexing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/05/2020-12-05-RNAseq(5)/\">RNA-seq Data</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/08/2020-12-08-RNAseq(6)/\">Pre-Alignment QC</a></li>\n</ol>\n<p><strong>2.Module 2 - RNA-seq Alignment and Visualization</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/\">Adapter Trim</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/\">Alignment</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/\">IGV</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/\">Alignment Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/\">Alignment QC</a></li>\n</ol>\n<p><strong>3.Module 3 - Expression and Differential Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/\">Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/\">Differential Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/\">DE Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/\">Kallisto for Reference-Free Abundance Estimation</a></li>\n</ol>\n<p><strong>4.Module 4 - Isoform Discovery and Alternative Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/\">Reference Guided Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/\">de novo Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/05/2020-01-05-RNAseq(18)/\">Transcript Assembly Merge</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/\">Differential Splicing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/\">Splicing Visualization</a></li>\n</ol>\n<p><strong>5.Module 5 - De novo transcript reconstruction</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/\">De novo RNA-Seq Assembly and Analysis Using Trinity</a></li>\n</ol>\n<p><strong>6.Module 6 - Functional Annotation of Transcripts</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/14/2021-01-14RNAseq(22)/\">Functional Annotation of Assembled Transcripts Using Trinotate</a></li>\n</ol>\n<h2 id=\"44-differential-expression-splicing\"><a class=\"anchor\" href=\"#44-differential-expression-splicing\">#</a> 4.4 Differential (Expression) Splicing</h2>\n<p>Use Ballgown and Stringtie to compare the UHR and HBR conditions against reference guided and de novo transcript assemblies.</p>\n<p>参考 Stringtie 手册获得更详细的解释:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jY2Iuamh1LmVkdS9zb2Z0d2FyZS9zdHJpbmd0aWUvaW5kZXguc2h0bWw/dD1tYW51YWw=\">https://ccb.jhu.edu/software/stringtie/index.shtml?t=manual</span></p>\n<p>Ballgown 的 github 页面也有 Ballgown 的说明文档:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FseXNzYWZyYXplZS9iYWxsZ293bg==\">https://github.com/alyssafrazee/ballgown</span></p>\n<p>计算已知 / 新 (参考引导模式) 转录本的 UHR 和 HBR 表达估计数</p>\n<p>使用参考引导的合并 GTF 和 Ballgown 的输出表重新运行 Stringtie。将结果存储在一个新目录中，这样我们仍然可以检查在没有合并 GTF 的情况下生成的结果。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>r ref_guided_merged</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cd ref_guided_merged</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>stringtie -p 8 -G ..&#x2F;ref_guided&#x2F;stringtie_merged.gtf -e -B -o HBR_Rep1&#x2F;transcripts.gtf $RNA_ALIGN_DIR&#x2F;HBR_Rep1.bam</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>stringtie -p 8 -G ..&#x2F;ref_guided&#x2F;stringtie_merged.gtf -e -B -o HBR_Rep2&#x2F;transcripts.gtf $RNA_ALIGN_DIR&#x2F;HBR_Rep2.bam</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>stringtie -p 8 -G ..&#x2F;ref_guided&#x2F;stringtie_merged.gtf -e -B -o HBR_Rep3&#x2F;transcripts.gtf $RNA_ALIGN_DIR&#x2F;HBR_Rep3.bam</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>stringtie -p 8 -G ..&#x2F;ref_guided&#x2F;stringtie_merged.gtf -e -B -o UHR_Rep1&#x2F;transcripts.gtf $RNA_ALIGN_DIR&#x2F;UHR_Rep1.bam</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>stringtie -p 8 -G ..&#x2F;ref_guided&#x2F;stringtie_merged.gtf -e -B -o UHR_Rep2&#x2F;transcripts.gtf $RNA_ALIGN_DIR&#x2F;UHR_Rep2.bam</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>stringtie -p 8 -G ..&#x2F;ref_guided&#x2F;stringtie_merged.gtf -e -B -o UHR_Rep3&#x2F;transcripts.gtf $RNA_ALIGN_DIR&#x2F;UHR_Rep3.bam</pre></td></tr></table></figure><p>运行 Ballgown 使用参考指导，合并转录</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mkdir -p ref_guided_merged&#x2F;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cd ref_guided_merged&#x2F;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>printf &quot;\\&quot;ids\\&quot;,\\&quot;type\\&quot;,\\&quot;path\\&quot;\\n\\&quot;UHR_Rep1\\&quot;,\\&quot;UHR\\&quot;,\\&quot;$RNA_HOME&#x2F;expression&#x2F;stringtie&#x2F;ref_guided_merged&#x2F;UHR_Rep1\\&quot;\\n\\&quot;UHR_Rep2\\&quot;,\\&quot;UHR\\&quot;,\\&quot;$RNA_HOME&#x2F;expression&#x2F;stringtie&#x2F;ref_guided_merged&#x2F;UHR_Rep2\\&quot;\\n\\&quot;UHR_Rep3\\&quot;,\\&quot;UHR\\&quot;,\\&quot;$RNA_HOME&#x2F;expression&#x2F;stringtie&#x2F;ref_guided_merged&#x2F;UHR_Rep3\\&quot;\\n\\&quot;HBR_Rep1\\&quot;,\\&quot;HBR\\&quot;,\\&quot;$RNA_HOME&#x2F;expression&#x2F;stringtie&#x2F;ref_guided_merged&#x2F;HBR_Rep1\\&quot;\\n\\&quot;HBR_Rep2\\&quot;,\\&quot;HBR\\&quot;,\\&quot;$RNA_HOME&#x2F;expression&#x2F;stringtie&#x2F;ref_guided_merged&#x2F;HBR_Rep2\\&quot;\\n\\&quot;HBR_Rep3\\&quot;,\\&quot;HBR\\&quot;,\\&quot;$RNA_HOME&#x2F;expression&#x2F;stringtie&#x2F;ref_guided_merged&#x2F;HBR_Rep3\\&quot;\\n&quot; &gt; UHR_vs_HBR.csv</pre></td></tr></table></figure><p>请参阅 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dyaWZmaXRobGFiL3JuYXNlcV90dXRvcmlhbC93aWtpL0RpZmZlcmVudGlhbC1FeHByZXNzaW9u\">Differential Expression</span> 关于运行 Ballgown 确定 DE 基因 / 转录单的详细信息。</p>\n<p>计算已知 / 新的 (从头开始模式) 转录本的 UHR 和 HBR 表达估计:</p>\n<p>使用新生合并的 GTF 重新运行 Stringtie，并为 Ballgown 输出表。将结果存储在一个新目录中，这样我们仍然可以检查在没有合并 GTF 的情况下生成的结果。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mkdir de_novo_merged</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cd de_novo_merged</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>stringtie -p 8 -G ..&#x2F;de_novo&#x2F;stringtie_merged.gtf -e -B -o HBR_Rep1&#x2F;transcripts.gtf $RNA_ALIGN_DIR&#x2F;HBR_Rep1.bam</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>stringtie -p 8 -G ..&#x2F;de_novo&#x2F;stringtie_merged.gtf -e -B -o HBR_Rep2&#x2F;transcripts.gtf $RNA_ALIGN_DIR&#x2F;HBR_Rep2.bam</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>stringtie -p 8 -G ..&#x2F;de_novo&#x2F;stringtie_merged.gtf -e -B -o HBR_Rep3&#x2F;transcripts.gtf $RNA_ALIGN_DIR&#x2F;HBR_Rep3.bam</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>stringtie -p 8 -G ..&#x2F;de_novo&#x2F;stringtie_merged.gtf -e -B -o UHR_Rep1&#x2F;transcripts.gtf $RNA_ALIGN_DIR&#x2F;UHR_Rep1.bam</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>stringtie -p 8 -G ..&#x2F;de_novo&#x2F;stringtie_merged.gtf -e -B -o UHR_Rep2&#x2F;transcripts.gtf $RNA_ALIGN_DIR&#x2F;UHR_Rep2.bam</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>stringtie -p 8 -G ..&#x2F;de_novo&#x2F;stringtie_merged.gtf -e -B -o UHR_Rep3&#x2F;transcripts.gtf $RNA_ALIGN_DIR&#x2F;UHR_Rep3.bam</pre></td></tr></table></figure><p>运行 Ballgown，使用重新合并的转录本</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>printf &quot;\\&quot;ids\\&quot;,\\&quot;type\\&quot;,\\&quot;path\\&quot;\\n\\&quot;UHR_Rep1\\&quot;,\\&quot;UHR\\&quot;,\\&quot;$RNA_HOME&#x2F;expression&#x2F;stringtie&#x2F;de_novo_merged&#x2F;UHR_Rep1\\&quot;\\n\\&quot;UHR_Rep2\\&quot;,\\&quot;UHR\\&quot;,\\&quot;$RNA_HOME&#x2F;expression&#x2F;stringtie&#x2F;de_novo_merged&#x2F;UHR_Rep2\\&quot;\\n\\&quot;UHR_Rep3\\&quot;,\\&quot;UHR\\&quot;,\\&quot;$RNA_HOME&#x2F;expression&#x2F;stringtie&#x2F;de_novo_merged&#x2F;UHR_Rep3\\&quot;\\n\\&quot;HBR_Rep1\\&quot;,\\&quot;HBR\\&quot;,\\&quot;$RNA_HOME&#x2F;expression&#x2F;stringtie&#x2F;de_novo_merged&#x2F;HBR_Rep1\\&quot;\\n\\&quot;HBR_Rep2\\&quot;,\\&quot;HBR\\&quot;,\\&quot;$RNA_HOME&#x2F;expression&#x2F;stringtie&#x2F;de_novo_merged&#x2F;HBR_Rep2\\&quot;\\n\\&quot;HBR_Rep3\\&quot;,\\&quot;HBR\\&quot;,\\&quot;$RNA_HOME&#x2F;expression&#x2F;stringtie&#x2F;de_novo_merged&#x2F;HBR_Rep3\\&quot;\\n&quot; &gt; UHR_vs_HBR.csv</pre></td></tr></table></figure>",
            "tags": [
                "生信学习",
                "bioinformatics",
                "RNAseq"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2021/01/05/2021-01-05-RNAseq(18)/",
            "url": "https://www.zhouxiaozhao.cn/2021/01/05/2021-01-05-RNAseq(18)/",
            "title": "RNAseq教程(4.3)",
            "date_published": "2021-01-05T10:38:45.000Z",
            "content_html": "<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<p><strong>1.Module 1 - Introduction to RNA sequencing</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/17/2020-11-17-RNAseq(1)/\">Installation</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/28/2020-11-28-RNAseq(2)/\">Reference Genomes</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/01/2020-12-01-RNAseq(3)/\">Annotations</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/03/2020-12-03-RNAseq(4)/\">Indexing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/05/2020-12-05-RNAseq(5)/\">RNA-seq Data</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/08/2020-12-08-RNAseq(6)/\">Pre-Alignment QC</a></li>\n</ol>\n<p><strong>2.Module 2 - RNA-seq Alignment and Visualization</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/\">Adapter Trim</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/\">Alignment</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/\">IGV</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/\">Alignment Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/\">Alignment QC</a></li>\n</ol>\n<p><strong>3.Module 3 - Expression and Differential Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/\">Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/\">Differential Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/\">DE Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/\">Kallisto for Reference-Free Abundance Estimation</a></li>\n</ol>\n<p><strong>4.Module 4 - Isoform Discovery and Alternative Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/\">Reference Guided Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/\">de novo Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/05/2020-01-05-RNAseq(18)/\">Transcript Assembly Merge</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/\">Differential Splicing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/\">Splicing Visualization</a></li>\n</ol>\n<p><strong>5.Module 5 - De novo transcript reconstruction</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/\">De novo RNA-Seq Assembly and Analysis Using Trinity</a></li>\n</ol>\n<p><strong>6.Module 6 - Functional Annotation of Transcripts</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/14/2021-01-14RNAseq(22)/\">Functional Annotation of Assembled Transcripts Using Trinotate</a></li>\n</ol>\n<h2 id=\"43-stringle-merge\"><a class=\"anchor\" href=\"#43-stringle-merge\">#</a> 4.3 Stringle Merge</h2>\n<p>使用 Stringtie 将所有库中的预测转录本合并成一个统一的转录组。参考 Stringtie 手册获得更详细的解释：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jY2Iuamh1LmVkdS9zb2Z0d2FyZS9zdHJpbmd0aWUvaW5kZXguc2h0bWw/dD1tYW51YWw=\">https://ccb.jhu.edu/software/stringtie/index.shtml?t=manual</span></p>\n<p>Options specified below:</p>\n<ul>\n<li>\n<p>&quot;assembly_GTF_list.txt&quot; is a text file &quot;manifest&quot; with a list (one  per line) of GTF files that you would like to merge together into a  single GTF file.</p>\n</li>\n<li>\n<p>'-p 8' tells stringtie to use eight CPUs</p>\n</li>\n<li>\n<p>'-o' tells stringtie to write output to a particular file or directory</p>\n</li>\n<li>\n<p>'-G' tells stringtie where to find reference gene annotations. It  will use these annotations to gracefully merge novel isoforms (for de  novo runs) and known isoforms and maximize overall assembly quality.</p>\n</li>\n</ul>\n<p>合并所有 6 个 Stringtie 结果：</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ls -1 *Rep*&#x2F;transcripts.gtf &gt; assembly_GTF_list.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cat assembly_GTF_list.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>stringtie --merge -p 8 -o stringtie_merged.gtf -G $RNA_REF_GTF assembly_GTF_list.txt</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>stringtie --merge -p 8 -o stringtie_merged.gtf -G ..&#x2F;chr22_with_ERCC92.gtf assembly_GTF_list.txt</pre></td></tr></table></figure><p>结果的转录本是什么样子的？</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>awk &#39;&#123;if($3&#x3D;&#x3D;&quot;transcript&quot;) print&#125;&#39; stringtie_merged.gtf | cut -f 1,4,9 | less</pre></td></tr></table></figure><p>将参考引导的转录本与已知的注释进行比较。这使我们能够评估组装 RNA-seq 数据的转录预测的质量。更多细节，请参考 Stringtie GFF 和 Cuffcompare 手册。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gffcompare -r ..&#x2F;chr22_with_ERCC92.gtf -o gffcompare stringtie_merged.gtf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cat gffcompare.stats</pre></td></tr></table></figure><p>将合并的注释与已知的注释进行比较后，它是什么样子的？与一般的 gtf 有什么不同？</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>awk &#39;&#123;if($3&#x3D;&#x3D;&quot;transcript&quot;) print&#125;&#39; gffcompare.annotated.gtf | cut -f 1,4,9 | less</pre></td></tr></table></figure><p>对于 de novo 模式:</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ls -1 *Rep*&#x2F;transcripts.gtf &gt; assembly_GTF_list.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cat assembly_GTF_list.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>stringtie --merge -p 8 -o stringtie_merged.gtf assembly_GTF_list.txt</pre></td></tr></table></figure><p>将重新合并的转录本与已知的注释进行比较:</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gffcompare -r ..&#x2F;chr22_with_ERCC92.gtf -o gffcompare stringtie_merged.gtf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cat gffcompare.stats</pre></td></tr></table></figure>",
            "tags": [
                "生信学习",
                "bioinformatics",
                "RNAseq"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/",
            "url": "https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/",
            "title": "RNAseq教程(4.2)",
            "date_published": "2021-01-02T10:38:45.000Z",
            "content_html": "<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<p><strong>1.Module 1 - Introduction to RNA sequencing</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/17/2020-11-17-RNAseq(1)/\">Installation</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/28/2020-11-28-RNAseq(2)/\">Reference Genomes</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/01/2020-12-01-RNAseq(3)/\">Annotations</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/03/2020-12-03-RNAseq(4)/\">Indexing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/05/2020-12-05-RNAseq(5)/\">RNA-seq Data</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/08/2020-12-08-RNAseq(6)/\">Pre-Alignment QC</a></li>\n</ol>\n<p><strong>2.Module 2 - RNA-seq Alignment and Visualization</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/\">Adapter Trim</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/\">Alignment</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/\">IGV</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/\">Alignment Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/\">Alignment QC</a></li>\n</ol>\n<p><strong>3.Module 3 - Expression and Differential Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/\">Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/\">Differential Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/\">DE Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/\">Kallisto for Reference-Free Abundance Estimation</a></li>\n</ol>\n<p><strong>4.Module 4 - Isoform Discovery and Alternative Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/\">Reference Guided Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/\">de novo Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/05/2020-01-05-RNAseq(18)/\">Transcript Assembly Merge</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/\">Differential Splicing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/\">Splicing Visualization</a></li>\n</ol>\n<p><strong>5.Module 5 - De novo transcript reconstruction</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/\">De novo RNA-Seq Assembly and Analysis Using Trinity</a></li>\n</ol>\n<p><strong>6.Module 6 - Functional Annotation of Transcripts</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/14/2021-01-14RNAseq(22)/\">Functional Annotation of Assembled Transcripts Using Trinotate</a></li>\n</ol>\n<h2 id=\"42-stringtie-de-novo-mode\"><a class=\"anchor\" href=\"#42-stringtie-de-novo-mode\">#</a> 4.2 Stringtie De Novo Mode</h2>\n<p>在上一个模块中，使用 Stringtie 的 '-G' 和 '-e' 选项在 'reference only' 模式下运行 Stringtie</p>\n<p>本次教程将运行 Stringle 的 de novo 模式</p>\n<p>额外选项如下</p>\n<ul>\n<li>'-p 8' tells Stringtie to use eight CPUs</li>\n<li>'-l' name prefix for output transcripts (default: STRG)</li>\n<li>'-o' output path/file name for the assembled transcripts GTF (default: stdout)</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mkdir denovo</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>stringtie -p 8 -l HBR_Rep1 -o denovo&#x2F;HBR_Rep1&#x2F;transcripts.gtf HBR_Rep1.bam</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>后续处理相同</pre></td></tr></table></figure>",
            "tags": [
                "生信学习",
                "bioinformatics",
                "RNAseq"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/",
            "url": "https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/",
            "title": "RNAseq教程(4.1)",
            "date_published": "2020-12-31T10:38:45.000Z",
            "content_html": "<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<p><strong>1.Module 1 - Introduction to RNA sequencing</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/17/2020-11-17-RNAseq(1)/\">Installation</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/28/2020-11-28-RNAseq(2)/\">Reference Genomes</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/01/2020-12-01-RNAseq(3)/\">Annotations</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/03/2020-12-03-RNAseq(4)/\">Indexing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/05/2020-12-05-RNAseq(5)/\">RNA-seq Data</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/08/2020-12-08-RNAseq(6)/\">Pre-Alignment QC</a></li>\n</ol>\n<p><strong>2.Module 2 - RNA-seq Alignment and Visualization</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/\">Adapter Trim</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/\">Alignment</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/\">IGV</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/\">Alignment Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/\">Alignment QC</a></li>\n</ol>\n<p><strong>3.Module 3 - Expression and Differential Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/\">Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/\">Differential Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/\">DE Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/\">Kallisto for Reference-Free Abundance Estimation</a></li>\n</ol>\n<p><strong>4.Module 4 - Isoform Discovery and Alternative Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/\">Reference Guided Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/\">de novo Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/05/2020-01-05-RNAseq(18)/\">Transcript Assembly Merge</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/\">Differential Splicing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/\">Splicing Visualization</a></li>\n</ol>\n<p><strong>5.Module 5 - De novo transcript reconstruction</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/\">De novo RNA-Seq Assembly and Analysis Using Trinity</a></li>\n</ol>\n<p><strong>6.Module 6 - Functional Annotation of Transcripts</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/14/2021-01-14RNAseq(22)/\">Functional Annotation of Assembled Transcripts Using Trinotate</a></li>\n</ol>\n<h2 id=\"41-reference-guided-transcript-assembly\"><a class=\"anchor\" href=\"#41-reference-guided-transcript-assembly\">#</a> 4.1 Reference Guided Transcript Assembly</h2>\n<p>利用 Stringle 和 Ballgown 发现从头组装的转录本和差异表达</p>\n<p>在上一个模块中，使用 Stringtie 的 '-G' 和 '-e' 选项在 'reference only' 模式下运行 Stringtie。</p>\n<p>在本模块中，我们将以另外两种模式运行 Stringtie:“reference guided” 模式及 (2)“de novo” 模式。在已知转录本的帮助下，Stringtie 可以预测每个文库中存在的转录本。然后，Stringtie 将为每个由数据组装的转录本分配任意的转录本 id，并估计这些转录本的表达。这种方法的一个复杂之处在于，在每个库中，都可能预测出一组不同的转录本。可能有很多相似之处，但是在每个库的输出文件中，转录的数量和它们的确切结构是不同的。因此，在跨库进行比较之前，需要确定哪些转录本在跨库之间相互对应。Stringtie 提供了一个 merge 命令来组合来自不同库的预测文本 GTF 文件。</p>\n<p>一旦有了一个合并的 GTF 文件，就可以用它来运行 Stringtie，而不是我们以前使用的已知的 transcripts GTF 文件。合并的 GTF 被用来重新计算表达估计在准备运行 Ballgown 使用合并新转录本。</p>\n<p>To run Stringtie in 'reference guided' mode: use the '-G' option <strong>WITHOUT</strong> '-e'</p>\n<p>To run Stringtie in 'de novo' mode do <strong>NOT</strong> specify either of the '-G' OR '-e' options.</p>\n<p>参考 Stringtie 手册获得更详细的说明:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jY2Iuamh1LmVkdS9zb2Z0d2FyZS9zdHJpbmd0aWUvaW5kZXguc2h0bWw/dD1tYW51YWw=\">https://ccb.jhu.edu/software/stringtie/index.shtml?t=manual</span></p>\n<h3 id=\"running-stringtie-in-reference-guided-mode\"><a class=\"anchor\" href=\"#running-stringtie-in-reference-guided-mode\">#</a> Running Stringtie in Reference Guided Mode</h3>\n<p>使用我们在前面模块中生成的对齐，现在只使用 '-G' 选项在 reference guided 模式下运行 Stringtie。</p>\n<p>额外选项如下</p>\n<ul>\n<li>'-p 8' tells Stringtie to use eight CPUs</li>\n<li>'-G ' reference annotation to use for guiding the assembly process (GTF/GFF3)</li>\n<li>'-l' name prefix for output transcripts (default: STRG)</li>\n<li>'-o' output path/file name for the assembled transcripts GTF (default: stdout)</li>\n</ul>\n<p>首先，创建一个输出目录，然后以 reference guided 模式运行 stringtie。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mkdir ref_guided</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>stringtie -p 1 -G ..&#x2F;chr22_with_ERCC92.gtf -l HBR_Rep1 -o ref_guided&#x2F;HBR_Rep1&#x2F;transcripts.gtf HBR_Rep1.bam</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>所有做相同处理</pre></td></tr></table></figure>",
            "tags": [
                "生信学习",
                "bioinformatics",
                "RNAseq"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/",
            "url": "https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/",
            "title": "RNAseq教程(3.4)",
            "date_published": "2020-12-29T10:38:45.000Z",
            "content_html": "<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<p><strong>1.Module 1 - Introduction to RNA sequencing</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/17/2020-11-17-RNAseq(1)/\">Installation</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/28/2020-11-28-RNAseq(2)/\">Reference Genomes</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/01/2020-12-01-RNAseq(3)/\">Annotations</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/03/2020-12-03-RNAseq(4)/\">Indexing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/05/2020-12-05-RNAseq(5)/\">RNA-seq Data</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/08/2020-12-08-RNAseq(6)/\">Pre-Alignment QC</a></li>\n</ol>\n<p><strong>2.Module 2 - RNA-seq Alignment and Visualization</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/\">Adapter Trim</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/\">Alignment</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/\">IGV</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/\">Alignment Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/\">Alignment QC</a></li>\n</ol>\n<p><strong>3.Module 3 - Expression and Differential Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/\">Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/\">Differential Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/\">DE Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/\">Kallisto for Reference-Free Abundance Estimation</a></li>\n</ol>\n<p><strong>4.Module 4 - Isoform Discovery and Alternative Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/\">Reference Guided Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/\">de novo Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/05/2020-01-05-RNAseq(18)/\">Transcript Assembly Merge</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/\">Differential Splicing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/\">Splicing Visualization</a></li>\n</ol>\n<p><strong>5.Module 5 - De novo transcript reconstruction</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/\">De novo RNA-Seq Assembly and Analysis Using Trinity</a></li>\n</ol>\n<p><strong>6.Module 6 - Functional Annotation of Transcripts</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/14/2021-01-14RNAseq(22)/\">Functional Annotation of Assembled Transcripts Using Trinotate</a></li>\n</ol>\n<h2 id=\"34-alignment-free-expression-estimation-kallisto\"><a class=\"anchor\" href=\"#34-alignment-free-expression-estimation-kallisto\">#</a> 3.4 Alignment Free Expression Estimation (Kallisto)</h2>\n<h3 id=\"获取转录本的fasta序列\"><a class=\"anchor\" href=\"#获取转录本的fasta序列\">#</a> 获取转录本的 fasta 序列</h3>\n<p>请注意，我们已经在 RNA-seq 教程的前面有了参考基因组序列的 fasta 序列。然而，Kallisto 直接作用于目标 cDNA / 转录本序列。记住，我们有 22 号染色体上基因的转录模型。这些转录模型是以 GTF 格式从 Ensembl 下载的。GTF 包含组成每个转录本的外显子的坐标描述，但不包含转录本序列本身。所以目前我们没有 Kallisto 需要的转录序列。我们有很多地方可以得到这些转录序列。</p>\n<p>为了将 Kallisto 结果与 StringTie 的表达式结果进行比较，我们将创建一个定制的 Fasta 文件，该文件对应于用于 StringTie 分析的文本。我们如何以 Fasta 格式获得这些转录序列？</p>\n<p>我们可以下载完整的人类 fasta 转录本数据库并只提取出 22 号染色体上的基因。或者我们可以使用来自 tophat 的名为 gtf_to_fasta 的工具从我们的 GTF 文件中生成 fasta 序列。这种方法很方便，因为它还包括控制中的 ERCC 峰值序列，允许我们为这些特征生成 Kallisto 丰度估计值。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gtf_to_fasta chr22_with_ERCC92.gtf chr22_with_ERCC92.fa chr22_ERCC92_transcripts.fa</pre></td></tr></table></figure><p>使用 less 查看文件 chr22_ERCC92_transcripts.fa。请注意，该文件有混乱的文字记录名称。使用下面的 hairball perl 一行代码来整理每个 fasta 序列的标题行</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat chr22_ERCC92_transcripts.fa | perl -ne &#39;if ($_ &#x3D;~&#x2F;^\\&gt;\\d+\\s+\\w+\\s+(ERCC\\S+)[\\+\\-]&#x2F;)&#123;print &quot;&gt;$1\\n&quot;&#125; elsif ($_ &#x3D;~ &#x2F;\\d+\\s+(ENST\\d+)&#x2F;)&#123;print &quot;&gt;$1\\n&quot;&#125; else &#123;print $_&#125;&#39; &gt; chr22_ERCC92_transcripts.clean.fa</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>wc -l chr22_ERCC92_transcripts*.fa</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  126025 chr22_ERCC92_transcripts.clean.fa</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  126025 chr22_ERCC92_transcripts.fa</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  252050 总用量</pre></td></tr></table></figure><p>使用 less chr22_ERCC92_transcripts.clean.fa 查看生成的 “clean” 文件。使用 tail 查看文件末尾 chr22_ERCC92_transcripts.clean.fa。请注意，我们对 22 号染色体上的每个集合转录本都有一个 fasta 记录，我们对每个 ERCC spike-in 序列都有一个额外的 fasta 记录。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat chr22_ERCC92_transcripts.clean.fa | grep &quot;&gt;&quot; | perl -ne &#39;$_ &#x3D;~ s&#x2F;\\&gt;&#x2F;&#x2F;; print $_&#39; | sort | uniq &gt; transcript_id_list.txt</pre></td></tr></table></figure><h3 id=\"build-a-kallisto-transcriptome-index\"><a class=\"anchor\" href=\"#build-a-kallisto-transcriptome-index\">#</a> Build a Kallisto transcriptome index</h3>\n<p>请记住，Kallisto 并不进行比对或使用参考基因组序列。相反，它执行伪比对以确定读段与目标 (本例中为转录序列) 的兼容性。然而，与 Tophat 或 STAR 等对齐算法类似，Kallisto 需要一个索引来高效、快速地评估这种兼容性。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kallisto index --index&#x3D;chr22_ERCC92_transcripts_kallisto_index ..&#x2F;chr22_ERCC92_transcripts.clean.fa</pre></td></tr></table></figure><h3 id=\"generate-abundance-estimates-for-all-samples-using-kallisto\"><a class=\"anchor\" href=\"#generate-abundance-estimates-for-all-samples-using-kallisto\">#</a> Generate abundance estimates for all samples using Kallisto</h3>\n<p>正如使用 StringTie 和 HT-Seq 所做的那样，使用 Kallisto 为每个演示样本生成转录本丰度。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kallisto quant --index&#x3D;chr22_ERCC92_transcripts_kallisto_index --output-dir&#x3D;UHR_Rep1_ERCC-Mix1 --threads&#x3D;4 --plaintext UHR_Rep1_ERCC-Mix1_Build37-ErccTranscripts-chr22.read1.fastq.gz UHR_Rep1_ERCC-Mix1_Build37-ErccTranscripts-chr22.read2.fastq.gz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kallisto quant --index&#x3D;chr22_ERCC92_transcripts_kallisto_index --output-dir&#x3D;UHR_Rep2_ERCC-Mix1 --threads&#x3D;4 --plaintext UHR_Rep2_ERCC-Mix1_Build37-ErccTranscripts-chr22.read1.fastq.gz UHR_Rep2_ERCC-Mix1_Build37-ErccTranscripts-chr22.read2.fastq.gz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>kallisto quant --index&#x3D;chr22_ERCC92_transcripts_kallisto_index --output-dir&#x3D;UHR_Rep3_ERCC-Mix1 --threads&#x3D;4 --plaintext UHR_Rep3_ERCC-Mix1_Build37-ErccTranscripts-chr22.read1.fastq.gz UHR_Rep3_ERCC-Mix1_Build37-ErccTranscripts-chr22.read2.fastq.gz</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>kallisto quant --index&#x3D;chr22_ERCC92_transcripts_kallisto_index --output-dir&#x3D;HBR_Rep1_ERCC-Mix2 --threads&#x3D;4 --plaintext HBR_Rep1_ERCC-Mix2_Build37-ErccTranscripts-chr22.read1.fastq.gz HBR_Rep1_ERCC-Mix2_Build37-ErccTranscripts-chr22.read2.fastq.gz</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>kallisto quant --index&#x3D;chr22_ERCC92_transcripts_kallisto_index --output-dir&#x3D;HBR_Rep2_ERCC-Mix2 --threads&#x3D;4 --plaintext HBR_Rep2_ERCC-Mix2_Build37-ErccTranscripts-chr22.read1.fastq.gz HBR_Rep2_ERCC-Mix2_Build37-ErccTranscripts-chr22.read2.fastq.gz</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>kallisto quant --index&#x3D;chr22_ERCC92_transcripts_kallisto_index --output-dir&#x3D;HBR_Rep3_ERCC-Mix2 --threads&#x3D;4 --plaintext HBR_Rep3_ERCC-Mix2_Build37-ErccTranscripts-chr22.read1.fastq.gz HBR_Rep3_ERCC-Mix2_Build37-ErccTranscripts-chr22.read2.fastq.gz</pre></td></tr></table></figure><p>创建一个 TSV 文件，其中包含所有六个样本的 TPM 丰度估计值。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>paste *&#x2F;abundance.tsv | cut -f 1,2,5,10,15,20,25,30 &gt; transcript_tpms_all_samples.tsv</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ls -1 *&#x2F;abundance.tsv | perl -ne &#39;chomp $_; if ($_ &#x3D;~ &#x2F;(\\S+)\\&#x2F;abundance\\.tsv&#x2F;)&#123;print &quot;\\t$1&quot;&#125;&#39; | perl -ne &#39;print &quot;target_id\\tlength$_\\n&quot;&#39; &gt; header.tsv</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cat header.tsv transcript_tpms_all_samples.tsv | grep -v &quot;tpm&quot; &gt; transcript_tpms_all_samples.tsv2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mv transcript_tpms_all_samples.tsv2 transcript_tpms_all_samples.tsv</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>rm -f header.tsv</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>head transcript_tpms_all_samples.tsv</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tail transcript_tpms_all_samples.tsv</pre></td></tr></table></figure>",
            "tags": [
                "生信学习",
                "bioinformatics",
                "RNAseq"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/",
            "url": "https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/",
            "title": "RNAseq教程(3.3)",
            "date_published": "2020-12-26T10:38:45.000Z",
            "content_html": "<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<p><strong>1.Module 1 - Introduction to RNA sequencing</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/17/2020-11-17-RNAseq(1)/\">Installation</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/28/2020-11-28-RNAseq(2)/\">Reference Genomes</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/01/2020-12-01-RNAseq(3)/\">Annotations</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/03/2020-12-03-RNAseq(4)/\">Indexing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/05/2020-12-05-RNAseq(5)/\">RNA-seq Data</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/08/2020-12-08-RNAseq(6)/\">Pre-Alignment QC</a></li>\n</ol>\n<p><strong>2.Module 2 - RNA-seq Alignment and Visualization</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/\">Adapter Trim</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/\">Alignment</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/\">IGV</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/\">Alignment Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/\">Alignment QC</a></li>\n</ol>\n<p><strong>3.Module 3 - Expression and Differential Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/\">Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/\">Differential Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/\">DE Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/\">Kallisto for Reference-Free Abundance Estimation</a></li>\n</ol>\n<p><strong>4.Module 4 - Isoform Discovery and Alternative Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/\">Reference Guided Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/\">de novo Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/05/2020-01-05-RNAseq(18)/\">Transcript Assembly Merge</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/\">Differential Splicing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/\">Splicing Visualization</a></li>\n</ol>\n<p><strong>5.Module 5 - De novo transcript reconstruction</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/\">De novo RNA-Seq Assembly and Analysis Using Trinity</a></li>\n</ol>\n<p><strong>6.Module 6 - Functional Annotation of Transcripts</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/14/2021-01-14RNAseq(22)/\">Functional Annotation of Assembled Transcripts Using Trinotate</a></li>\n</ol>\n<h2 id=\"33-de-visualization\"><a class=\"anchor\" href=\"#33-de-visualization\">#</a> 3.3 DE Visualization</h2>\n<p>在正确的目录（之前的 UHR_vs_HBR.csv），然后启动 R:</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre># Load libraries needed for this analysis</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>library(ballgown)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>library(genefilter)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>library(dplyr)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>library(devtools)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre># Define a path for the output PDF to be written</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>outfile&#x3D;&quot;~&#x2F;workspace&#x2F;rnaseq&#x2F;de&#x2F;ballgown&#x2F;ref_only&#x2F;Tutorial_Part2_ballgown_output.pdf&quot;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre># Load phenotype data</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>pheno_data &#x3D; read.csv(&quot;UHR_vs_HBR.csv&quot;)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre># Display the phenotype data</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>pheno_data</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre># Load the ballgown object from file</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>load(&#39;bg.rda&#39;)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre># The load command, loads an R object from a file into memory in our R session.</pre></td></tr><tr><td data-num=\"20\"></td><td><pre># You can use ls() to view the names of variables that have been loaded</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>ls()</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre># Print a summary of the ballgown object</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>bg</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre># Open a PDF file where we will save some plots. We will save all figures and then view the PDF at the end</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>pdf(file&#x3D;outfile)</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre># Extract FPKM values from the &#39;bg&#39; object</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>fpkm &#x3D; texpr(bg,meas&#x3D;&quot;FPKM&quot;)</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre># View the last several rows of the FPKM table</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>tail(fpkm)</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre># Transform the FPKM values by adding 1 and convert to a log2 scale</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>fpkm &#x3D; log2(fpkm+1)</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre># View the last several rows of the transformed FPKM table</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>tail(fpkm)</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre># Create boxplots to display summary statistics for the FPKM values for each sample</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>boxplot(fpkm,col&#x3D;as.numeric(pheno_data$type)+1,las&#x3D;2,ylab&#x3D;&#39;log2(FPKM+1)&#39;)</pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre># Display the transcript ID for a single row of data</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>ballgown::transcriptNames(bg)[2763]</pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre># Display the gene name for a single row of data</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>ballgown::geneNames(bg)[2763]</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre># Create a BoxPlot comparing the expression of a single gene for all replicates of both conditions</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>plot(fpkm[2763,] ~ pheno_data$type, border&#x3D;c(2,3), main&#x3D;paste(ballgown::geneNames(bg)[2763],&#39; : &#39;, ballgown::transcriptNames(bg)[2763]),pch&#x3D;19, xlab&#x3D;&quot;Type&quot;, ylab&#x3D;&#39;log2(FPKM+1)&#39;)</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre># Add the FPKM values for each sample onto the plot</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>points(fpkm[2763,] ~ jitter(as.numeric(pheno_data$type)), col&#x3D;as.numeric(pheno_data$type)+1, pch&#x3D;16)</pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre># Create a plot of transcript structures observed in each replicate and color transcripts by expression level</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>plotTranscripts(ballgown::geneIDs(bg)[2763], bg, main&#x3D;c(&#39;Gene in sample HBR_Rep1&#39;), sample&#x3D;c(&#39;HBR_Rep1&#39;))</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>plotTranscripts(ballgown::geneIDs(bg)[2763], bg, main&#x3D;c(&#39;Gene in sample HBR_Rep2&#39;), sample&#x3D;c(&#39;HBR_Rep2&#39;))</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>plotTranscripts(ballgown::geneIDs(bg)[2763], bg, main&#x3D;c(&#39;Gene in sample HBR_Rep3&#39;), sample&#x3D;c(&#39;HBR_Rep3&#39;))</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>plotTranscripts(ballgown::geneIDs(bg)[2763], bg, main&#x3D;c(&#39;Gene in sample UHR_Rep1&#39;), sample&#x3D;c(&#39;UHR_Rep1&#39;))</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>plotTranscripts(ballgown::geneIDs(bg)[2763], bg, main&#x3D;c(&#39;Gene in sample UHR_Rep2&#39;), sample&#x3D;c(&#39;UHR_Rep2&#39;))</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>plotTranscripts(ballgown::geneIDs(bg)[2763], bg, main&#x3D;c(&#39;Gene in sample UHR_Rep3&#39;), sample&#x3D;c(&#39;UHR_Rep3&#39;))</pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>#plotMeans(&#39;TST&#39;,bg,groupvar&#x3D;&quot;type&quot;,legend&#x3D;FALSE)</pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre># Close the PDF device where we have been saving our plots</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>dev.off()</pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre># Exit the R session</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>quit(save&#x3D;&quot;no&quot;)</pre></td></tr></table></figure><p>查看一下输出的 pdf 文件</p>\n<p><img data-src=\"/img/posts/2020.12.26/image-20210105164226503.png\" alt=\"image-20210105164226503\"></p>\n<h3 id=\"额外分析\"><a class=\"anchor\" href=\"#额外分析\">#</a> 额外分析</h3>\n<p>运行 R 脚本</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#Tutorial_Part3_Supplementary_R.R</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>#Malachi Griffith, mgriffit[AT]wustl.edu</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>#Obi Griffith, obigriffith[AT]wustl.edu</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>#Jason Walker, jason.walker[AT]wustl.edu</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>#McDonnell Genome Institute, Washington University School of Medicine</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>#R tutorial for Informatics for RNA-sequence Analysis workshops</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>#Starting from the output of the RNA-seq Tutorial Part 1.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>#Load libraries</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>library(ggplot2)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>library(gplots)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>library(GenomicRanges)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>library(ballgown)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>#If X11 not available, open a pdf device for output of all plots</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>pdf(file&#x3D;&quot;Tutorial_Part3_Supplementary_R_output.pdf&quot;)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>#### Import the gene expression data from the HISAT2&#x2F;StringTie&#x2F;Ballgown tutorial</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>#Set working directory where results files exist</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>working_dir &#x3D; &quot;~&#x2F;workspace&#x2F;rnaseq&#x2F;de&#x2F;ballgown&#x2F;ref_only&quot;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>setwd(working_dir)</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre># List the current contents of this directory</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>dir()</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>#Import expression and differential expression results from the HISAT2&#x2F;StringTie&#x2F;Ballgown pipeline</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>load(&#39;bg.rda&#39;)</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre># View a summary of the ballgown object</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>bg</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre># Load gene names for lookup later in the tutorial</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>bg_table &#x3D; texpr(bg, &#39;all&#39;)</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>bg_gene_names &#x3D; unique(bg_table[, 9:10])</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre># Pull the gene_expression data frame from the ballgown object</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>gene_expression &#x3D; as.data.frame(gexpr(bg))</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>#### Working with &#39;dataframes&#39;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>#View the first five rows of data (all columns) in one of the dataframes created</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>head(gene_expression)</pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>#View the column names</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>colnames(gene_expression)</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>#View the row names</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>row.names(gene_expression)</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>#Determine the dimensions of the dataframe.  &#39;dim()&#39; will return the number of rows and columns</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>dim(gene_expression)</pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>#Get the first 3 rows of data and a selection of columns</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>gene_expression[1:3,c(1:3,6)]</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>#Do the same thing, but using the column names instead of numbers</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>gene_expression[1:3, c(&quot;FPKM.UHR_Rep1&quot;,&quot;FPKM.UHR_Rep2&quot;,&quot;FPKM.UHR_Rep3&quot;,&quot;FPKM.HBR_Rep3&quot;)]</pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>#Assign colors to each.  You can specify color by RGB, Hex code, or name</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>#To get a list of color names:</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>colours()</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>data_colors&#x3D;c(&quot;tomato1&quot;,&quot;tomato2&quot;,&quot;tomato3&quot;,&quot;royalblue1&quot;,&quot;royalblue2&quot;,&quot;royalblue3&quot;)</pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>#View expression values for the transcripts of a particular gene symbol of chromosome 22.  e.g. &#39;TST&#39;</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>#First determine the rows in the data.frame that match &#39;TST&#39;, aka. ENSG00000128311, then display only those rows of the data.frame</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>i &#x3D; row.names(gene_expression) &#x3D;&#x3D; &quot;ENSG00000128311&quot;</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>gene_expression[i,]</pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>#What if we want to view values for a list of genes of interest all at once?</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>#genes_of_interest &#x3D; c(&quot;TST&quot;, &quot;MMP11&quot;, &quot;LGALS2&quot;, &quot;ISX&quot;)</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>genes_of_interest &#x3D; c(&quot;ENSG00000128311&quot;,&quot;ENSG00000099953&quot;,&quot;ENSG00000100079&quot;,&quot;ENSG00000175329&quot;)</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>i &#x3D; which(row.names(gene_expression) %in% genes_of_interest)</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>gene_expression[i,]</pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre># Load the transcript to gene index from the ballgown object</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>transcript_gene_table &#x3D; indexes(bg)$t2g</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>head(transcript_gene_table)</pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>#Each row of data represents a transcript. Many of these transcripts represent the same gene. Determine the numbers of transcripts and unique genes  </pre></td></tr><tr><td data-num=\"83\"></td><td><pre>length(row.names(transcript_gene_table)) #Transcript count</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>length(unique(transcript_gene_table[,&quot;g_id&quot;])) #Unique Gene count</pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>#### Plot #1 - the number of transcripts per gene.  </pre></td></tr><tr><td data-num=\"87\"></td><td><pre>#Many genes will have only 1 transcript, some genes will have several transcripts</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>#Use the &#39;table()&#39; command to count the number of times each gene symbol occurs (i.e. the # of transcripts that have each gene symbol)</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>#Then use the &#39;hist&#39; command to create a histogram of these counts</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>#How many genes have 1 transcript?  More than one transcript?  What is the maximum number of transcripts for a single gene?</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>counts&#x3D;table(transcript_gene_table[,&quot;g_id&quot;])</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>c_one &#x3D; length(which(counts &#x3D;&#x3D; 1))</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>c_more_than_one &#x3D; length(which(counts &gt; 1))</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>c_max &#x3D; max(counts)</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>hist(counts, breaks&#x3D;50, col&#x3D;&quot;bisque4&quot;, xlab&#x3D;&quot;Transcripts per gene&quot;, main&#x3D;&quot;Distribution of transcript count per gene&quot;)</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>legend_text &#x3D; c(paste(&quot;Genes with one transcript &#x3D;&quot;, c_one), paste(&quot;Genes with more than one transcript &#x3D;&quot;, c_more_than_one), paste(&quot;Max transcripts for single gene &#x3D; &quot;, c_max))</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>legend(&quot;topright&quot;, legend_text, lty&#x3D;NULL)</pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>#### Plot #2 - the distribution of transcript sizes as a histogram</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>#In this analysis we supplied StringTie with transcript models so the lengths will be those of known transcripts</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>#However, if we had used a de novo transcript discovery mode, this step would give us some idea of how well transcripts were being assembled</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>#If we had a low coverage library, or other problems, we might get short &#39;transcripts&#39; that are actually only pieces of real transcripts</pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>full_table &lt;- texpr(bg , &#39;all&#39;)</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>hist(full_table$length, breaks&#x3D;50, xlab&#x3D;&quot;Transcript length (bp)&quot;, main&#x3D;&quot;Distribution of transcript lengths&quot;, col&#x3D;&quot;steelblue&quot;)</pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>#### Summarize FPKM values for all 6 replicates</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>#What are the minimum and maximum FPKM values for a particular library?</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>min(gene_expression[,&quot;FPKM.UHR_Rep1&quot;])</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>max(gene_expression[,&quot;FPKM.UHR_Rep1&quot;])</pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>#Set the minimum non-zero FPKM values for use later.</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>#Do this by grabbing a copy of all data values, coverting 0&#39;s to NA, and calculating the minimum or all non NA values</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>#zz &#x3D; fpkm_matrix[,data_columns]</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>#zz[zz&#x3D;&#x3D;0] &#x3D; NA</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>#min_nonzero &#x3D; min(zz, na.rm&#x3D;TRUE)</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>#min_nonzero</pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>#Alternatively just set min value to 1</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>min_nonzero&#x3D;1</pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre># Set the columns for finding FPKM and create shorter names for figures</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>data_columns&#x3D;c(1:6)</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>short_names&#x3D;c(&quot;UHR_1&quot;,&quot;UHR_2&quot;,&quot;UHR_3&quot;,&quot;HBR_1&quot;,&quot;HBR_2&quot;,&quot;HBR_3&quot;)</pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>#### Plot #3 - View the range of values and general distribution of FPKM values for all 4 libraries</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>#Create boxplots for this purpose</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>#Display on a log2 scale and add the minimum non-zero value to avoid log2(0)</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>boxplot(log2(gene_expression[,data_columns]+min_nonzero), col&#x3D;data_colors, names&#x3D;short_names, las&#x3D;2, ylab&#x3D;&quot;log2(FPKM)&quot;, main&#x3D;&quot;Distribution of FPKMs for all 6 libraries&quot;)</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>#Note that the bold horizontal line on each boxplot is the median</pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>#### Plot #4 - plot a pair of replicates to assess reproducibility of technical replicates</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>#Tranform the data by converting to log2 scale after adding an arbitrary small value to avoid log2(0)</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>x &#x3D; gene_expression[,&quot;FPKM.UHR_Rep1&quot;]</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>y &#x3D; gene_expression[,&quot;FPKM.UHR_Rep2&quot;]</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>plot(x&#x3D;log2(x+min_nonzero), y&#x3D;log2(y+min_nonzero), pch&#x3D;16, col&#x3D;&quot;blue&quot;, cex&#x3D;0.25, xlab&#x3D;&quot;FPKM (UHR, Replicate 1)&quot;, ylab&#x3D;&quot;FPKM (UHR, Replicate 2)&quot;, main&#x3D;&quot;Comparison of expression values for a pair of replicates&quot;)</pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>#Add a straight line of slope 1, and intercept 0</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>abline(a&#x3D;0,b&#x3D;1)</pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>#Calculate the correlation coefficient and display in a legend</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>rs&#x3D;cor(x,y)^2</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>legend(&quot;topleft&quot;, paste(&quot;R squared &#x3D; &quot;, round(rs, digits&#x3D;3), sep&#x3D;&quot;&quot;), lwd&#x3D;1, col&#x3D;&quot;black&quot;)</pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>#### Plot #5 - Scatter plots with a large number of data points can be misleading ... regenerate this figure as a density scatter plot</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>colors &#x3D; colorRampPalette(c(&quot;white&quot;, &quot;blue&quot;, &quot;#007FFF&quot;, &quot;cyan&quot;,&quot;#7FFF7F&quot;, &quot;yellow&quot;, &quot;#FF7F00&quot;, &quot;red&quot;, &quot;#7F0000&quot;))</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>smoothScatter(x&#x3D;log2(x+min_nonzero), y&#x3D;log2(y+min_nonzero), xlab&#x3D;&quot;FPKM (UHR, Replicate 1)&quot;, ylab&#x3D;&quot;FPKM (UHR, Replicate 2)&quot;, main&#x3D;&quot;Comparison of expression values for a pair of replicates&quot;, colramp&#x3D;colors, nbin&#x3D;200)</pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>#### Plot all sets of replicates on a single plot</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>#Create an function that generates an R plot.  This function will take as input the two libraries to be compared and a plot name and color</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>plotCor &#x3D; function(lib1, lib2, name, color)&#123;</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\tx&#x3D;gene_expression[,lib1]</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\ty&#x3D;gene_expression[,lib2]</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\tzero_count &#x3D; length(which(x&#x3D;&#x3D;0)) + length(which(y&#x3D;&#x3D;0))</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\tplot(x&#x3D;log2(x+min_nonzero), y&#x3D;log2(y+min_nonzero), pch&#x3D;16, col&#x3D;color, cex&#x3D;0.25, xlab&#x3D;lib1, ylab&#x3D;lib2, main&#x3D;name)</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\tabline(a&#x3D;0,b&#x3D;1)</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\trs&#x3D;cor(x,y, method&#x3D;&quot;pearson&quot;)^2</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\tlegend_text &#x3D; c(paste(&quot;R squared &#x3D; &quot;, round(rs, digits&#x3D;3), sep&#x3D;&quot;&quot;), paste(&quot;Zero count &#x3D; &quot;, zero_count, sep&#x3D;&quot;&quot;))</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\tlegend(&quot;topleft&quot;, legend_text, lwd&#x3D;c(1,NA), col&#x3D;&quot;black&quot;, bg&#x3D;&quot;white&quot;, cex&#x3D;0.8)</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>#Open a plotting page with room for two plots on one page</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>par(mfrow&#x3D;c(1,2))</pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>#Plot #6 - Now make a call to our custom function created above, once for each library comparison</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>plotCor(&quot;FPKM.UHR_Rep1&quot;, &quot;FPKM.HBR_Rep1&quot;, &quot;UHR_1 vs HBR_1&quot;, &quot;tomato2&quot;)</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>plotCor(&quot;FPKM.UHR_Rep2&quot;, &quot;FPKM.HBR_Rep2&quot;, &quot;UHR_2 vs HBR_2&quot;, &quot;royalblue2&quot;)</pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>##### One problem with these plots is that there are so many data points on top of each other, that information is being lost</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>#Regenerate these plots using a density scatter plot</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>plotCor2 &#x3D; function(lib1, lib2, name, color)&#123;</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\tx&#x3D;gene_expression[,lib1]</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\ty&#x3D;gene_expression[,lib2]</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\tzero_count &#x3D; length(which(x&#x3D;&#x3D;0)) + length(which(y&#x3D;&#x3D;0))</pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\tcolors &#x3D; colorRampPalette(c(&quot;white&quot;, &quot;blue&quot;, &quot;#007FFF&quot;, &quot;cyan&quot;,&quot;#7FFF7F&quot;, &quot;yellow&quot;, &quot;#FF7F00&quot;, &quot;red&quot;, &quot;#7F0000&quot;))</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\tsmoothScatter(x&#x3D;log2(x+min_nonzero), y&#x3D;log2(y+min_nonzero), xlab&#x3D;lib1, ylab&#x3D;lib2, main&#x3D;name, colramp&#x3D;colors, nbin&#x3D;275)</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\tabline(a&#x3D;0,b&#x3D;1)</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\trs&#x3D;cor(x,y, method&#x3D;&quot;pearson&quot;)^2</pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\tlegend_text &#x3D; c(paste(&quot;R squared &#x3D; &quot;, round(rs, digits&#x3D;3), sep&#x3D;&quot;&quot;), paste(&quot;Zero count &#x3D; &quot;, zero_count, sep&#x3D;&quot;&quot;))</pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\tlegend(&quot;topleft&quot;, legend_text, lwd&#x3D;c(1,NA), col&#x3D;&quot;black&quot;, bg&#x3D;&quot;white&quot;, cex&#x3D;0.8)</pre></td></tr><tr><td data-num=\"183\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"184\"></td><td><pre></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>#### Plot #7 - Now make a call to our custom function created above, once for each library comparison</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>par(mfrow&#x3D;c(1,2))</pre></td></tr><tr><td data-num=\"187\"></td><td><pre>plotCor2(&quot;FPKM.UHR_Rep1&quot;, &quot;FPKM.HBR_Rep1&quot;, &quot;UHR_1 vs HBR_1&quot;, &quot;tomato2&quot;)</pre></td></tr><tr><td data-num=\"188\"></td><td><pre>plotCor2(&quot;FPKM.UHR_Rep2&quot;, &quot;FPKM.HBR_Rep2&quot;, &quot;UHR_2 vs HBR_2&quot;, &quot;royalblue2&quot;)</pre></td></tr><tr><td data-num=\"189\"></td><td><pre></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>#### Compare the correlation &#39;distance&#39; between all replicates</pre></td></tr><tr><td data-num=\"192\"></td><td><pre>#Do we see the expected pattern for all eight libraries (i.e. replicates most similar, then tumor vs. normal)?</pre></td></tr><tr><td data-num=\"193\"></td><td><pre></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>#Calculate the FPKM sum for all 6 libraries</pre></td></tr><tr><td data-num=\"195\"></td><td><pre>gene_expression[,&quot;sum&quot;]&#x3D;apply(gene_expression[,data_columns], 1, sum)</pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>#Identify the genes with a grand sum FPKM of at least 5 - we will filter out the genes with very low expression across the board</pre></td></tr><tr><td data-num=\"198\"></td><td><pre>i &#x3D; which(gene_expression[,&quot;sum&quot;] &gt; 5)</pre></td></tr><tr><td data-num=\"199\"></td><td><pre></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>#Calculate the correlation between all pairs of data</pre></td></tr><tr><td data-num=\"201\"></td><td><pre>r&#x3D;cor(gene_expression[i,data_columns], use&#x3D;&quot;pairwise.complete.obs&quot;, method&#x3D;&quot;pearson&quot;)</pre></td></tr><tr><td data-num=\"202\"></td><td><pre></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>#Print out these correlation values</pre></td></tr><tr><td data-num=\"204\"></td><td><pre>r</pre></td></tr><tr><td data-num=\"205\"></td><td><pre></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>#### Plot #8 - Convert correlation to &#39;distance&#39;, and use &#39;multi-dimensional scaling&#39; to display the relative differences between libraries</pre></td></tr><tr><td data-num=\"207\"></td><td><pre>#This step calculates 2-dimensional coordinates to plot points for each library</pre></td></tr><tr><td data-num=\"208\"></td><td><pre>#Libraries with similar expression patterns (highly correlated to each other) should group together</pre></td></tr><tr><td data-num=\"209\"></td><td><pre>#What pattern do we expect to see, given the types of libraries we have (technical replicates, biologal replicates, tumor&#x2F;normal)?</pre></td></tr><tr><td data-num=\"210\"></td><td><pre>d&#x3D;1-r</pre></td></tr><tr><td data-num=\"211\"></td><td><pre>mds&#x3D;cmdscale(d, k&#x3D;2, eig&#x3D;TRUE)</pre></td></tr><tr><td data-num=\"212\"></td><td><pre>par(mfrow&#x3D;c(1,1))</pre></td></tr><tr><td data-num=\"213\"></td><td><pre>plot(mds$points, type&#x3D;&quot;n&quot;, xlab&#x3D;&quot;&quot;, ylab&#x3D;&quot;&quot;, main&#x3D;&quot;MDS distance plot (all non-zero genes)&quot;, xlim&#x3D;c(-0.12,0.12), ylim&#x3D;c(-0.12,0.12))</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>points(mds$points[,1], mds$points[,2], col&#x3D;&quot;grey&quot;, cex&#x3D;2, pch&#x3D;16)</pre></td></tr><tr><td data-num=\"215\"></td><td><pre>text(mds$points[,1], mds$points[,2], short_names, col&#x3D;data_colors)</pre></td></tr><tr><td data-num=\"216\"></td><td><pre></pre></td></tr><tr><td data-num=\"217\"></td><td><pre># Calculate the differential expression results including significance</pre></td></tr><tr><td data-num=\"218\"></td><td><pre>results_genes &#x3D; stattest(bg, feature&#x3D;&quot;gene&quot;, covariate&#x3D;&quot;type&quot;, getFC&#x3D;TRUE, meas&#x3D;&quot;FPKM&quot;)</pre></td></tr><tr><td data-num=\"219\"></td><td><pre>results_genes &#x3D; merge(results_genes,bg_gene_names,by.x&#x3D;c(&quot;id&quot;),by.y&#x3D;c(&quot;gene_id&quot;))</pre></td></tr><tr><td data-num=\"220\"></td><td><pre></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>#### Plot #9 - View the distribution of differential expression values as a histogram</pre></td></tr><tr><td data-num=\"222\"></td><td><pre>#Display only those that are significant according to Ballgown</pre></td></tr><tr><td data-num=\"223\"></td><td><pre></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>sig&#x3D;which(results_genes$pval&lt;0.05)</pre></td></tr><tr><td data-num=\"225\"></td><td><pre>results_genes[,&quot;de&quot;] &#x3D; log2(results_genes[,&quot;fc&quot;])</pre></td></tr><tr><td data-num=\"226\"></td><td><pre>hist(results_genes[sig,&quot;de&quot;], breaks&#x3D;50, col&#x3D;&quot;seagreen&quot;, xlab&#x3D;&quot;log2(Fold change) UHR vs HBR&quot;, main&#x3D;&quot;Distribution of differential expression values&quot;)</pre></td></tr><tr><td data-num=\"227\"></td><td><pre>abline(v&#x3D;-2, col&#x3D;&quot;black&quot;, lwd&#x3D;2, lty&#x3D;2)</pre></td></tr><tr><td data-num=\"228\"></td><td><pre>abline(v&#x3D;2, col&#x3D;&quot;black&quot;, lwd&#x3D;2, lty&#x3D;2)</pre></td></tr><tr><td data-num=\"229\"></td><td><pre>legend(&quot;topleft&quot;, &quot;Fold-change &gt; 4&quot;, lwd&#x3D;2, lty&#x3D;2)</pre></td></tr><tr><td data-num=\"230\"></td><td><pre></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>#### Plot #10 - Display the grand expression values from UHR and HBR and mark those that are significantly differentially expressed</pre></td></tr><tr><td data-num=\"232\"></td><td><pre>gene_expression[,&quot;UHR&quot;]&#x3D;apply(gene_expression[,c(1:3)], 1, mean)</pre></td></tr><tr><td data-num=\"233\"></td><td><pre>gene_expression[,&quot;HBR&quot;]&#x3D;apply(gene_expression[,c(4:6)], 1, mean)</pre></td></tr><tr><td data-num=\"234\"></td><td><pre></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>x&#x3D;log2(gene_expression[,&quot;UHR&quot;]+min_nonzero)</pre></td></tr><tr><td data-num=\"236\"></td><td><pre>y&#x3D;log2(gene_expression[,&quot;HBR&quot;]+min_nonzero)</pre></td></tr><tr><td data-num=\"237\"></td><td><pre>plot(x&#x3D;x, y&#x3D;y, pch&#x3D;16, cex&#x3D;0.25, xlab&#x3D;&quot;UHR FPKM (log2)&quot;, ylab&#x3D;&quot;HBR FPKM (log2)&quot;, main&#x3D;&quot;UHR vs HBR FPKMs&quot;)</pre></td></tr><tr><td data-num=\"238\"></td><td><pre>abline(a&#x3D;0, b&#x3D;1)</pre></td></tr><tr><td data-num=\"239\"></td><td><pre>xsig&#x3D;x[sig]</pre></td></tr><tr><td data-num=\"240\"></td><td><pre>ysig&#x3D;y[sig]</pre></td></tr><tr><td data-num=\"241\"></td><td><pre>points(x&#x3D;xsig, y&#x3D;ysig, col&#x3D;&quot;magenta&quot;, pch&#x3D;16, cex&#x3D;0.5)</pre></td></tr><tr><td data-num=\"242\"></td><td><pre>legend(&quot;topleft&quot;, &quot;Significant&quot;, col&#x3D;&quot;magenta&quot;, pch&#x3D;16)</pre></td></tr><tr><td data-num=\"243\"></td><td><pre></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>#Get the gene symbols for the top N (according to corrected p-value) and display them on the plot</pre></td></tr><tr><td data-num=\"245\"></td><td><pre>topn &#x3D; order(abs(results_genes[sig,&quot;fc&quot;]), decreasing&#x3D;TRUE)[1:25]</pre></td></tr><tr><td data-num=\"246\"></td><td><pre>topn &#x3D; order(results_genes[sig,&quot;qval&quot;])[1:25]</pre></td></tr><tr><td data-num=\"247\"></td><td><pre>text(x[topn], y[topn], results_genes[topn,&quot;gene_name&quot;], col&#x3D;&quot;black&quot;, cex&#x3D;0.75, srt&#x3D;45)</pre></td></tr><tr><td data-num=\"248\"></td><td><pre></pre></td></tr><tr><td data-num=\"249\"></td><td><pre></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>#### Write a simple table of differentially expressed transcripts to an output file</pre></td></tr><tr><td data-num=\"251\"></td><td><pre>#Each should be significant with a log2 fold-change &gt;&#x3D; 2</pre></td></tr><tr><td data-num=\"252\"></td><td><pre>sigpi &#x3D; which(results_genes[,&quot;pval&quot;]&lt;0.05)</pre></td></tr><tr><td data-num=\"253\"></td><td><pre>sigp &#x3D; results_genes[sigpi,]</pre></td></tr><tr><td data-num=\"254\"></td><td><pre>sigde &#x3D; which(abs(sigp[,&quot;de&quot;]) &gt;&#x3D; 2)</pre></td></tr><tr><td data-num=\"255\"></td><td><pre>sig_tn_de &#x3D; sigp[sigde,]</pre></td></tr><tr><td data-num=\"256\"></td><td><pre></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>#Order the output by or p-value and then break ties using fold-change</pre></td></tr><tr><td data-num=\"258\"></td><td><pre>o &#x3D; order(sig_tn_de[,&quot;qval&quot;], -abs(sig_tn_de[,&quot;de&quot;]), decreasing&#x3D;FALSE)</pre></td></tr><tr><td data-num=\"259\"></td><td><pre></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>output &#x3D; sig_tn_de[o,c(&quot;gene_name&quot;,&quot;id&quot;,&quot;fc&quot;,&quot;pval&quot;,&quot;qval&quot;,&quot;de&quot;)]</pre></td></tr><tr><td data-num=\"261\"></td><td><pre>write.table(output, file&#x3D;&quot;SigDE_supplementary_R.txt&quot;, sep&#x3D;&quot;\\t&quot;, row.names&#x3D;FALSE, quote&#x3D;FALSE)</pre></td></tr><tr><td data-num=\"262\"></td><td><pre></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>#View selected columns of the first 25 lines of output</pre></td></tr><tr><td data-num=\"264\"></td><td><pre>output[1:25,c(1,4,5)]</pre></td></tr><tr><td data-num=\"265\"></td><td><pre></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>#You can open the file &quot;SigDE.txt&quot; in Excel, Calc, etc.</pre></td></tr><tr><td data-num=\"267\"></td><td><pre>#It should have been written to the current working directory that you set at the beginning of the R tutorial</pre></td></tr><tr><td data-num=\"268\"></td><td><pre>dir()</pre></td></tr><tr><td data-num=\"269\"></td><td><pre></pre></td></tr><tr><td data-num=\"270\"></td><td><pre></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>#### Plot #11 - Create a heatmap to vizualize expression differences between the eight samples</pre></td></tr><tr><td data-num=\"272\"></td><td><pre>#Define custom dist and hclust functions for use with heatmaps</pre></td></tr><tr><td data-num=\"273\"></td><td><pre>mydist&#x3D;function(c) &#123;dist(c,method&#x3D;&quot;euclidian&quot;)&#125;</pre></td></tr><tr><td data-num=\"274\"></td><td><pre>myclust&#x3D;function(c) &#123;hclust(c,method&#x3D;&quot;average&quot;)&#125;</pre></td></tr><tr><td data-num=\"275\"></td><td><pre></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>main_title&#x3D;&quot;sig DE Transcripts&quot;</pre></td></tr><tr><td data-num=\"277\"></td><td><pre>par(cex.main&#x3D;0.8)</pre></td></tr><tr><td data-num=\"278\"></td><td><pre>sig_genes&#x3D;results_genes[sig,&quot;id&quot;]</pre></td></tr><tr><td data-num=\"279\"></td><td><pre>sig_gene_names&#x3D;results_genes[sig,&quot;gene_name&quot;]</pre></td></tr><tr><td data-num=\"280\"></td><td><pre>data&#x3D;log2(as.matrix(gene_expression[sig_genes,data_columns])+1)</pre></td></tr><tr><td data-num=\"281\"></td><td><pre>heatmap.2(data, hclustfun&#x3D;myclust, distfun&#x3D;mydist, na.rm &#x3D; TRUE, scale&#x3D;&quot;none&quot;, dendrogram&#x3D;&quot;both&quot;, margins&#x3D;c(6,7), Rowv&#x3D;TRUE, Colv&#x3D;TRUE, symbreaks&#x3D;FALSE, key&#x3D;TRUE, symkey&#x3D;FALSE, density.info&#x3D;&quot;none&quot;, trace&#x3D;&quot;none&quot;, main&#x3D;main_title, cexRow&#x3D;0.3, cexCol&#x3D;1, labRow&#x3D;sig_gene_names,col&#x3D;rev(heat.colors(75)))</pre></td></tr><tr><td data-num=\"282\"></td><td><pre></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>dev.off()</pre></td></tr><tr><td data-num=\"284\"></td><td><pre></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>#The output file can be viewed in your browser at the following url:</pre></td></tr><tr><td data-num=\"286\"></td><td><pre>#Note, you must replace __YOUR_IP_ADDRESS__ with your own amazon instance IP</pre></td></tr><tr><td data-num=\"287\"></td><td><pre>#http:&#x2F;&#x2F;__YOUR_IP_ADDRESS__&#x2F;workspace&#x2F;rnaseq&#x2F;de&#x2F;ballgown&#x2F;ref_only&#x2F;Tutorial_Part3_Supplementary_R_output.pdf</pre></td></tr><tr><td data-num=\"288\"></td><td><pre>#To exit R type:</pre></td></tr><tr><td data-num=\"289\"></td><td><pre>quit(save&#x3D;&quot;no&quot;)</pre></td></tr></table></figure><p><img data-src=\"/img/posts/2020.12.26/image-20210105164626539.png\" alt=\"image-20210105164626539\"></p>\n<p><img data-src=\"/img/posts/2020.12.26/image-20210105164645781.png\" alt=\"image-20210105164645781\"></p>\n",
            "tags": [
                "生信学习",
                "bioinformatics",
                "RNAseq"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/",
            "url": "https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/",
            "title": "RNAseq教程(3.2)",
            "date_published": "2020-12-24T10:38:45.000Z",
            "content_html": "<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<p><strong>1.Module 1 - Introduction to RNA sequencing</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/17/2020-11-17-RNAseq(1)/\">Installation</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/28/2020-11-28-RNAseq(2)/\">Reference Genomes</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/01/2020-12-01-RNAseq(3)/\">Annotations</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/03/2020-12-03-RNAseq(4)/\">Indexing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/05/2020-12-05-RNAseq(5)/\">RNA-seq Data</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/08/2020-12-08-RNAseq(6)/\">Pre-Alignment QC</a></li>\n</ol>\n<p><strong>2.Module 2 - RNA-seq Alignment and Visualization</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/\">Adapter Trim</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/\">Alignment</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/\">IGV</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/\">Alignment Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/\">Alignment QC</a></li>\n</ol>\n<p><strong>3.Module 3 - Expression and Differential Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/\">Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/\">Differential Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/\">DE Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/\">Kallisto for Reference-Free Abundance Estimation</a></li>\n</ol>\n<p><strong>4.Module 4 - Isoform Discovery and Alternative Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/\">Reference Guided Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/\">de novo Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/05/2020-01-05-RNAseq(18)/\">Transcript Assembly Merge</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/\">Differential Splicing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/\">Splicing Visualization</a></li>\n</ol>\n<p><strong>5.Module 5 - De novo transcript reconstruction</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/\">De novo RNA-Seq Assembly and Analysis Using Trinity</a></li>\n</ol>\n<p><strong>6.Module 6 - Functional Annotation of Transcripts</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/14/2021-01-14RNAseq(22)/\">Functional Annotation of Assembled Transcripts Using Trinotate</a></li>\n</ol>\n<h2 id=\"32-differential-expression\"><a class=\"anchor\" href=\"#32-differential-expression\">#</a> 3.2 Differential Expression</h2>\n<h3 id=\"ballgown\"><a class=\"anchor\" href=\"#ballgown\">#</a> Ballgown</h3>\n<p>用 Ballgown 比较肿瘤和正常情况。详情请参考手册:</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlvY29uZHVjdG9yLm9yZy9wYWNrYWdlcy9yZWxlYXNlL2Jpb2MvaHRtbC9iYWxsZ293bi5odG1s\">https://www.bioconductor.org/packages/release/bioc/html/ballgown.html</span> `</p>\n<p>使用所有复制，对已知 (仅参考模式) 转录本进行 UHR 与 HBR 比较:</p>\n<p>首先创建一个文件，列出我们的 6 个表达式文件，然后查看该文件，检查这些结果:</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>printf &quot;\\&quot;ids\\&quot;,\\&quot;type\\&quot;,\\&quot;path\\&quot;\\n\\&quot;UHR_Rep1\\&quot;,\\&quot;UHR\\&quot;,\\&quot;UHR_Rep1\\&quot;\\n\\&quot;UHR_Rep2\\&quot;,\\&quot;UHR\\&quot;,\\&quot;UHR_Rep2\\&quot;\\n\\&quot;UHR_Rep3\\&quot;,\\&quot;UHR\\&quot;,\\&quot;UHR_Rep3\\&quot;\\n\\&quot;HBR_Rep1\\&quot;,\\&quot;HBR\\&quot;,\\&quot;HBR_Rep1\\&quot;\\n\\&quot;HBR_Rep2\\&quot;,\\&quot;HBR\\&quot;,\\&quot;HBR_Rep2\\&quot;\\n\\&quot;HBR_Rep3\\&quot;,\\&quot;HBR\\&quot;,\\&quot;HBR_Rep3\\&quot;\\n&quot; &gt; UHR_vs_HBR.csv</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cat UHR_vs_HBR.csv</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>R</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#Jason Walker, jason.walker[AT]wustl.edu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#Malachi Griffith, mgriffit[AT]wustl.edu</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>#Obi Griffith, obigriffith[AT]wustl.edu</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>#The Genome McDonnell Institute, Washington University School of Medicine</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>#R tutorial for Informatics for RNA-sequence Analysis workshops</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>library(ballgown)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>library(genefilter)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>library(dplyr)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>library(devtools)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre># Load phenotype data from a file we saved in the current working directory</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>pheno_data &#x3D; read.csv(&quot;UHR_vs_HBR.csv&quot;)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre># Load ballgown data structure and save it to a variable &quot;bg&quot;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>bg &#x3D; ballgown(samples&#x3D;as.vector(pheno_data$path), pData&#x3D;pheno_data)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre># Display a description of this object</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>bg</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre># Load all attributes including gene name</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>bg_table &#x3D; texpr(bg, &#39;all&#39;)</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>bg_gene_names &#x3D; unique(bg_table[, 9:10])</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre># Save the ballgown object to a file for later use</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>save(bg, file&#x3D;&#39;bg.rda&#39;)</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre># Perform differential expression (DE) analysis with no filtering</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>results_transcripts &#x3D; stattest(bg, feature&#x3D;&quot;transcript&quot;, covariate&#x3D;&quot;type&quot;, getFC&#x3D;TRUE, meas&#x3D;&quot;FPKM&quot;)</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>results_genes &#x3D; stattest(bg, feature&#x3D;&quot;gene&quot;, covariate&#x3D;&quot;type&quot;, getFC&#x3D;TRUE, meas&#x3D;&quot;FPKM&quot;)</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>results_genes &#x3D; merge(results_genes, bg_gene_names, by.x&#x3D;c(&quot;id&quot;), by.y&#x3D;c(&quot;gene_id&quot;))</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre># Save a tab delimited file for both the transcript and gene results</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>write.table(results_transcripts, &quot;UHR_vs_HBR_transcript_results.tsv&quot;, sep&#x3D;&quot;\\t&quot;, quote&#x3D;FALSE, row.names &#x3D; FALSE)</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>write.table(results_genes, &quot;UHR_vs_HBR_gene_results.tsv&quot;, sep&#x3D;&quot;\\t&quot;, quote&#x3D;FALSE, row.names &#x3D; FALSE)</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre># Filter low-abundance genes. Here we remove all transcripts with a variance across the samples of less than one</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>bg_filt &#x3D; subset (bg,&quot;rowVars(texpr(bg)) &gt; 1&quot;, genomesubset&#x3D;TRUE)</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre># Load all attributes including gene name</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>bg_filt_table &#x3D; texpr(bg_filt , &#39;all&#39;)</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>bg_filt_gene_names &#x3D; unique(bg_filt_table[, 9:10])</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre># Perform DE analysis now using the filtered data</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>results_transcripts &#x3D; stattest(bg_filt, feature&#x3D;&quot;transcript&quot;, covariate&#x3D;&quot;type&quot;, getFC&#x3D;TRUE, meas&#x3D;&quot;FPKM&quot;)</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>results_genes &#x3D; stattest(bg_filt, feature&#x3D;&quot;gene&quot;, covariate&#x3D;&quot;type&quot;, getFC&#x3D;TRUE, meas&#x3D;&quot;FPKM&quot;)</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>results_genes &#x3D; merge(results_genes, bg_filt_gene_names, by.x&#x3D;c(&quot;id&quot;), by.y&#x3D;c(&quot;gene_id&quot;))</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre># Output the filtered list of genes and transcripts and save to tab delimited files</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>write.table(results_transcripts, &quot;UHR_vs_HBR_transcript_results_filtered.tsv&quot;, sep&#x3D;&quot;\\t&quot;, quote&#x3D;FALSE, row.names &#x3D; FALSE)</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>write.table(results_genes, &quot;UHR_vs_HBR_gene_results_filtered.tsv&quot;, sep&#x3D;&quot;\\t&quot;, quote&#x3D;FALSE, row.names &#x3D; FALSE)</pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre># Identify the significant genes with p-value &lt; 0.05</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>sig_transcripts &#x3D; subset(results_transcripts, results_transcripts$pval&lt;0.05)</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>sig_genes &#x3D; subset(results_genes, results_genes$pval&lt;0.05)</pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre># Output the signifant gene results to a pair of tab delimited files</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>write.table(sig_transcripts, &quot;UHR_vs_HBR_transcript_results_sig.tsv&quot;, sep&#x3D;&quot;\\t&quot;, quote&#x3D;FALSE, row.names &#x3D; FALSE)</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>write.table(sig_genes, &quot;UHR_vs_HBR_gene_results_sig.tsv&quot;, sep&#x3D;&quot;\\t&quot;, quote&#x3D;FALSE, row.names &#x3D; FALSE)</pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre># Exit the R session</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>quit(save&#x3D;&quot;no&quot;)</pre></td></tr></table></figure><p>运行结束后查看结果</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>head UHR_vs_HBR_gene_results.tsv</pre></td></tr></table></figure><p>这条染色体上有多少个基因？</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>grep -v feature UHR_vs_HBR_gene_results.tsv | wc -l</pre></td></tr></table></figure><p>在 UHR 或 HBR 中有多少通过过滤？</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>grep -v feature UHR_vs_HBR_gene_results_filtered.tsv | wc -l</pre></td></tr></table></figure><p>在这条染色体上发现了多少差异表达基因 (p 值 &lt; 0.05)?</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>grep -v feature UHR_vs_HBR_gene_results_sig.tsv | wc -l</pre></td></tr></table></figure><p>展示前 20 个 DE 基因。看看 IGV 中的一些基因 —— 它们有意义吗？</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>grep -v feature UHR_vs_HBR_gene_results_sig.tsv | sort -rnk 3 | head -n 20 #Higher abundance in UHR</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>grep -v feature UHR_vs_HBR_gene_results_sig.tsv | sort -nk 3 | head -n 20 #Higher abundance in HBR</pre></td></tr></table></figure><p>将 P&lt;0.05 的所有基因保存到一个新文件中。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>grep -v feature UHR_vs_HBR_gene_results_sig.tsv | cut -f 6 | sed &#39;s&#x2F;\\&quot;&#x2F;&#x2F;g&#39; &gt; DE_genes.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>head DE_genes.txt</pre></td></tr></table></figure><h3 id=\"edger\"><a class=\"anchor\" href=\"#edger\">#</a> edgeR</h3>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mkdir -p de&#x2F;htseq_counts</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cd de&#x2F;htseq_counts</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>perl -ne &#39;if ($_ &#x3D;~ &#x2F;gene_id\\s\\&quot;(ENSG\\S+)\\&quot;\\;&#x2F;) &#123; $id &#x3D; $1; $name &#x3D; undef; if ($_ &#x3D;~ &#x2F;gene_name\\s\\&quot;(\\S+)&quot;\\;&#x2F;) &#123; $name &#x3D; $1; &#125;; &#125;; if ($id &amp;&amp; $name) &#123;print &quot;$id\\t$name\\n&quot;;&#125; if ($_&#x3D;~&#x2F;gene_id\\s\\&quot;(ERCC\\S+)\\&quot;&#x2F;)&#123;print &quot;$1\\t$1\\n&quot;;&#125;&#39; $RNA_REF_GTF | sort | uniq &gt; ENSG_ID2Name.txt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>head ENSG_ID2Name.txt</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cut -f 1 ENSG_ID2Name.txt | sort | uniq | wc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cut -f 2 ENSG_ID2Name.txt | sort | uniq | wc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cut -f 2 ENSG_ID2Name.txt | sort | uniq -c | sort -r | head</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#Malachi Griffith, mgriffit[AT]wustl.edu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#Obi Griffith, obigriffith[AT]wustl.edu</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>#The McDonnell Genome Institute, Washington University School of Medicine</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>#R tutorial for Informatics for RNA-sequence Analysis workshops</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>#######################</pre></td></tr><tr><td data-num=\"8\"></td><td><pre># Loading Data into R #</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>#######################</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>#Set working directory where output will go</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>working_dir &#x3D; &quot;path_to&#x2F;de&#x2F;htseq_counts&quot;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>setwd(working_dir)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>#Read in gene mapping</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>mapping&#x3D;read.table(&quot;~&#x2F;workspace&#x2F;rnaseq&#x2F;de&#x2F;htseq_counts&#x2F;ENSG_ID2Name.txt&quot;, header&#x3D;FALSE, stringsAsFactors&#x3D;FALSE, row.names&#x3D;1)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre># Read in count matrix</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>rawdata&#x3D;read.table(&quot;~&#x2F;workspace&#x2F;rnaseq&#x2F;expression&#x2F;htseq_counts&#x2F;gene_read_counts_table_all_final.tsv&quot;, header&#x3D;TRUE, stringsAsFactors&#x3D;FALSE, row.names&#x3D;1)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre># Check dimensions</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>dim(rawdata)</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre># Require at least 25% of samples to have count &gt; 25</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>quant &lt;- apply(rawdata,1,quantile,0.75)</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>keep &lt;- which((quant &gt;&#x3D; 25) &#x3D;&#x3D; 1)</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>rawdata &lt;- rawdata[keep,]</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>dim(rawdata)</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>#################</pre></td></tr><tr><td data-num=\"31\"></td><td><pre># Running edgeR #</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>#################</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre># load edgeR</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>library(&#39;edgeR&#39;)</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre># make class labels</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>class &lt;- factor( c( rep(&quot;UHR&quot;,3), rep(&quot;HBR&quot;,3) ))</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre># Get common gene names</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>genes&#x3D;rownames(rawdata)</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>gene_names&#x3D;mapping[genes,1]</pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre># Make DGEList object</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>y &lt;- DGEList(counts&#x3D;rawdata, genes&#x3D;genes, group&#x3D;class)</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>nrow(y)</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre># TMM Normalization</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>y &lt;- calcNormFactors(y)</pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre># Estimate dispersion</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>y &lt;- estimateCommonDisp(y, verbose&#x3D;TRUE)</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>y &lt;- estimateTagwiseDisp(y)</pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre># Differential expression test</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>et &lt;- exactTest(y)</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre># Print top genes</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>topTags(et)</pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre># Print number of up&#x2F;down significant genes at FDR &#x3D; 0.05  significance level</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>summary(de &lt;- decideTestsDGE(et, p&#x3D;.05))</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>detags &lt;- rownames(y)[as.logical(de)]</pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre># Output DE genes</pre></td></tr><tr><td data-num=\"68\"></td><td><pre># Matrix of significantly DE genes</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>mat &lt;- cbind(</pre></td></tr><tr><td data-num=\"70\"></td><td><pre> genes,gene_names,</pre></td></tr><tr><td data-num=\"71\"></td><td><pre> sprintf(&#39;%0.3f&#39;,log10(et$table$PValue)),</pre></td></tr><tr><td data-num=\"72\"></td><td><pre> sprintf(&#39;%0.3f&#39;,et$table$logFC)</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>)[as.logical(de),]</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>colnames(mat) &lt;- c(&quot;Gene&quot;, &quot;Gene_Name&quot;, &quot;Log10_Pvalue&quot;, &quot;Log_fold_change&quot;)</pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre># Order by log fold change</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>o &lt;- order(et$table$logFC[as.logical(de)],decreasing&#x3D;TRUE)</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>mat &lt;- mat[o,]</pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre># Save table</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>write.table(mat, file&#x3D;&quot;DE_genes.txt&quot;, quote&#x3D;FALSE, row.names&#x3D;FALSE, sep&#x3D;&quot;\\t&quot;)</pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>#To exit R type the following</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>quit(save&#x3D;&quot;no&quot;)</pre></td></tr></table></figure><p>与其他结果比较</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat DE_genes.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cat &#x2F;de&#x2F;htseq_counts&#x2F;DE_genes.txt</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cut -f 1 DE_genes.txt | sort  &gt; ballgown_DE_gene_symbols.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cut -f 2 de&#x2F;htseq_counts&#x2F;DE_genes.txt | sort &gt; htseq_counts_edgeR_DE_gene_symbols.txt</pre></td></tr></table></figure>",
            "tags": [
                "生信学习",
                "bioinformatics",
                "RNAseq"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/",
            "url": "https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/",
            "title": "RNAseq教程(3.1)",
            "date_published": "2020-12-22T10:38:45.000Z",
            "content_html": "<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<p><strong>1.Module 1 - Introduction to RNA sequencing</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/17/2020-11-17-RNAseq(1)/\">Installation</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/28/2020-11-28-RNAseq(2)/\">Reference Genomes</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/01/2020-12-01-RNAseq(3)/\">Annotations</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/03/2020-12-03-RNAseq(4)/\">Indexing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/05/2020-12-05-RNAseq(5)/\">RNA-seq Data</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/08/2020-12-08-RNAseq(6)/\">Pre-Alignment QC</a></li>\n</ol>\n<p><strong>2.Module 2 - RNA-seq Alignment and Visualization</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/\">Adapter Trim</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/\">Alignment</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/\">IGV</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/\">Alignment Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/\">Alignment QC</a></li>\n</ol>\n<p><strong>3.Module 3 - Expression and Differential Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/\">Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/\">Differential Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/\">DE Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/\">Kallisto for Reference-Free Abundance Estimation</a></li>\n</ol>\n<p><strong>4.Module 4 - Isoform Discovery and Alternative Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/\">Reference Guided Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/\">de novo Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/05/2020-01-05-RNAseq(18)/\">Transcript Assembly Merge</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/\">Differential Splicing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/\">Splicing Visualization</a></li>\n</ol>\n<p><strong>5.Module 5 - De novo transcript reconstruction</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/\">De novo RNA-Seq Assembly and Analysis Using Trinity</a></li>\n</ol>\n<p><strong>6.Module 6 - Functional Annotation of Transcripts</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/14/2021-01-14RNAseq(22)/\">Functional Annotation of Assembled Transcripts Using Trinotate</a></li>\n</ol>\n<h2 id=\"31-expression\"><a class=\"anchor\" href=\"#31-expression\">#</a> 3.1 Expression</h2>\n<h3 id=\"stringtie\"><a class=\"anchor\" href=\"#stringtie\">#</a> Stringtie</h3>\n<p>使用 Stringtie 从上一个模块中 HISAT2 生成的 SAM/BAM 文件中生成表达量统计</p>\n<p>注意使用 Stringtie 从头发现转录本和差异表达</p>\n<p>在本模块中，我们将以有参模式模式运行 Stringtie。为了简化和减少运行时间，只使用已知的转录本。但是，Stringtie 可以预测每个文库中存在的可能的转录本 (通过删除 Stringtie 命令中的 '-G' 选项)。然后，Stringtie 将为每个由数据组装的转录本分配任意的转录本 id，并估计这些转录本的表达。</p>\n<ul>\n<li>Stringtie 提供了一个 merge 命令合并不同文库的 gtf 文件</li>\n<li>旦您有了一个合并的 GTF 文件，您就可以使用这个文件再次运行 Stringtie，而不是我们上面使用的已知的 transcripts GTF 文件</li>\n<li>Stringtie 还提供了 “gffcompare” 来比较预测的转录本和已知的转录本</li>\n<li>参考 Stringtie 手册获得更详细的解释:</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jY2Iuamh1LmVkdS9zb2Z0d2FyZS9zdHJpbmd0aWUvaW5kZXguc2h0bWw/dD1tYW51YWw=\">https://ccb.jhu.edu/software/stringtie/index.shtml?t=manual</span></li>\n</ul>\n<p>String 的基础使用</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>stringtie &lt;aligned_reads.bam&gt; [options]*</pre></td></tr></table></figure><ul>\n<li>'-p 8' tells Stringtie to use eight CPUs</li>\n<li>'-G &lt;known transcripts file&gt;' reference annotation to use for guiding the assembly process (GTF/GFF3)</li>\n<li>'-e' only estimate the abundance of given reference transcripts (requires -G)</li>\n<li>'-B' enable output of Ballgown table files which will be created in  the same directory as the output GTF (requires -G, -o recommended)</li>\n<li>'-o' output path/file name for the assembled transcripts GTF (default: stdout)</li>\n<li>'-A' output path/file name for gene abundance estimates</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>stringtie -p 8 -G ..&#x2F;chr22_with_ERCC92.gtf -e -B -o HBR_Rep1&#x2F;transcripts.gtf -A HBR_Rep1&#x2F;gene_abundances.tsv HBR_Rep1.bam</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>stringtie -p 8 -G ..&#x2F;chr22_with_ERCC92.gtf -e -B -o HBR_Rep2&#x2F;transcripts.gtf -A HBR_Rep2&#x2F;gene_abundances.tsv HBR_Rep2.bam</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>stringtie -p 8 -G ..&#x2F;chr22_with_ERCC92.gtf -e -B -o HBR_Rep3&#x2F;transcripts.gtf -A HBR_Rep3&#x2F;gene_abundances.tsv HBR_Rep3.bam</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>stringtie -p 8 -G ..&#x2F;chr22_with_ERCC92.gtf -e -B -o UHR_Rep1&#x2F;transcripts.gtf -A UHR_Rep1&#x2F;gene_abundances.tsv UHR_Rep1.bam</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>stringtie -p 8 -G ..&#x2F;chr22_with_ERCC92.gtf -e -B -o UHR_Rep2&#x2F;transcripts.gtf -A UHR_Rep2&#x2F;gene_abundances.tsv UHR_Rep2.bam</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>stringtie -p 8 -G ..&#x2F;chr22_with_ERCC92.gtf -e -B -o UHR_Rep3&#x2F;transcripts.gtf -A UHR_Rep3&#x2F;gene_abundances.tsv UHR_Rep3.bam</pre></td></tr></table></figure><p>Stringtie 的原始输出是什么样子的？有关 Stringtie 输出文件的详细信息，请参阅<span class=\"exturl\" data-url=\"aHR0cDovL2NjYi5qaHUuZWR1L3NvZnR3YXJlL3N0cmluZ3RpZS9pbmRleC5zaHRtbD90PW1hbnVhbA==\"> Stringtie 手册</span> (<span class=\"exturl\" data-url=\"aHR0cDovL2NjYi5qaHUuZWR1L3NvZnR3YXJlL3N0cmluZ3RpZS9pbmRleC5zaHRtbD90PW1hbnVhbCNvdXRwdXQ=\">输出部分</span>)</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>less -S UHR_Rep1&#x2F;transcripts.gtf</pre></td></tr></table></figure><p>查看表达量</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>awk &#39;&#123;if ($3&#x3D;&#x3D;&quot;transcript&quot;) print&#125;&#39; UHR_Rep1&#x2F;transcripts.gtf | cut -f 1,4,9 | less</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>22      15690026        gene_id &quot;ENSG00000198062&quot;; transcript_id &quot;ENST00000343518&quot;; ref_gene_name &quot;POTEH&quot;; cov &quot;0.106554&quot;; FPKM &quot;2.778050&quot;; TPM &quot;3.623655&quot;;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>22      15690078        gene_id &quot;ENSG00000198062&quot;; transcript_id &quot;ENST00000621704&quot;; ref_gene_name &quot;POTEH&quot;; cov &quot;0.519912&quot;; FPKM &quot;13.555018&quot;; TPM &quot;17.681002&quot;;</pre></td></tr></table></figure><p>基因和转录本水平表达值也可以在这两个文件中查看:</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>less -S UHR_Rep1&#x2F;t_data.ctab</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>less -S UHR_Rep1&#x2F;gene_abundances.tsv</pre></td></tr></table></figure><p>创建一个整洁的表达式矩阵文件。这将在基因和转录水平上进行，还将产生各种不同的表达量表示方法：覆盖率、FPKM 和 TPM。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>wget https:&#x2F;&#x2F;github.com&#x2F;griffithlab&#x2F;rnaseq_tutorial&#x2F;blob&#x2F;master&#x2F;scripts&#x2F;stringtie_expression_matrix.pl</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>chmod +x stringtie_expression_matrix.pl</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.&#x2F;stringtie_expression_matrix.pl --expression_metric&#x3D;TPM --result_dirs&#x3D;&#39;HBR_Rep1,HBR_Rep2,HBR_Rep3,UHR_Rep1,UHR_Rep2,UHR_Rep3&#39; --transcript_matrix_file&#x3D;transcript_tpm_all_samples.tsv --gene_matrix_file&#x3D;gene_tpm_all_samples.tsv</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.&#x2F;stringtie_expression_matrix.pl --expression_metric&#x3D;FPKM --result_dirs&#x3D;&#39;HBR_Rep1,HBR_Rep2,HBR_Rep3,UHR_Rep1,UHR_Rep2,UHR_Rep3&#39; --transcript_matrix_file&#x3D;transcript_fpkm_all_samples.tsv --gene_matrix_file&#x3D;gene_fpkm_all_samples.tsv</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.&#x2F;stringtie_expression_matrix.pl --expression_metric&#x3D;Coverage --result_dirs&#x3D;&#39;HBR_Rep1,HBR_Rep2,HBR_Rep3,UHR_Rep1,UHR_Rep2,UHR_Rep3&#39; --transcript_matrix_file&#x3D;transcript_coverage_all_samples.tsv --gene_matrix_file&#x3D;gene_coverage_all_samples.tsv</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>head transcript_tpm_all_samples.tsv gene_tpm_all_samples.tsv</pre></td></tr></table></figure><h3 id=\"htseq-count粗略介绍\"><a class=\"anchor\" href=\"#htseq-count粗略介绍\">#</a> HTSEQ-COUNT (粗略介绍)</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy1odWJlci5lbWJsLmRlL3VzZXJzL2FuZGVycy9IVFNlcS9kb2MvY291bnQuaHRtbA==\">http://www-huber.embl.de/users/anders/HTSeq/doc/count.html</span></p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>htseq-count [options] &lt;sam_file&gt; &lt;gff_file&gt;</pre></td></tr></table></figure><ul>\n<li>'--format' specify the input file format one of BAM or SAM. Since we have BAM format files, select 'bam' for this option.</li>\n<li>'--order' provide the expected sort order of the input file.  Previously we generated position sorted BAM files so use 'pos'.</li>\n<li>'--mode' determines how to deal with reads that overlap more than  one feature. We believe the 'intersection-strict' mode is best.</li>\n<li>'--stranded' specifies whether data is stranded or not.  The TruSeq  strand-specific RNA libraries suggest the 'reverse' option for this  parameter.</li>\n<li>'--minaqual' will skip all reads with alignment quality lower than the given minimum value</li>\n<li>'--type' specifies the feature type (3rd column in GFF file) to be  used. (default, suitable for RNA-Seq and Ensembl GTF files: exon)</li>\n<li>'--idattr' The feature ID used to identity the counts in the output  table. The default, suitable for RNA-SEq and Ensembl GTF files, is  gene_id.</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mkdir -p htseq_counts</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cd htseq_counts</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>htseq-count --format bam --order pos --mode intersection-strict --stranded reverse --minaqual 1 --type exon --idattr gene_id ..&#x2F;UHR_Rep1.bam ..&#x2F;..&#x2F;chr22_with_ERCC92.gtf &gt; UHR_Rep1_gene.tsv</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>htseq-count --format bam --order pos --mode intersection-strict --stranded reverse --minaqual 1 --type exon --idattr gene_id ..&#x2F;UHR_Rep2.bam ..&#x2F;..&#x2F;chr22_with_ERCC92.gtf &gt; UHR_Rep2_gene.tsv</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>htseq-count --format bam --order pos --mode intersection-strict --stranded reverse --minaqual 1 --type exon --idattr gene_id ..&#x2F;UHR_Rep3.bam ..&#x2F;..&#x2F;chr22_with_ERCC92.gtf &gt; UHR_Rep3_gene.tsv</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>htseq-count --format bam --order pos --mode intersection-strict --stranded reverse --minaqual 1 --type exon --idattr gene_id ..&#x2F;HBR_Rep1.bam ..&#x2F;..&#x2F;chr22_with_ERCC92.gtf &gt; HBR_Rep1_gene.tsv</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>htseq-count --format bam --order pos --mode intersection-strict --stranded reverse --minaqual 1 --type exon --idattr gene_id ..&#x2F;HBR_Rep2.bam ..&#x2F;..&#x2F;chr22_with_ERCC92.gtf &gt; HBR_Rep2_gene.tsv</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>htseq-count --format bam --order pos --mode intersection-strict --stranded reverse --minaqual 1 --type exon --idattr gene_id ..&#x2F;HBR_Rep3.bam ..&#x2F;..&#x2F;chr22_with_ERCC92.gtf &gt; HBR_Rep3_gene.tsv</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd htseq_counts&#x2F;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>join UHR_Rep1_gene.tsv UHR_Rep2_gene.tsv | join - UHR_Rep3_gene.tsv | join - HBR_Rep1_gene.tsv | join - HBR_Rep2_gene.tsv | join - HBR_Rep3_gene.tsv &gt; gene_read_counts_table_all.tsv</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>echo &quot;GeneID UHR_Rep1 UHR_Rep2 UHR_Rep3 HBR_Rep1 HBR_Rep2 HBR_Rep3&quot; &gt; header.txt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cat header.txt gene_read_counts_table_all.tsv | grep -v &quot;__&quot; | perl -ne &#39;chomp $_; $_ &#x3D;~ s&#x2F;\\s+&#x2F;\\t&#x2F;g; print &quot;$_\\n&quot;&#39; &gt; gene_read_counts_table_all_final.tsv</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>rm -f gene_read_counts_table_all.tsv header.txt</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>head gene_read_counts_table_all_final.tsv</pre></td></tr></table></figure>",
            "tags": [
                "生信学习",
                "bioinformatics",
                "RNAseq"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/",
            "url": "https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/",
            "title": "RNAseq教程(2.5)",
            "date_published": "2020-12-19T10:38:45.000Z",
            "content_html": "<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<p><strong>1.Module 1 - Introduction to RNA sequencing</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/17/2020-11-17-RNAseq(1)/\">Installation</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/28/2020-11-28-RNAseq(2)/\">Reference Genomes</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/01/2020-12-01-RNAseq(3)/\">Annotations</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/03/2020-12-03-RNAseq(4)/\">Indexing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/05/2020-12-05-RNAseq(5)/\">RNA-seq Data</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/08/2020-12-08-RNAseq(6)/\">Pre-Alignment QC</a></li>\n</ol>\n<p><strong>2.Module 2 - RNA-seq Alignment and Visualization</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/\">Adapter Trim</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/\">Alignment</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/\">IGV</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/\">Alignment Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/\">Alignment QC</a></li>\n</ol>\n<p><strong>3.Module 3 - Expression and Differential Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/\">Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/\">Differential Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/\">DE Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/\">Kallisto for Reference-Free Abundance Estimation</a></li>\n</ol>\n<p><strong>4.Module 4 - Isoform Discovery and Alternative Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/\">Reference Guided Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/\">de novo Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/05/2020-01-05-RNAseq(18)/\">Transcript Assembly Merge</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/\">Differential Splicing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/\">Splicing Visualization</a></li>\n</ol>\n<p><strong>5.Module 5 - De novo transcript reconstruction</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/\">De novo RNA-Seq Assembly and Analysis Using Trinity</a></li>\n</ol>\n<p><strong>6.Module 6 - Functional Annotation of Transcripts</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/14/2021-01-14RNAseq(22)/\">Functional Annotation of Assembled Transcripts Using Trinotate</a></li>\n</ol>\n<h2 id=\"25-alignment-qc\"><a class=\"anchor\" href=\"#25-alignment-qc\">#</a> 2.5 Alignment QC</h2>\n<h3 id=\"使用samtools和fastqc来评估比对结果\"><a class=\"anchor\" href=\"#使用samtools和fastqc来评估比对结果\">#</a> 使用 samtools 和 FastQC 来评估比对结果</h3>\n<p>使用 <code>samtools view</code>  查看 SAM/BAM 比对文件的格式</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>samtools view -H UHR.bam</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>samtools view UHR.bam | head</pre></td></tr></table></figure><p>尝试过滤 BAM 文件以排除某些标记。这可以通过 <code>samtools view -f -F</code>  选项实现</p>\n<p>-f INT   required flag -F INT   filtering flag</p>\n<p>Try requiring that alignments are 'paired' and 'mapped in a proper pair' (=3). Also filter out alignments that are 'unmapped', the 'mate is  unmapped', and 'not primary alignment' (=268)</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>samtools view -f 3 -F 268 UHR.bam | head</pre></td></tr></table></figure><p>现在要求只对 “PCR or optical duplicate” 进行比对。有多少 reads 符合这个标准？为什么？</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>samtools view -f 1024 UHR.bam | head</pre></td></tr></table></figure><p>使用 <code>samtools flagstat</code>  获取比对的基本情况。比对到上 reads 的百分比是多少？</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>samtools flagstat UHR.bam</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1174953 + 0 in total (QC-passed reads + QC-failed reads)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>24539 + 0 secondary</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>0 + 0 supplementary</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>0 + 0 duplicates</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>1173741 + 0 mapped (99.90% : N&#x2F;A)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>1150414 + 0 paired in sequencing</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>575207 + 0 read1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>575207 + 0 read2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>1143860 + 0 properly paired (99.43% : N&#x2F;A)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>1148598 + 0 with itself and mate mapped</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>604 + 0 singletons (0.05% : N&#x2F;A)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>6 + 0 with mate mapped to a different chr</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>6 + 0 with mate mapped to a different chr (mapQ&gt;&#x3D;5)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>samtools flagstat HBR.bam</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>793963 + 0 in total (QC-passed reads + QC-failed reads)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>7597 + 0 secondary</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>0 + 0 supplementary</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>0 + 0 duplicates</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>793356 + 0 mapped (99.92% : N&#x2F;A)</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>786366 + 0 paired in sequencing</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>393183 + 0 read1</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>393183 + 0 read2</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>783124 + 0 properly paired (99.59% : N&#x2F;A)</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>785496 + 0 with itself and mate mapped</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>263 + 0 singletons (0.03% : N&#x2F;A)</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>0 + 0 with mate mapped to a different chr</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>0 + 0 with mate mapped to a different chr (mapQ&gt;&#x3D;5)</pre></td></tr></table></figure><p>SAM/BAM 格式的详细信息可以在这里找到:<span class=\"exturl\" data-url=\"aHR0cDovL3NhbXRvb2xzLnNvdXJjZWZvcmdlLm5ldC9TQU0xLnBkZg==\">http://samtools.sourceforge.net/SAM1.pdf</span></p>\n<h3 id=\"using-fastqc\"><a class=\"anchor\" href=\"#using-fastqc\">#</a> Using FastQC</h3>\n<p>你可以使用 FastQC 来执行基本的 BAM 文件的 QC (<a href=\"https://www.zhouxiaozhao.cn/2020/12/08/RNAseq(6)/\">Pre-Alignment QC</a>)。输出非常类似于在 fastq 文件上运行 FastQC。</p>\n",
            "tags": [
                "生信学习",
                "bioinformatics",
                "RNAseq"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/",
            "url": "https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/",
            "title": "RNAseq教程(2.4)",
            "date_published": "2020-12-17T10:38:45.000Z",
            "content_html": "<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<p><strong>1.Module 1 - Introduction to RNA sequencing</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/17/2020-11-17-RNAseq(1)/\">Installation</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/28/2020-11-28-RNAseq(2)/\">Reference Genomes</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/01/2020-12-01-RNAseq(3)/\">Annotations</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/03/2020-12-03-RNAseq(4)/\">Indexing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/05/2020-12-05-RNAseq(5)/\">RNA-seq Data</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/08/2020-12-08-RNAseq(6)/\">Pre-Alignment QC</a></li>\n</ol>\n<p><strong>2.Module 2 - RNA-seq Alignment and Visualization</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/\">Adapter Trim</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/\">Alignment</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/\">IGV</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/\">Alignment Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/\">Alignment QC</a></li>\n</ol>\n<p><strong>3.Module 3 - Expression and Differential Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/\">Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/\">Differential Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/\">DE Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/\">Kallisto for Reference-Free Abundance Estimation</a></li>\n</ol>\n<p><strong>4.Module 4 - Isoform Discovery and Alternative Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/\">Reference Guided Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/\">de novo Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/05/2020-01-05-RNAseq(18)/\">Transcript Assembly Merge</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/\">Differential Splicing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/\">Splicing Visualization</a></li>\n</ol>\n<p><strong>5.Module 5 - De novo transcript reconstruction</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/\">De novo RNA-Seq Assembly and Analysis Using Trinity</a></li>\n</ol>\n<p><strong>6.Module 6 - Functional Annotation of Transcripts</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/14/2021-01-14RNAseq(22)/\">Functional Annotation of Assembled Transcripts Using Trinotate</a></li>\n</ol>\n<h2 id=\"24-alignment-visualization\"><a class=\"anchor\" href=\"#24-alignment-visualization\">#</a> 2.4  Alignment Visualization</h2>\n<p>在我们可以在 IGV 浏览器中查看我们的结果之前，我们需要索引我们的 BAM 文件。为此，我们将使用 samtools 索引。为了方便以后，为所有 bam 文件建立索引。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd align</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>find *.bam -exec echo samtools index &#123;&#125; \\; | sh</pre></td></tr></table></figure><h3 id=\"可视化比对结果\"><a class=\"anchor\" href=\"#可视化比对结果\">#</a> 可视化比对结果</h3>\n<p>在 IGV 加载 UHR 与 HBR 的 bam 文件</p>\n<h3 id=\"练习\"><a class=\"anchor\" href=\"#练习\">#</a> 练习：</h3>\n<p>尝试在 RNAseq 数据中找到一个变量位置:</p>\n<ul>\n<li>HINT: <em>DDX17</em> is a highly expressed gene with several variants in its 3 prime UTR.</li>\n<li>Other highly expressed genes you might explore are: <em>NUP50</em>, <em>CYB5R3</em>, and <em>EIF3L</em> (all have at least one transcribed variant).</li>\n<li>Are these variants previously known (e.g., present in dbSNP)?</li>\n<li>How should we interpret the allele frequency of each variant?   Remember that we have rather unusual samples here in that they are  actually pooled RNAs corresponding to multiple individuals (genotypes).</li>\n<li>Take note of the genomic position of your variant. We will need this later.</li>\n</ul>\n<p><img data-src=\"/img/posts/2020.12.17/image-20201229161539281.png\" alt=\"image-20201229161539281\"></p>\n<h3 id=\"bam-read-counting\"><a class=\"anchor\" href=\"#bam-read-counting\">#</a> BAM read counting</h3>\n<p>首先，使用 <code>samtools mpileup</code>  来可视化相应的区域。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mkdir bam_readcount</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cd bam_readcount</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>samtools mpileup -f ..&#x2F;chr22_only.fa -r 22:18918457-18918467 ..&#x2F;align&#x2F;UHR.bam ..&#x2F;align&#x2F;HBR.bam</pre></td></tr></table></figure><p>每一行由染色体、位点、碱基、覆盖位点的 reads 数、reads base 和 base 质量组成。在 read 碱基列，点表示与正链参考碱基匹配，逗号表示反链匹配，ACGTN 表示正链不匹配，ACGTN 表示反链不匹配。模式 +[0-9]+[ACGTNacgtn]+ 表示在这个参考位置和下一个参考位置之间有一个插入。插入的长度由模式中的整数给出，然后是插入的序列。有关输出的更多解释，请参阅 samtools pileup/mpileup 文档</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3NhbXRvb2xzLnNvdXJjZWZvcmdlLm5ldC9waWxldXAuc2h0bWw=\">http://samtools.sourceforge.net/pileup.shtml</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3NhbXRvb2xzLnNvdXJjZWZvcmdlLm5ldC9tcGlsZXVwLnNodG1s\">http://samtools.sourceforge.net/mpileup.shtml</span></li>\n</ul>\n<p>现在，使用 <code>bam-readcount</code>  来计数。首先，创建一个 bed 文件，其中包含一些感兴趣的位置 (我们将创建一个名为 snvs 的文件。使用 echo 命令 bed)。</p>\n<p>它将包含一个单行，指定 chr22 上的变量位置，例如。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>echo &quot;22 38483683 38483683&quot;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>echo &quot;22 38483683 38483683&quot; &gt; snvs.bed</pre></td></tr></table></figure><p>在这个列表上运行 <code>bam-readcount</code>  查看肿瘤和正常合并的 bam 文件</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bam-readcount -l snvs.bed -f ..&#x2F;chr22_only.fa ..&#x2F;align&#x2F;HBR.bam 2&gt;&#x2F;dev&#x2F;null 1&gt;HBR_bam-readcounts.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bam-readcount -l snvs.bed -f ..&#x2F;chr22_only.fa ..&#x2F;align&#x2F;UHR.bam 2&gt;&#x2F;dev&#x2F;null 1&gt;UHR_bam-readcounts.txt</pre></td></tr></table></figure><p>从这个输出中，可以解析每个碱基的 reads 计数</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat UHR_bam-readcounts.txt | perl -ne &#39;@data&#x3D;split(&quot;\\t&quot;, $_); @Adata&#x3D;split(&quot;:&quot;, $data[5]); @Cdata&#x3D;split(&quot;:&quot;, $data[6]); @Gdata&#x3D;split(&quot;:&quot;, $data[7]); @Tdata&#x3D;split(&quot;:&quot;, $data[8]); print &quot;UHR Counts\\t$data[0]\\t$data[1]\\tA: $Adata[1]\\tC: $Cdata[1]\\tT: $Tdata[1]\\tG: $Gdata[1]\\n&quot;;&#39;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>UHR Counts\t22\t38483683\tA: 163\tC: 0\tT: 0\tG: 163</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cat HBR_bam-readcounts.txt | perl -ne &#39;@data&#x3D;split(&quot;\\t&quot;, $_); @Adata&#x3D;split(&quot;:&quot;, $data[5]); @Cdata&#x3D;split(&quot;:&quot;, $data[6]); @Gdata&#x3D;split(&quot;:&quot;, $data[7]); @Tdata&#x3D;split(&quot;:&quot;, $data[8]); print &quot;HBR Counts\\t$data[0]\\t$data[1]\\tA: $Adata[1]\\tC: $Cdata[1]\\tT: $Tdata[1]\\tG: $Gdata[1]\\n&quot;;&#39;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>HBR Counts\t22\t38483683\tA: 75\tC: 0\tT: 0\tG: 131</pre></td></tr></table></figure>",
            "tags": [
                "生信学习",
                "bioinformatics",
                "RNAseq"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/",
            "url": "https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/",
            "title": "RNAseq教程(2.3)",
            "date_published": "2020-12-15T10:38:45.000Z",
            "content_html": "<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<p><strong>1.Module 1 - Introduction to RNA sequencing</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/17/2020-11-17-RNAseq(1)/\">Installation</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/28/2020-11-28-RNAseq(2)/\">Reference Genomes</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/01/2020-12-01-RNAseq(3)/\">Annotations</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/03/2020-12-03-RNAseq(4)/\">Indexing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/05/2020-12-05-RNAseq(5)/\">RNA-seq Data</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/08/2020-12-08-RNAseq(6)/\">Pre-Alignment QC</a></li>\n</ol>\n<p><strong>2.Module 2 - RNA-seq Alignment and Visualization</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/\">Adapter Trim</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/\">Alignment</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/\">IGV</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/\">Alignment Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/\">Alignment QC</a></li>\n</ol>\n<p><strong>3.Module 3 - Expression and Differential Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/\">Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/\">Differential Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/\">DE Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/\">Kallisto for Reference-Free Abundance Estimation</a></li>\n</ol>\n<p><strong>4.Module 4 - Isoform Discovery and Alternative Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/\">Reference Guided Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/\">de novo Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/05/2020-01-05-RNAseq(18)/\">Transcript Assembly Merge</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/\">Differential Splicing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/\">Splicing Visualization</a></li>\n</ol>\n<p><strong>5.Module 5 - De novo transcript reconstruction</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/\">De novo RNA-Seq Assembly and Analysis Using Trinity</a></li>\n</ol>\n<p><strong>6.Module 6 - Functional Annotation of Transcripts</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/14/2021-01-14RNAseq(22)/\">Functional Annotation of Assembled Transcripts Using Trinotate</a></li>\n</ol>\n<h2 id=\"23-igv\"><a class=\"anchor\" href=\"#23-igv\">#</a> 2.3 IGV</h2>\n<h3 id=\"1introduction\"><a class=\"anchor\" href=\"#1introduction\">#</a> 1.introduction</h3>\n<h4 id=\"description-of-the-lab\"><a class=\"anchor\" href=\"#description-of-the-lab\">#</a> Description of the lab</h4>\n<p>高通量测序最受欢迎的工具 -<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5icm9hZGluc3RpdHV0ZS5vcmcvaWd2L2hvbWU=\">IGV(Integrative Genomics Viewer)</span></p>\n<p>伴随本教程的文件</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dyaWZmaXRobGFiL3JuYXNlcV90dXRvcmlhbC93aWtpL0xlY3R1cmVGaWxlcy9jc2hsLzIwMTYvSUdWX1R1dG9yaWFsX0JyaWVmLnBkZg==\">IGV Lecture - Brief</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dyaWZmaXRobGFiL3JuYXNlcV90dXRvcmlhbC93aWtpL0xlY3R1cmVGaWxlcy9jc2hsLzIwMTYvSUdWX1R1dG9yaWFsX0xvbmdfQnJvYWRJbnN0aXR1dGUucGRm\">IGV Lecture - Long, from Broad Institute</span></li>\n</ul>\n<p>完成本次教程可实现以下工作</p>\n<ul>\n<li>\n<p>可视化各种基因组数据</p>\n</li>\n<li>\n<p>快速导航基因组</p>\n</li>\n<li>\n<p>可视化 reads 比对情况</p>\n</li>\n<li>\n<p>肉眼验证 SNP/SNV</p>\n</li>\n</ul>\n<h4 id=\"requirements\"><a class=\"anchor\" href=\"#requirements\">#</a> Requirements</h4>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5icm9hZGluc3RpdHV0ZS5vcmcvaWd2L2hvbWU=\">Integrative Genomics Viewer</span></p>\n</li>\n<li>\n<p>Ability to run Java</p>\n</li>\n<li>\n<p>Note that while most tutorials in this course are performed on the cloud, IGV will always be run on your <strong>local</strong> machine</p>\n</li>\n</ul>\n<h4 id=\"compatibility\"><a class=\"anchor\" href=\"#compatibility\">#</a> Compatibility</h4>\n<p>本教程是为 IGV v2.3 准备的，可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYXRhLmJyb2FkaW5zdGl0dXRlLm9yZy9pZ3YvcHJvamVjdHMvZG93bmxvYWRzLzIuMy9JR1ZEaXN0cmlidXRpb25fMi4zLjE0LnppcA==\"> IGV 下载页面</span>上找到。强烈建议使用这个版本。</p>\n<h4 id=\"data-set-for-igv\"><a class=\"anchor\" href=\"#data-set-for-igv\">#</a> Data Set for IGV</h4>\n<p>使用公开的来自 HCC1143 细胞系的 Illumina 序列数据。HCC1143 细胞系是从一名患有乳腺癌的 52 岁白人妇女体内产生的。这个细胞系的附加信息可以在这里找到:<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hdGNjLm9yZy9wcm9kdWN0cy9hbGwvQ1JMLTIzMjEuYXNweA==\">HCC1143</span> (tumor, TNM stage IIA, grade 3, primary ductal carcinoma) 以及<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hdGNjLm9yZy9wcm9kdWN0cy9hbGwvQ1JMLTIzNjIuYXNweA==\"> HCC1143/BL</span>(matched normal EBV transformed lymphoblast cell line).</p>\n<ul>\n<li>\n<p>从细胞系 HCC1143 产生的 reads 比对到这个区域</p>\n</li>\n<li>\n<p>Chromosome 21: 19,000,000-20,000,000</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ZmVyLmdlbm9tZS53dXN0bC5lZHUvZ3hmZXIxL3Byb2plY3QvZ21zL3Rlc3RkYXRhL2JhbXMvaGNjMTE0My9IQ0MxMTQzLm5vcm1hbC4yMS4xOU0tMjBNLmJhbQ==\">HCC1143.normal.21.19M-20M.bam</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ZmVyLmdlbm9tZS53dXN0bC5lZHUvZ3hmZXIxL3Byb2plY3QvZ21zL3Rlc3RkYXRhL2JhbXMvaGNjMTE0My9IQ0MxMTQzLm5vcm1hbC4yMS4xOU0tMjBNLmJhbS5iYWk=\">HCC1143.normal.21.19M-20M.bam.bai</span></p>\n</li>\n</ul>\n<h3 id=\"2-getting-familiar-with-igv\"><a class=\"anchor\" href=\"#2-getting-familiar-with-igv\">#</a> 2. Getting familiar with IGV</h3>\n<h4 id=\"get-familiar-with-the-interface\"><a class=\"anchor\" href=\"#get-familiar-with-the-interface\">#</a> Get familiar with the interface</h4>\n<p><strong>载入一个基因组:</strong></p>\n<p>默认情况下，IGV 加载 Human hg19。如果你研究的是另一个版本的人类基因组，或者另一种物种，你可以通过点击左上角的下拉菜单来改变基因组。在这个教程中，我们将使用人类 hg19。</p>\n<p>也可以采用以下方式 ( <code>File -&gt; Load from Server...</code> ):</p>\n<ul>\n<li>Ensembl genes (or your favourite source of gene annotations)</li>\n<li>GC Percentage</li>\n<li>dbSNP 1.3.1 or 1.3.7</li>\n</ul>\n<p><strong>Navigation：</strong></p>\n<p>在这个参考基因组中可以看到染色体列表，选择 1 号染色体。</p>\n<p>location 字段 (在界面的左上角) 中输入，导航到 chr1:10 000- 11000，然后单击 Go。这显示了 1 号染色体的窗口宽 1000 个碱基对，从 10000 号位置开始。</p>\n<p><img data-src=\"/img/posts/2020.12.15/image-20201228155326795.png\" alt=\"image-20201228155326795\"></p>\n<p>IGV 以颜色序列的形式显示基因组中的碱基序列 (例如 A = 绿色，C = 蓝色，等等)。这使得重复序列，比如在这个区域开始处发现的那些序列，很容易识别。放大一点使用 + 按钮看到参考基因组序列的单个碱基。</p>\n<p><img data-src=\"/img/posts/2020.12.15/image-20201228155435908.png\" alt=\"image-20201228155435908\"></p>\n<p>你可以在基因组坐标所在的框中输入你感兴趣的基因，然后按 Enter/Return 键。试试你最喜欢的基因，或者 BRCA1。</p>\n<p><img data-src=\"/img/posts/2020.12.15/image-20201228155514628.png\" alt=\"image-20201228155514628\"></p>\n<p>基因用线和框表示。线代表内含子区域，框代表外显子区域。箭头表示该基因的转录方向 / 链。当一个外显子框变窄，这表示一个 UTR。</p>\n<h4 id=\"region-lists\"><a class=\"anchor\" href=\"#region-lists\">#</a> Region Lists</h4>\n<p>有时，保存当前位置或加载感兴趣的区域真的很有用。为此，IGV 中有一个区域导航器。要访问它，单击 Regions &gt; Region Navigator。在浏览基因组时，可以随时按 Add 按钮保存一些书签。</p>\n<h4 id=\"loading-read-alignments\"><a class=\"anchor\" href=\"#loading-read-alignments\">#</a> Loading Read Alignments</h4>\n<p>我们将使用乳腺癌细胞系 HCC1143 来可视化比对结果。在速度方面，只有一小部分 chr21 将装载 (19M:20M)。</p>\n<p><strong>HCC1143 Alignments to hg19:</strong></p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ZmVyLmdlbm9tZS53dXN0bC5lZHUvZ3hmZXIxL3Byb2plY3QvZ21zL3Rlc3RkYXRhL2JhbXMvaGNjMTE0My9IQ0MxMTQzLm5vcm1hbC4yMS4xOU0tMjBNLmJhbQ==\">HCC1143.normal.21.19M-20M.bam</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ZmVyLmdlbm9tZS53dXN0bC5lZHUvZ3hmZXIxL3Byb2plY3QvZ21zL3Rlc3RkYXRhL2JhbXMvaGNjMTE0My9IQ0MxMTQzLm5vcm1hbC4yMS4xOU0tMjBNLmJhbS5iYWk=\">HCC1143.normal.21.19M-20M.bam.bai</span></li>\n</ul>\n<p>复制文件到你的本地，并在 IGV 中选择 <code>File &gt; Load from File...</code> ，选择 bam 文件，并单击 OK。注意，为了让 IGV 正确地加载它们，bam 文件和索引文件必须在同一个目录中。</p>\n<h4 id=\"visualizing-read-alignments\"><a class=\"anchor\" href=\"#visualizing-read-alignments\">#</a> Visualizing read alignments</h4>\n<p>选择染色体位点： <code>chr21:19,480,041-19,480,386</code></p>\n<p>To start our exploration, right click on the track-name, and select the following options:</p>\n<ul>\n<li>Sort alignments by  <code>start location</code></li>\n<li>Group alignments by  <code>pair orientation</code></li>\n</ul>\n<p><img data-src=\"/img/posts/2020.12.15/image-20201228164142409.png\" alt=\"image-20201228164142409\"></p>\n<p>通过右键点击比对界面和切换选项来试验各种设置。想想哪一种方法最适合特定的任务 (例如，质量控制、SNP 调用、CNV 查找)。</p>\n<h3 id=\"3inspecting-snps-snvs-and-svs\"><a class=\"anchor\" href=\"#3inspecting-snps-snvs-and-svs\">#</a> 3.Inspecting SNPs, SNVs, and SVs</h3>\n<h4 id=\"two-neighbouring-snps\"><a class=\"anchor\" href=\"#two-neighbouring-snps\">#</a> Two neighbouring SNPs</h4>\n<ul>\n<li>Navigate to region  <code>chr21:19,479,237-19,479,814</code></li>\n<li>Note two heterozygous variants, one corresponds to a known dbSNP ( <code>G/T</code>  on the right) the other does not ( <code>C/T</code>  on the left)</li>\n<li>Zoom in and center on the  <code>C/T</code>  SNV on the left, sort by base (window  <code>chr21:19,479,321</code>  is the SNV position)</li>\n<li>Sort alignments by  <code>base</code></li>\n<li>Color alignments by  <code>read strand</code></li>\n</ul>\n<p><img data-src=\"/img/posts/2020.12.15/image-20201228164719969.png\" alt=\"image-20201228164719969\"></p>\n<h4 id=\"homopolymer-region-with-indel\"><a class=\"anchor\" href=\"#homopolymer-region-with-indel\">#</a> Homopolymer region with indel</h4>\n<p>Navigate to position  <code>chr21:19,518,412-19,518,497</code></p>\n<p><img data-src=\"/img/posts/2020.12.15/image-20201228165017063.png\" alt=\"image-20201228165017063\"></p>\n<h4 id=\"coverage-by-gc\"><a class=\"anchor\" href=\"#coverage-by-gc\">#</a> Coverage by GC</h4>\n<p>Navigate to position  <code>chr21:19,611,925-19,631,555</code> . Note that the range contains areas where coverage drops to zero in a few places.</p>\n<p>**Example **</p>\n<ul>\n<li>Use  <code>Collapsed</code>  view</li>\n<li>Use  <code>Color alignments by</code>  -&gt;  <code>insert size and pair orientation</code></li>\n<li>Load GC track</li>\n<li>See concordance of coverage with GC content</li>\n</ul>\n<h4 id=\"heterozygous-snps-on-different-alleles\"><a class=\"anchor\" href=\"#heterozygous-snps-on-different-alleles\">#</a> Heterozygous SNPs on different alleles</h4>\n<p>Navigate to region  <code>chr21:19,666,833-19,667,007</code></p>\n<p>**Example **</p>\n<ul>\n<li>Sort by base (at position  <code>chr21:19,666,901</code> )</li>\n</ul>\n<p>对于这两个 snp，等位基因之间没有联系，因为两个 snp 的 reads 都只包含一个或另一个</p>\n<p><img data-src=\"/img/posts/2020.12.15/image-20201228165637271.png\" alt=\"image-20201228165637271\"></p>\n<h3 id=\"4automating-tasks-in-igv\"><a class=\"anchor\" href=\"#4automating-tasks-in-igv\">#</a> 4.Automating Tasks in IGV</h3>\n<p>我们可以使用 Tools 菜单调用运行批处理脚本。IGV 网站描述了批处理脚本:</p>\n<ul>\n<li>\n<p>Batch file requirements: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYnJvYWRpbnN0aXR1dGUub3JnL2lndi9iYXRjaA==\">https://www.broadinstitute.org/igv/batch</span></p>\n</li>\n<li>\n<p>Commands recognized in a batch script: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYnJvYWRpbnN0aXR1dGUub3JnL3NvZnR3YXJlL2lndi9Qb3J0Q29tbWFuZHM=\">https://www.broadinstitute.org/software/igv/PortCommands</span></p>\n</li>\n<li>\n<p>We also need to provide sample attribute file as described here: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5icm9hZGluc3RpdHV0ZS5vcmcvc29mdHdhcmUvaWd2Lz9xPVNhbXBsZUluZm9ybWF0aW9u\">http://www.broadinstitute.org/software/igv/?q=SampleInformation</span></p>\n</li>\n</ul>\n<p>下载数据集的批处理脚本和属性文件:</p>\n<ul>\n<li>Batch script: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2dyaWZmaXRobGFiL3JuYXNlcV90dXRvcmlhbC9tYXN0ZXIvc2NyaXB0cy9SdW5fYmF0Y2hfSUdWX3NuYXBzaG90cy50eHQ=\">Run_batch_IGV_snapshots.txt</span></li>\n<li>Attribute file: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2dyaWZmaXRobGFiL3JuYXNlcV90dXRvcmlhbC9tYXN0ZXIvc2NyaXB0cy9JZ3ZfSENDMTE0M19hdHRyaWJ1dGVzLnR4dA==\">Igv_HCC1143_attributes.txt</span></li>\n</ul>\n",
            "tags": [
                "生信学习",
                "bioinformatics",
                "RNAseq"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/",
            "url": "https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/",
            "title": "RNAseq教程(2.2)",
            "date_published": "2020-12-12T10:38:45.000Z",
            "content_html": "<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<p><strong>1.Module 1 - Introduction to RNA sequencing</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/17/2020-11-17-RNAseq(1)/\">Installation</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/28/2020-11-28-RNAseq(2)/\">Reference Genomes</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/01/2020-12-01-RNAseq(3)/\">Annotations</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/03/2020-12-03-RNAseq(4)/\">Indexing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/05/2020-12-05-RNAseq(5)/\">RNA-seq Data</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/08/2020-12-08-RNAseq(6)/\">Pre-Alignment QC</a></li>\n</ol>\n<p><strong>2.Module 2 - RNA-seq Alignment and Visualization</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/\">Adapter Trim</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/\">Alignment</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/\">IGV</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/\">Alignment Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/\">Alignment QC</a></li>\n</ol>\n<p><strong>3.Module 3 - Expression and Differential Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/\">Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/\">Differential Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/\">DE Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/\">Kallisto for Reference-Free Abundance Estimation</a></li>\n</ol>\n<p><strong>4.Module 4 - Isoform Discovery and Alternative Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/\">Reference Guided Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/\">de novo Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/05/2020-01-05-RNAseq(18)/\">Transcript Assembly Merge</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/\">Differential Splicing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/\">Splicing Visualization</a></li>\n</ol>\n<p><strong>5.Module 5 - De novo transcript reconstruction</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/\">De novo RNA-Seq Assembly and Analysis Using Trinity</a></li>\n</ol>\n<p><strong>6.Module 6 - Functional Annotation of Transcripts</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/14/2021-01-14RNAseq(22)/\">Functional Annotation of Assembled Transcripts Using Trinotate</a></li>\n</ol>\n<h2 id=\"22-alignment\"><a class=\"anchor\" href=\"#22-alignment\">#</a> 2.2 Alignment</h2>\n<h3 id=\"hisat2-alignment\"><a class=\"anchor\" href=\"#hisat2-alignment\">#</a> HISAT2 alignment</h3>\n<p>用 HISAT2 比对基因组和转录组。</p>\n<p>首先，为对齐结果创建适当的输出目录</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mkdir align</pre></td></tr></table></figure><p>HISAT2 的输出是每个数据集的 SAM/BAM 文件。</p>\n<p>参考 HISAT2 帮助手册获得更多说明：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jY2Iuamh1LmVkdS9zb2Z0d2FyZS9oaXNhdDIvbWFudWFsLnNodG1s\">https://ccb.jhu.edu/software/hisat2/manual.shtml</span></li>\n</ul>\n<p>HISAT2 基本用法:</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#hisat2 [options]* -x &lt;ht2-idx&gt; &#123;-1 &lt;m1&gt; -2 &lt;m2&gt; | -U &lt;r&gt; | --sra-acc &lt;SRA accession number&gt;&#125; [-S &lt;sam&gt;]</pre></td></tr></table></figure><p>额外参数如下:</p>\n<ul>\n<li>\n<p>'-p 8' tells HISAT2 to use eight CPUs for bowtie alignments.</p>\n</li>\n<li>\n<p>'--rna-strandness RF' specifies strandness of RNAseq library. We  will specify RF since the TruSeq strand-specific library was used to  make these libraries. See <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dyaWZmaXRobGFiL3JuYXNlcV90dXRvcmlhbC9ibG9iL21hc3Rlci9tYW51c2NyaXB0L3N1cHBsZW1lbnRhcnlfdGFibGVzL3N1cHBsZW1lbnRhcnlfdGFibGVfNS5tZA==\">here</span> for options.</p>\n</li>\n<li>\n<p>'--rg-id $ID' specifies a read group ID that is a unique identifier.</p>\n</li>\n<li>\n<p>'--rg SM:$SAMPLE_NAME' specifies a read group sample name. This  together with rg-id will allow you to determine which reads came from  which sample in the merged bam later on.</p>\n</li>\n<li>\n<p>'--rg LB:$LIBRARY_NAME' specifies a read group library name. This  together with rg-id will allow you to determine which reads came from  which library in the merged bam later on.</p>\n</li>\n<li>\n<p>'--rg PL:ILLUMINA' specifies a read group sequencing platform.</p>\n</li>\n<li>\n<p>'--rg PU:$PLATFORM_UNIT' specifies a read group sequencing platform unit.  Typically this consists of FLOWCELL-BARCODE.LANE</p>\n</li>\n<li>\n<p>'--dta' Reports alignments tailored for transcript assemblers.</p>\n</li>\n<li>\n<p>'-x /path/to/hisat2/index' The HISAT2 index filename prefix (minus  the trailing .X.ht2) built earlier including splice sites and exons.</p>\n</li>\n<li>\n<p>'-1 /path/to/read1.fastq.gz' The read 1 FASTQ file, optionally gzip(.gz) or bzip2(.bz2) compressed.</p>\n</li>\n<li>\n<p>'-2 /path/to/read2.fastq.gz' The read 2 FASTQ file, optionally gzip(.gz) or bzip2(.bz2) compressed.</p>\n</li>\n<li>\n<p>'-S /path/to/output.sam' The output SAM format text file of alignments.</p>\n</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hisat2 -p 8 --rg-id&#x3D;UHR_Rep1 --rg SM:UHR --rg LB:UHR_Rep1_ERCC-Mix1 --rg PL:ILLUMINA --rg PU:CXX1234-ACTGAC.1 -x INDEX&#x2F;index --dta --rna-strandness RF -1 UHR_Rep1_ERCC-Mix1_Build37-ErccTranscripts-chr22.read1.fastq.gz -2 UHR_Rep1_ERCC-Mix1_Build37-ErccTranscripts-chr22.read2.fastq.gz -S align&#x2F;UHR_Rep1.sam</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  hisat2 -p 8 --rg-id&#x3D;UHR_Rep2 --rg SM:UHR --rg LB:UHR_Rep2_ERCC-Mix1 --rg PL:ILLUMINA --rg PU:CXX1234-TGACAC.1 -x INDEX&#x2F;index --dta --rna-strandness RF -1 UHR_Rep2_ERCC-Mix1_Build37-ErccTranscripts-chr22.read1.fastq.gz -2 UHR_Rep2_ERCC-Mix1_Build37-ErccTranscripts-chr22.read2.fastq.gz -S align&#x2F;UHR_Rep2.sam</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  hisat2 -p 8 --rg-id&#x3D;UHR_Rep3 --rg SM:UHR --rg LB:UHR_Rep3_ERCC-Mix1 --rg PL:ILLUMINA --rg PU:CXX1234-CTGACA.1 -x INDEX&#x2F;index --dta --rna-strandness RF -1 UHR_Rep3_ERCC-Mix1_Build37-ErccTranscripts-chr22.read1.fastq.gz -2 UHR_Rep3_ERCC-Mix1_Build37-ErccTranscripts-chr22.read2.fastq.gz -S align&#x2F;UHR_Rep3.sam</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  hisat2 -p 8 --rg-id&#x3D;HBR_Rep1 --rg SM:HBR --rg LB:HBR_Rep1_ERCC-Mix2 --rg PL:ILLUMINA --rg PU:CXX1234-TGACAC.1 -x INDEX&#x2F;index --dta --rna-strandness RF -1 HBR_Rep1_ERCC-Mix2_Build37-ErccTranscripts-chr22.read1.fastq.gz -2 HBR_Rep1_ERCC-Mix2_Build37-ErccTranscripts-chr22.read2.fastq.gz -S align&#x2F;HBR_Rep1.sam</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  hisat2 -p 8 --rg-id&#x3D;HBR_Rep2 --rg SM:HBR --rg LB:HBR_Rep2_ERCC-Mix2 --rg PL:ILLUMINA --rg PU:CXX1234-GACACT.1 -x INDEX&#x2F;index --dta --rna-strandness RF -1 HBR_Rep2_ERCC-Mix2_Build37-ErccTranscripts-chr22.read1.fastq.gz -2 HBR_Rep2_ERCC-Mix2_Build37-ErccTranscripts-chr22.read2.fastq.gz -S align&#x2F;HBR_Rep2.sam</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  hisat2 -p 8 --rg-id&#x3D;HBR_Rep3 --rg SM:HBR --rg LB:HBR_Rep3_ERCC-Mix2 --rg PL:ILLUMINA --rg PU:CXX1234-ACACTG.1 -x INDEX&#x2F;index --dta --rna-strandness RF -1 HBR_Rep3_ERCC-Mix2_Build37-ErccTranscripts-chr22.read1.fastq.gz -2 HBR_Rep3_ERCC-Mix2_Build37-ErccTranscripts-chr22.read2.fastq.gz -S align&#x2F;HBR_Rep3.sam</pre></td></tr></table></figure><p>注意：在上面的对齐中，我们将每个库视为一个独立的数据集。如果你有一个库的多个数据，你可以在一个 HISAT2 命令中将它们对齐在一起。要组合多个 reads 文件，您需要为 '-1' 输入参数提供所有 read1 文件作为逗号分隔的列表，然后为 '-2' 输入参数提供所有 read2 文件作为逗号分隔的列表，(其中两个列表的顺序相同): 还可以使用 samtool</p>\n<h3 id=\"sam转换为bam\"><a class=\"anchor\" href=\"#sam转换为bam\">#</a> SAM 转换为 BAM</h3>\n<p>将 HISAT2 sam 文件转换为 bam 文件，并按对齐位置排序</p>\n<h3 id=\"合并bam文件\"><a class=\"anchor\" href=\"#合并bam文件\">#</a> 合并 BAM 文件</h3>\n<p>将所有 UHR 数据和所有 HBR 数据合并成一个 BAM 文件。注意：这可以通过几种方式来完成，比如 “samtools merge”，“bamtools merge”，或者使用 picard-tools (见下文)。我们选择第三种方法是因为它在合并 bam 头信息方面做得最好。注意:sambamba 也保留头部信息。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd align</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>java -Xmx2g -jar ..&#x2F;..&#x2F;picard.jar MergeSamFiles OUTPUT&#x3D;UHR.bam INPUT&#x3D;UHR_Rep1.bam INPUT&#x3D;UHR_Rep2.bam INPUT&#x3D;UHR_Rep3.bam</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>java -Xmx2g -jar ..&#x2F;..&#x2F;picard.jar MergeSamFiles OUTPUT&#x3D;HBR.bam INPUT&#x3D;HBR_Rep1.bam INPUT&#x3D;HBR_Rep2.bam INPUT&#x3D;HBR_Rep3.bam</pre></td></tr></table></figure><p>计算对齐 (BAM) 文件，确保所有文件都成功创建 (总共应该有 8 个)</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ls -l *.bam | wc -l</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ls *.bam</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>HBR.bam       HBR_Rep2.bam  UHR.bam       UHR_Rep2.bam</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>HBR_Rep1.bam  HBR_Rep3.bam  UHR_Rep1.bam  UHR_Rep3.bam</pre></td></tr></table></figure><h2 id=\"练习6\"><a class=\"anchor\" href=\"#练习6\">#</a> 练习 6</h2>\n<p>任务：对额外的数据集执行一些比对。用你在上面学到的技巧来对齐阅读。尝试使用 HISAT2。还要练习将 SAM 转换为 BAM 文件，并合并 BAM 文件。</p>\n<p>在练习 3 中创建的名为 “practice” 的单独工作目录中进行分析。</p>\n<p>.sam 和.bam 文件之间有什么区别？</p>\n<p>sam 文件是一个纯文本序列比对映射文件。bam 文件是相同信息的二进制压缩版本。</p>\n<p>如果您像上面所做的那样对结果 BAM 文件进行排序，那么结果是否按 read 名称排序？还是 position?</p>\n<p>按照 position 排序</p>\n<p>可以查看 BAM 文件的哪些列以确定排序的样式？</p>\n<p>第一、第三和第四列包含 reads 名称、染色体和位置。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>samtools view HCC1395_normal.bam | head | cut -f 1,3,4</pre></td></tr></table></figure><p>可以使用什么命令仅查看 BAM 头？</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>samtools view -H HCC1395_normal.bam</pre></td></tr></table></figure>",
            "tags": [
                "生信学习",
                "bioinformatics",
                "RNAseq"
            ]
        },
        {
            "id": "https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/",
            "url": "https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/",
            "title": "RNAseq教程(2.1)",
            "date_published": "2020-12-10T10:38:45.000Z",
            "content_html": "<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<p><strong>1.Module 1 - Introduction to RNA sequencing</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/17/2020-11-17-RNAseq(1)/\">Installation</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/11/28/2020-11-28-RNAseq(2)/\">Reference Genomes</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/01/2020-12-01-RNAseq(3)/\">Annotations</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/03/2020-12-03-RNAseq(4)/\">Indexing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/05/2020-12-05-RNAseq(5)/\">RNA-seq Data</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/08/2020-12-08-RNAseq(6)/\">Pre-Alignment QC</a></li>\n</ol>\n<p><strong>2.Module 2 - RNA-seq Alignment and Visualization</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/10/2020-12-10-RNAseq(7)/\">Adapter Trim</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/12/2020-12-12-RNAseq(8)/\">Alignment</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/15/2020-12-15-RNAseq(9)/\">IGV</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/17/2020-12-17-RNAseq(10)/\">Alignment Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/19/2020-12-19-RNAseq(11)/\">Alignment QC</a></li>\n</ol>\n<p><strong>3.Module 3 - Expression and Differential Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/22/2020-12-22-RNAseq(12)/\">Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/24/2020-12-24-RNAseq(13)/\">Differential Expression</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/26/2020-12-26-RNAseq(14)/\">DE Visualization</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/29/2020-12-29-RNAseq(15)/\">Kallisto for Reference-Free Abundance Estimation</a></li>\n</ol>\n<p><strong>4.Module 4 - Isoform Discovery and Alternative Expression</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2020/12/31/2020-12-31-RNAseq(16)/\">Reference Guided Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/02/2021-01-02-RNAseq(17)/\">de novo Transcript Assembly</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/05/2020-01-05-RNAseq(18)/\">Transcript Assembly Merge</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/07/2021-01-07-RNAseq(19)/\">Differential Splicing</a></li>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/09/2021-01-09-RNAseq(20)/\">Splicing Visualization</a></li>\n</ol>\n<p><strong>5.Module 5 - De novo transcript reconstruction</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/12/2021-01-12-RNAseq(21)/\">De novo RNA-Seq Assembly and Analysis Using Trinity</a></li>\n</ol>\n<p><strong>6.Module 6 - Functional Annotation of Transcripts</strong></p>\n<ol>\n<li><a href=\"https://www.zhouxiaozhao.cn/2021/01/14/2021-01-14RNAseq(22)/\">Functional Annotation of Assembled Transcripts Using Trinotate</a></li>\n</ol>\n<h2 id=\"21-adapter-trim可选步骤\"><a class=\"anchor\" href=\"#21-adapter-trim可选步骤\">#</a> 2.1 Adapter Trim (可选步骤)</h2>\n<p>使用 Flexbar 从读取的 FASTQ 文件中修剪 reads。这个步骤的输出将为每个数据集裁剪 FASTQ 文件。</p>\n<p>参考 Flexbar 帮助文档获得更详细的解释:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlcWFuL2ZsZXhiYXI=\">https://github.com/seqan/flexbar</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlcWFuL2ZsZXhiYXIvd2lraQ==\">https://github.com/seqan/flexbar/wiki</span></li>\n</ul>\n<p>Flexbar 基本用法:</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>flexbar -r reads [-t target] [-b barcodes] [-a adapters] [options]</pre></td></tr></table></figure><p>额外选项如下：</p>\n<ul>\n<li>'--adapter-min-overlap 7' requires a minimum of 7 bases to match the adapter</li>\n<li>'--adapter-trim-end RIGHT' uses a trimming strategy to remove the adapter from the 3 prime or RIGHT end of the read</li>\n<li>'--max-uncalled 300' allows as many as 300 uncalled or N bases (MiSeq read lengths can be 300bp)</li>\n<li>'--min-read-length' the minimum read length allowed after trimming is 25bp.</li>\n<li>'--threads 8' use 8 threads</li>\n<li>'--zip-output GZ' the input FASTQ files are gzipped so we will output gzipped FASTQ to save space</li>\n<li>'--adapters' define the path to the adapter FASTA file to trim</li>\n<li>'--reads' define the path to the read 1 FASTQ file of reads</li>\n<li>'--reads2' define the path to the read 2 FASTQ file of reads</li>\n<li>'--target' a base path for the output files.  The value will _1.fastq.gz and _2.fastq.gz for read 1 and read 2 respectively</li>\n<li>'--pre-trim-left' trim a fixed number of bases at left read end. For example, to trim 5 bases at the left side of reads: --pre-trim-left 5</li>\n<li>'--pre-trim-right' trim a fixed number of bases at right read end.  For example, to trim 5 bases at the right side of reads:  --pre-trim-right 5</li>\n<li>'--pre-trim-phred' trim based on phred quality value to deal with  higher error rates towards the end of reads. For example, to trim the 3  prime end until quality offset value 30 or higher is reached, specify:  --pre-trim-phred 30</li>\n</ul>\n<h3 id=\"flexbar-trim\"><a class=\"anchor\" href=\"#flexbar-trim\">#</a> Flexbar trim</h3>\n<p>首先，为输出设置一些目录</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mkdir trim</pre></td></tr></table></figure><p>下载必要的 Illumina 接头序列文件。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>wget http:&#x2F;&#x2F;genomedata.org&#x2F;rnaseq-tutorial&#x2F;illumina_multiplex.fa</pre></td></tr></table></figure><p>使用 flexbar 删除 illumina 接头序列 (如果有的话)，并修剪每个读取的前 13 个碱基。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>..&#x2F;flexbar-3.4.0-linux&#x2F;flexbar --adapter-min-overlap 7 --adapter-trim-end RIGHT --adapters illumina_multiplex.fa --pre-trim-left 13 --max-uncalled 300 --min-read-length 25 --threads 8 --zip-output GZ --reads UHR_Rep1_ERCC-Mix1_Build37-ErccTranscripts-chr22.read1.fastq.gz --reads2 UHR_Rep1_ERCC-Mix1_Build37-ErccTranscripts-chr22.read2.fastq.gz --target trim&#x2F;UHR_Rep1_ERCC-Mix1_Build37-ErccTranscripts-chr22</pre></td></tr></table></figure><p>可选练习：比较裁剪前后 FastQC 文件的质控报告。所有 fastqc 报告都可以在命令行上生成。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fastqc *.fastq.gz</pre></td></tr></table></figure><h3 id=\"练习5\"><a class=\"anchor\" href=\"#练习5\">#</a> 练习 5</h3>\n<p>作业：使用上面的方法，修剪你在之前的实践练习中下载的正常样本和肿瘤样本 reads 文件。注意：尝试去掉上面使用的硬左修剪选项 (”--pre-trim-left”)。一旦你削减了读取，使用 FastQC 工具比较修剪前和修剪后的 FastQ 文件。</p>\n<figure class=\"highlight raw\"><figcaption data-lang></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mkdir trimmed</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>wget http:&#x2F;&#x2F;genomedata.org&#x2F;rnaseq-tutorial&#x2F;illumina_multiplex.fa</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>flexbar --adapter-min-overlap 7 --adapter-trim-end RIGHT --adapters illumina_multiplex.fa --max-uncalled 300 --min-read-length 25 --threads 8 --zip-output GZ --reads hcc1395_normal_rep1_r1.fastq.gz --reads2 hcc1395_normal_rep1_r2.fastq.gz --target trimmed&#x2F;hcc1395_normal_rep1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>flexbar --adapter-min-overlap 7 --adapter-trim-end RIGHT --adapters illumina_multiplex.fa --max-uncalled 300 --min-read-length 25 --threads 8 --zip-output GZ --reads hcc1395_normal_rep2_r1.fastq.gz --reads2 hcc1395_normal_rep2_r2.fastq.gz --target trimmed&#x2F;hcc1395_normal_rep2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>flexbar --adapter-min-overlap 7 --adapter-trim-end RIGHT --adapters illumina_multiplex.fa --max-uncalled 300 --min-read-length 25 --threads 8 --zip-output GZ --reads hcc1395_normal_rep3_r1.fastq.gz --reads2 hcc1395_normal_rep3_r2.fastq.gz --target trimmed&#x2F;hcc1395_normal_rep3</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>flexbar --adapter-min-overlap 7 --adapter-trim-end RIGHT --adapters illumina_multiplex.fa --max-uncalled 300 --min-read-length 25 --threads 8 --zip-output GZ --reads hcc1395_tumor_rep1_r1.fastq.gz --reads2 hcc1395_tumor_rep1_r2.fastq.gz --target trimmed&#x2F;hcc1395_tumor_rep1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>flexbar --adapter-min-overlap 7 --adapter-trim-end RIGHT --adapters illumina_multiplex.fa --max-uncalled 300 --min-read-length 25 --threads 8 --zip-output GZ --reads hcc1395_tumor_rep2_r1.fastq.gz --reads2 hcc1395_tumor_rep2_r2.fastq.gz --target trimmed&#x2F;hcc1395_tumor_rep2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>flexbar --adapter-min-overlap 7 --adapter-trim-end RIGHT --adapters illumina_multiplex.fa --max-uncalled 300 --min-read-length 25 --threads 8 --zip-output GZ --reads hcc1395_tumor_rep3_r1.fastq.gz --reads2 hcc1395_tumor_rep3_r2.fastq.gz --target trimmed&#x2F;hcc1395_tumor_rep3</pre></td></tr></table></figure><p>修剪后，hcc1395 正常样本 1 号重复，reads1 的读长范围是多少？25-151</p>\n<p>FastQC 报告中哪些部分最适合观察修剪的效果？'Basic Statistics', 'Sequence Length Distribution' 以及 'Adapter Content'</p>\n<p>在 “Per base sequence content section” 部分，你看到了什么模式？什么可以解释这种模式呢？</p>\n<p>前 9 个碱基位置显示出一个尖状的模式，表明每个碱基在我们的读取 / 片段的开头有偏倚的表示。一种可能的解释是，cDNA 合成的随机六聚体引物在文库准备过程中以非随机的方式产生。因此碎片的生成 (以及最终的 reads) 在开始时有一个非随机模式。</p>\n",
            "tags": [
                "生信学习",
                "bioinformatics",
                "RNAseq"
            ]
        }
    ]
}